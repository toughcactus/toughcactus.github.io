<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虚幻引擎 on 苔滑非关雨，松鸣不假风。</title>
    <link>https://toughcactus.github.io/categories/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/</link>
    <description>苔滑非关雨，松鸣不假风。 (虚幻引擎)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All Rights Reserved.</copyright>
    
    <atom:link href="https://toughcactus.github.io/categories/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 1.日志类别</title>
      <link>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;每个模块可以有自己的日志类别，定位问题会比较方便&lt;/li&gt;
&lt;li&gt;虚幻C++提供了日志类别的枚举类，包含各模块的全局日志类别&lt;/li&gt;
&lt;li&gt;可以使用全局日志类别，也可以自定义静态日志类别&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、自定义日志类别 DEFINE_LOG_CATEGORY_STATIC
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Logging/LogMacros.h&lt;/p&gt;
&lt;p&gt;
  静态日志类别只能在定义所在源文件内使用。&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; alt=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; title=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogSimpleGeometry, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打印级别 DefaultVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于打印级别时，不予打印&lt;/li&gt;
&lt;li&gt;日志级别数值越大，级别越低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别 CompileTimeVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于编译级别时，该语句不予编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议将编译级别和打印级别均设为All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、全局日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; width=&#34;1400&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;LogTemp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打印级别为Log&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志级别不低于Log时打印&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-LogTemp.png&#34; alt=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; title=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; width=&#34;800&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Warning, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Error, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义的日志类别，编译级别均为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 10.UENUM宏</title>
      <link>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需使用宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用枚举类，定义枚举类时，需使用UENUM宏对其进行封装&lt;/li&gt;
&lt;li&gt;虚幻C++中所有枚举类型以大写E开头&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、枚举类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对枚举类变量赋值时，只能使用枚举类成员&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚幻C++中所有的枚举类都必须指定强类型，且必须为uint8（受到蓝图类限制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能使用强类型变量为枚举类对象赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、UENUM宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;定义枚举类时，在上一行使用UENUM宏标记&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UENUM宏/UENUM宏.png&#34; alt=&#34;/pic/UENUM宏/UENUM宏.png&#34; title=&#34;/pic/UENUM宏/UENUM宏.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该枚举类作为蓝图类使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UENUM(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMoveType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Static,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Sin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Rotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 11.FTransform结构体</title>
      <link>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;保存变换信息，包含旋转，缩放，位置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FRotator类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FRotator结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FRotator3d&lt;/li&gt;
&lt;li&gt;Rotator.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pitch&lt;/li&gt;
&lt;li&gt;Yaw&lt;/li&gt;
&lt;li&gt;Roll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
描述为字符串 FRotator::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
FRotator::ZeroRotator
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;li&gt;三个分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
二、FTransform结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/FTransform.png&#34; alt=&#34;/pic/FTransform结构体/FTransform.png&#34; title=&#34;/pic/FTransform结构体/FTransform.png&#34; width=&#34;350&#34;/&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
查看TTransform定义
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;TransformVectorized.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3个数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rotation&lt;/li&gt;
&lt;li&gt;Translation&lt;/li&gt;
&lt;li&gt;Scale3D&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/TTransform.png&#34; alt=&#34;/pic/FTransform结构体/TTransform.png&#34; title=&#34;/pic/FTransform结构体/TTransform.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、分量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
位置 FTransform::Translation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
旋转 FTransform::Rotation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
缩放 FTransform::Scale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
四、获取分量   
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
提取位置分量 FTransform::GetLocation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
提取旋转分量 FTransform::Rotator
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
提取缩放分量 FTransform::GetScale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
五、获取描述信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
FTransform::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
FTransform::ToHumanReadableString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;生成的字符串可读性更高&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 12.USTRUCT宏</title>
      <link>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用该结构体类，定义结构体类时，需使用USTRUCT宏对其进行封装，在定义开始处使用GENERATEATED_USTRUCT_BODY宏&lt;/li&gt;
&lt;li&gt;虚幻C++中所有结构体类以大写F开头&lt;/li&gt;
&lt;li&gt;FColor，FLinearColor，FMath，FTransform，FVector，FRotator都是结构体类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、结构体类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++使用结构体类组织数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、USTRUCT宏 和 GENERATED_USTRUCT_BODY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USTRUCT宏/USTRUCT宏.png&#34; alt=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; title=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;定义结构体类时，在上一行使用USTRUCT宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体开始处，使用GENERATED_USTRUCT_BODY宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以能在虚幻编辑器中使用为目的对结构体进行填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该结构体类作为蓝图类使用，在蓝图类中可读写的数据成员使用BlueprintReadWrite标识&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTRUCT(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FMoveSetting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GENERATED_USTRUCT_BODY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FTransform InitialTransform;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 13.FMath库</title>
      <link>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定义了多种数学函数，包括sine, cosine, 和其他三角函数(trigonometric functions)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/API/Runtime/Core/Math/FMath/&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
计算正弦值 FMath::Sin
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
获得随机布尔值 FMath::RandBool
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-RandBool.png&#34; alt=&#34;/pic/FMath库/FMath-RandBool.png&#34; title=&#34;/pic/FMath库/FMath-RandBool.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 14.UWorld类型</title>
      <link>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;关卡编辑器中，视口所展示的，即场景，又叫做世界场景&lt;/li&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/World.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取程序运行时长 UWorld::GetTimeSeconds
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; alt=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; title=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimeSeconds();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、创建Actor对象并对其调用BeginPlay UWorld::SpawnActor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;动态创建Actor对象，在调用完Actor对象的构造函数之后，调用Actor对象的BeginPlay函数&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActor.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; width=&#34;1200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;返回AActor指针  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InClass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，原点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rotation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，不发生旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor(GeometryClass);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建Actor对象并对其调用BeginPlay UWorld::SpawnActor&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; width=&#34;1200&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpawnParameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform FTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, FTransform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、创建Actor对象 UWorld::SpawnActorDeferred&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, Transform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Owner&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instigator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CollisionHandlingOverride&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 15.向量结构体</title>
      <link>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FVector2D
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector2d&lt;/li&gt;
&lt;li&gt;二维向量&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、FVector
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector3d&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X&lt;/li&gt;
&lt;li&gt;Y&lt;/li&gt;
&lt;li&gt;Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
获取描述信息 FVector::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ToString.png&#34; alt=&#34;/pic/向量结构体/FVector-ToString.png&#34; title=&#34;/pic/向量结构体/FVector-ToString.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
获取分量为0的FVector对象 FVector::ZeroVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ZeroVector.png&#34; alt=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; title=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
判断分量是否为0 FVector::IsZero
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;为0返回true&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-IsZero.png&#34; alt=&#34;/pic/向量结构体/FVector-IsZero.png&#34; title=&#34;/pic/向量结构体/FVector-IsZero.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 16.FTimerManager结构体</title>
      <link>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定时器管理类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
初始化定时器 FTimerManager::SetTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InOutHandle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计时器描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InObj&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向受计时器约束的Actor对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InTimerMethod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;到时间后调用回调函数&lt;/li&gt;
&lt;li&gt;参数为函数指针，需要对回调函数取地址，直接传函数名报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InRate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间间隔&lt;/li&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InbLoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环计时 标志&lt;/li&gt;
&lt;li&gt;布尔类型&lt;/li&gt;
&lt;li&gt;为true则循环计时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InFirstDelay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
停止定时器  FTimerManager::ClearTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; width=&#34;750&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 17.类模板</title>
      <link>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、UClass指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;UClass是所有类型的基类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以匹配到虚幻C++的所有类型，蓝图类、C++类均可&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UClass &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Class;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、ASimpleGeometry指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只能匹配ABaseGeometryActor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ABaseGeometryActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GeometryObject;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、类模板 TSubclassOf
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可以匹配给定类及其派生类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用时需要设定具体类，可以在虚幻编辑器中设置，也可以在C++中设置&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以匹配的类有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASimpleGeometry&lt;/li&gt;
&lt;li&gt;派生自该类的蓝图类，BP_SimpleGeometry_Cube和BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 18.数组类型</title>
      <link>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
TArray
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;容器类型&lt;/li&gt;
&lt;li&gt;模板类&lt;/li&gt;
&lt;li&gt;初始化时不用设置元素个数&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器设置数组元素个数，添加或者写元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FGeometrySetting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryPayloads;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 19.UFUNCTION宏</title>
      <link>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果想在蓝图编辑器中调用该函数，声明时，需使用UFUNCTION宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、UFUNCTION宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明函数时，在上一行使用UFUNCTION宏&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UFUNCTION宏/UFUNCTION宏.png&#34; alt=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; title=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; width=&#34;180&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、使用BlueprintCallable说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可在蓝图中调用该函数&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetGeometrySetting(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FGeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Setting) { GeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Setting; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FGeometrySetting GetGeometrySetting() {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GeometrySetting; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 20.委托</title>
      <link>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DELEGATE系列宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Delegates/DelegateCombinations.h&lt;/p&gt;
&lt;p&gt;
  可以按如下类型进行分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只允许一个客户端订阅&lt;/li&gt;
&lt;li&gt;允许多客户端，使用MULTICAST标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能否在蓝图中使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只能在C++侧使用&lt;/li&gt;
&lt;li&gt;如果要在蓝图中使用，使用DYNAMIC标识&lt;/li&gt;
&lt;li&gt;在C++中使用时，参数只用给出类型&lt;/li&gt;
&lt;li&gt;在蓝图中使用时，需要给出参数的类型和名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理函数的参数个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认参数列表为空&lt;/li&gt;
&lt;li&gt;使用OneParam - NineParams，允许 1 - 9 个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE系列宏.png&#34; alt=&#34;/pic/委托/DELEGATE系列宏.png&#34; title=&#34;/pic/委托/DELEGATE系列宏.png&#34;/&gt;       &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
参数列表为空的委托说明
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; alt=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; title=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
DECLARE_MULTICAST_DELEGATE_OneParam
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; alt=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; title=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
二、服务器端通知客户端 Broadcast
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;MulticastDelegateBase.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传参和定义委托时给出的参数信息一致&lt;/li&gt;
&lt;li&gt;通过委托类型变量调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-Broadcast.png&#34; alt=&#34;/pic/委托/DELEGATE-Broadcast.png&#34; title=&#34;/pic/委托/DELEGATE-Broadcast.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、仅C++ 订阅服务并注册处理函数 AddUObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;DelegateSignatureImpl.inl&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
四、支持蓝图 订阅服务并注册处理函数 AddDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Delegate.h&lt;/p&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-AddDynamic.png&#34; alt=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34; title=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 21.APawn类型</title>
      <link>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、配置用户输入 APawn::SetupPlayerInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; alt=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; title=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取类型 APawn::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GENERATED_BODY宏中定义    &lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; alt=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; title=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;UObject也有StaticClass，UObjectBaseUtility没有&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、Pawn被使用时调用 APawn::PossessedBy
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-PossessedBy.png&#34; alt=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; title=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、Pawn被释放时调用 APawn::UnPossessed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、不推荐 查看是否被PlayerController接管 APawn::IsControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; width=&#34;1400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、查看是否被Controller接管 APawn::IsPawnControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AIController或PlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 22.UInputComponent类型</title>
      <link>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、绑定轴映射的回调函数 UInputComponent::BindAxis
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输入事件 EInputEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/EngineBaseTypes.h&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/EInputEvent.png&#34; alt=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; title=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; width=&#34;350&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;按下时触发 IE_Pressed&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、绑定动作映射的回调函数 UInputComponent::BindAction
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChangePawn&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 23.AGameModeBase类型</title>
      <link>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DefaultPawn设置 AGameModeBase::DefaultPawnClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;数据成员&lt;/li&gt;
&lt;li&gt;使用TSubOfClass定义的模板类&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、默认构造函数 AGameModeBase::AGameModeBase
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对关卡基础类型的设置可以参照这里&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; width=&#34;550&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、PlayerController设置 AGameModeBase::PlayerControllerClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 24.USceneComponent类型</title>
      <link>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;场景中有变换属性的基础组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、挂载到根组件 USceneComponent::SetupAttachment
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;根节点 InParent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置相对于根组件的变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 相对平移 USceneComponent::SetRelativeLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. 相对选旋转 USceneComponent::SetRelativeRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
3. 相对缩放 USceneComponent::SetRelativeScale3D
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
4. 相对变换 USceneComponent::SetRelativeTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 25.UCameraComponent类型</title>
      <link>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;摄像机类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 26.UGameplayStatics类型</title>
      <link>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;虚幻引擎提供的辅助类&lt;/li&gt;
&lt;li&gt;提供多种静态函数，均可在蓝图中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得场景中的指定类型的所有Actor对象 UGameplayStatics::GetAllActorsOfClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;和类模板TSubclassOf搭配使用&lt;/li&gt;
&lt;li&gt;保存到传入的数组引用参数中&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指向游戏中任意Object WorldContextObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用GetWorld传入世界对象，或者使用指向PlayerController的指针(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAllActorsOfClass(GetWorld(), AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass(), Pawns);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 27.APlayerController类型</title>
      <link>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、切换Pawn AController::Possess
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess1.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess2.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、处理输入 APlayerController::SetupInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、获取类型 APlayerController::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;在GENERATED_BODY中定义  &lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-StaticClass.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 28.ACharacter类型</title>
      <link>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;派生自APawn，实现了角色的动作(motion)，动画(animation)和物理交互(physical interaction)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 3.UE_LOG宏</title>
      <link>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</guid>
      <description>&lt;p width=&#34;1500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UE_LOG宏/UE_LOG.png&#34; alt=&#34;/pic/UE_LOG宏/UE_LOG.png&#34; title=&#34;/pic/UE_LOG宏/UE_LOG.png&#34;/&gt;
输出日志时，给出所属的日志类别和该条日志的级别。&lt;/p&gt;
&lt;p&gt;
当日志的级别小于日志类别的打印级别时，忽略；小于日志类别的编译级别时，不编译该条语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出格式
CategoryName: Verbosity: TEXT    &lt;/li&gt;
&lt;li&gt;当日志级别大于Log时，输出日志级别&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志级别 Verbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎定义了日志级别的枚举类&lt;/li&gt;
&lt;li&gt;常用的有Log，Display，Warning和Error&lt;/li&gt;
&lt;li&gt;在编辑器的输出日志窗口，不同级别的日志以不同颜色显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本格式 Format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不接受cstring，要求TCHAR *  &lt;/li&gt;
&lt;li&gt;使用TEXT宏包裹&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format中的%s匹配TCHAR *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果匹配cstring，编译不会报错，输出可能是乱码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 4.AActor类型</title>
      <link>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;
UObjectBaseUtility&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UObject&lt;/p&gt;
&lt;p&gt;
  ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
AActor  &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、AActor类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++基础类型&lt;/li&gt;
&lt;li&gt;能放置到世界场景中的物体，具有相同的基类，AActor&lt;/li&gt;
&lt;li&gt;初始状态不具有Gizmo(不可移动)，也无法绑定模型&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actor对象代指所有能添加到世界场景中的物体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几何体，特效，声音，都派生自AActor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器中添加AActor对象，也可以在代码中动态生成Actor对象&lt;/li&gt;
&lt;li&gt;Actor对象有无实体均可&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由Component组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的组件可以根据需求进行组装，方便重用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、UObject类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎中最基础的类型，AActor类型的父类&lt;/li&gt;
&lt;li&gt;不能在场景中添加UObject对象&lt;/li&gt;
&lt;li&gt;可以在代码中创建UObject对象并对逻辑进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、获得Actor对象描述 UObjectBaseUtility::GetName
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存在FString对象中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; width=&#34;300&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogSimpleGeometry, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、组件 Component
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
创建组件 UObject::CreateDefaultSubobject&amp;lt;T&amp;gt;
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回指向给定类型对象的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; alt=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; title=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; width=&#34;1100&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshInEditor&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SubobjectName&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FName类型&lt;/li&gt;
&lt;li&gt;虚幻编辑器中对应的属性名&lt;/li&gt;
&lt;li&gt;在C++中对变量StaticMesh做设置，在虚幻编辑器中对名为&amp;#34;StaticMeshInEditor&amp;#34;的属性做设置&lt;/li&gt;
&lt;li&gt;二者相对应&lt;/li&gt;
&lt;li&gt;可以在C++中修改变量名&lt;/li&gt;
&lt;li&gt;如果修改属性名，虚幻编辑器中该属性的已有设置会因找不到目标载体而无法生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTransient&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
注册为根组件 AActor::SetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;根组件的设置会影响到变换矩阵求值&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; width=&#34;600&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetRootComponent(StaticMesh);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NewRootComponent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向组件的指针      &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USceneComponent *类型，可以接受UStaticMeshCompoent *(动态绑定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UStaticMeshComponent派生自UMeshComponent&lt;/li&gt;
&lt;li&gt;UMeshComponent派生自UPrimitiveComponent&lt;/li&gt;
&lt;li&gt;UPrimitiveComponent派生自USceneComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
获取指向根组件的指针 AActor::GetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetRootComponent();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
输入组件 AActor::InputComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据成员&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-InputComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; title=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
五、Actor变换信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
获得Actor对象的变换信息 AActor::GetActorTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorTransform.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MoveSetting.InitialTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorTransform();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
获得Actor对象位置信息 AActor::GetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorLocation.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector CurrentLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
获得Actor对象旋转信息 AActor::GetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator CurrentRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorRotation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
设置Actor对象位置信息 AActor::SetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation1.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation2.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorLocation(CurrentLocation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
设置Actor对象旋转信息 AActor::SetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorRotation(CurrentRotation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
六、获取指向世界对象的指针 AActor::GetWorld
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorld.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-16&#34;&gt;
七、获取定时器管理对象的引用 AActor::GetWorldTimerManager
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-17&#34;&gt;
八、对Actor对象调用BeginPlay AActor::FinishSpawning
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;和UWorld::SpawnActorDeferred配合使用&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-FinishSpawning.png&#34; alt=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; title=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; width=&#34;1200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-18&#34;&gt;
九、销毁Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
销毁Actor对象 AActor::Destroy
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;不支持重载&lt;/li&gt;
&lt;li&gt;对对象调用Destroy时，会将其PendingKill标志置1，等到Garbage Collector被触发时，再回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy1.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy2.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
等待若干秒后销毁Actor对象 AActor::SetLifeSpan
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;li&gt;通过定时器实现&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetLifeSpan.png&#34; alt=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; title=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-21&#34;&gt;
十、从场景中移除Actor对象之前进行收尾工作 AActor::EndPlay
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;将Actor对象从场景中移除之前，会对其调用EndPlay函数&lt;/li&gt;
&lt;li&gt;对Actor对象调用Destroy函数，包含EndPlay函数的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-EndPlay.png&#34; alt=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; title=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-22&#34;&gt;
十一、Actor对象是否有效 IsValid
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回true则未被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/IsValid.png&#34; alt=&#34;/pic/AActor类型/IsValid.png&#34; title=&#34;/pic/AActor类型/IsValid.png&#34;/&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;除了判断指针是否为空，还会检查对象的Flag；对对象调用Destroy时，会将其PendingKill标志置1，此时即认为Actor对象不再有效&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/PendingKillFlag.png&#34; alt=&#34;/pic/AActor类型/PendingKillFlag.png&#34; title=&#34;/pic/AActor类型/PendingKillFlag.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 5.颜色结构体</title>
      <link>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;32位整型，存放RGBA&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供预定义颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FColor-Pre-Inited.png&#34; alt=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; title=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、FLinearColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;具有RGBA4个通道，每个通道使用32位表示&lt;/li&gt;
&lt;li&gt;分量类型float&lt;/li&gt;
&lt;li&gt;可以更细致地描述颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
提供预定义颜色
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Black;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
获得随机颜色 FLinearColor::MakeRandomColor
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
输出颜色描述 FLinearColor::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-ToString.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; width=&#34;350&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Color.ToString());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 6.UEngine类型</title>
      <link>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/Engine.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、GEngine
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;使用前需检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在屏幕输出信息 UEngine::AddOnScreenDebugMessage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; alt=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; title=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;消息标识 Key&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key相同的消息只显示第一个&lt;/li&gt;
&lt;li&gt;使用-1则一定会显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本显示时长 TimeToDisplay&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本颜色 DisplayColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用FColor预定义颜色，也可以使用自定义的FColor对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本内容 DebugMessage&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在世界场景中的位置 bNewerOnTop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认在顶部输出信息，为false则在屏幕底部输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置文字大小 TextScale&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GEngine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Orange, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Green, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 7.UPROPERTY宏</title>
      <link>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需该配置&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中读写该数据成员，声明数据成员时，需使用UPROPERTY宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、原型 Default
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于C++类的蓝图类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;li&gt;BP_SimpleGeometry_Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、实例 Instance
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;当把蓝图类或者C++类拖动到关卡中时，会创建该类的对象，称作实例&lt;/li&gt;
&lt;li&gt;在世界大纲中可以看到关卡中的实例，选中，可以在细节面板查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、UPROPERTY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UPROPERTY宏/UPROPERTY宏.png&#34; alt=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; title=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;声明数据成员时，在上一行使用UPROPERTY宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型和实例的细节面板中，数据成员的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问说明符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;li&gt;设置原型的数据成员，是设置数据成员的初始值&lt;/li&gt;
&lt;li&gt;设置实例的数据成员，是设置对象的数据成员的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持给数据成员分组       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供元信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在蓝图编辑器中的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝图属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不支持批量设置，可以分得更细&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、访问说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;EditAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，开放读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，开放写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，开放写权限     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，只读     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、元信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给数据成员分组 Category&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、蓝图属性
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在蓝图编辑器中的读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadWrite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BluepringAssignable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许赋值     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 8.UStaticMeshComponent类型</title>
      <link>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;初始化后，具有Gizmo&lt;/li&gt;
&lt;li&gt;可在虚幻编辑器中绑定模型&lt;/li&gt;
&lt;li&gt;获取材质对象后，可设置其参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
USceneComponent&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UPrimitiveComponent&lt;/p&gt;
&lt;p&gt;
        ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UStaticMeshComponent&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得指向给定索引的材质对象指针 UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;材质对象存在则返回指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全，可多次调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若网格组件未应用材质，告警&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; alt=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; title=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UMaterialInstanceDynamic &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;材质对象索引 ElementIndex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从0开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 9.UMaterialInstanceDynamic类型</title>
      <link>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;材质实例类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置给定参数 UMaterialInstanceDynamic::SetVectorParameterValue
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; alt=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; title=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; width=&#34;700&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, Color);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;参数名 ParameterName&lt;/li&gt;
&lt;li&gt;值 Value&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 1.向量类型</title>
      <link>https://toughcactus.github.io/post/1.%E5%90%91%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.%E5%90%91%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、1-4维向量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;li&gt;Constant2Vector&lt;/li&gt;
&lt;li&gt;Constant3Vector&lt;/li&gt;
&lt;li&gt;Constant4Vector&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建1-4维向量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;任意区域 右键 搜索&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-CreateConstants.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-CreateConstants.png&#34; title=&#34;/pic/蓝图类型/Blueprint-CreateConstants.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键盘数字 1-4&lt;/li&gt;
&lt;li&gt;鼠标左键&lt;/li&gt;
&lt;li&gt;对应1-4维向量实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、常量 Constant
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant.png&#34; width=&#34;120&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、四维常量 Constant4Vector
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; width=&#34;120&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;可以用来存储颜色，4个分量分别存放RGBA&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
写值
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双击vector&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在细节面板设置&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
五、转换成可输入参数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右键&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; title=&#34;/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 2.字符串</title>
      <link>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建字符串变量 MakeLiteralString
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; width=&#34;300&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; alt=&#34;/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; title=&#34;/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、连接字符串 Append
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-Append.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-Append.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-Append.png&#34; width=&#34;300&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-Append.png&#34; alt=&#34;/pic/字符串/Blueprint-String-Append.png&#34; title=&#34;/pic/字符串/Blueprint-String-Append.png&#34; width=&#34;200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可增加输入字符串个数 Add pin&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-Append-AddPin.png&#34; alt=&#34;/pic/字符串/Blueprint-String-Append-AddPin.png&#34; title=&#34;/pic/字符串/Blueprint-String-Append-AddPin.png&#34; width=&#34;200&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输出字符串 PrintString
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-PrintString.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-PrintString.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-PrintString.png&#34; width=&#34;350&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-PrintString.png&#34; alt=&#34;/pic/字符串/Blueprint-String-PrintString.png&#34; title=&#34;/pic/字符串/Blueprint-String-PrintString.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 3.键位绑定</title>
      <link>https://toughcactus.github.io/post/3.%E9%94%AE%E4%BD%8D%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.%E9%94%AE%E4%BD%8D%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;入口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目设置 &amp;gt; 引擎 &amp;gt; 输入 &amp;gt; Bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;键位绑定有两种，动作映射和轴映射，其触发机制不同&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/键位绑定/ProjectSettings-Bindings.png&#34; alt=&#34;/pic/键位绑定/ProjectSettings-Bindings.png&#34; title=&#34;/pic/键位绑定/ProjectSettings-Bindings.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、动作映射
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;一次完整的按下并松开按键，触发一次回调函数&lt;/li&gt;
&lt;li&gt;具有离散性&lt;/li&gt;
&lt;li&gt;如，跳跃&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、轴映射
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;按下键位之后，松开之前的这段时间，持续触发回调函数&lt;/li&gt;
&lt;li&gt;每次刷新帧时，调用回调函数&lt;/li&gt;
&lt;li&gt;具有连续性&lt;/li&gt;
&lt;li&gt;如，前后左右移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、绑定
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在虚幻编辑器中，将键位和函数描述绑定在一起；稍后在C++中，再将回调函数和函数描述绑定在一起&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; alt=&#34;/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; title=&#34;/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 使用Emacs开发UnrealC&#43;&#43;项目</title>
      <link>https://toughcactus.github.io/post/%E4%BD%BF%E7%94%A8emacs%E5%BC%80%E5%8F%91unrealc&#43;&#43;%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/%E4%BD%BF%E7%94%A8emacs%E5%BC%80%E5%8F%91unrealc&#43;&#43;%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;
  2023.4.4更新&lt;/p&gt;
&lt;p&gt;
  如果出现定义跳转不成功，请查看clangd版本，已知clangd-llvm-15.0.4工作正常，而14.0.0无法跳转&lt;/p&gt;
&lt;p&gt;
  在MacOS和Windows均有验证&lt;/p&gt;
&lt;p&gt;
  We could configure Unreal editor using Visual Studio or Visual Studio Code as default IDE, but they are not the only choices.&lt;/p&gt;
&lt;p&gt;
  Lately I&amp;#39;m learning how to use Emacs, and I couldn&amp;#39;t help to wonder if I could use Emacs to develop Unreal C++ project.&lt;/p&gt;
&lt;p&gt;
  I&amp;#39;m not going to say I did it, but I&amp;#39;m okay with what I have found.&lt;/p&gt;
&lt;p&gt;
  So this article is written to share how I use Emacs to develop Unreal C++ project.&lt;/p&gt;
&lt;p&gt;
  I could find definitions and all the references from cpp file, it&amp;#39;s ok for lsp to expand macros and understand the class is not a variable although the class key word followed by macro.&lt;/p&gt;
&lt;p&gt;
  It&amp;#39;s not supported to go to the implementaion from definition or declaration in the header file.&lt;/p&gt;
&lt;p&gt;
  We could use completion during our development.&lt;/p&gt;
&lt;p&gt;
First of all, I want to introduce the packages I use.&lt;/p&gt;
&lt;p&gt;
  For normal C++ project development, I use clangd + lsp-mode + company, which supports auto completion, quickly jumping to definitions and finding all the references. All it needs, it&amp;#39;s a compile_commands.json.&lt;/p&gt;
&lt;p&gt;
  For Unreal C++ project, it&amp;#39;s so difficult to find references and definitions, due to Engine source code has 50+ G, and we use so many macros during our development.&lt;/p&gt;
&lt;p&gt;
  I&amp;#39;ve tried gtags, etags, ctags, no rtags because I couldn&amp;#39;t install it on Windows. All those tools take a lot of time to generate tags file, which didn&amp;#39;t make it easier to find the definitions or references.&lt;/p&gt;
&lt;p&gt;
  But I happened to use VSCode building Unreal C++ project, while I found it use something has common with compile_commands.json.&lt;/p&gt;
&lt;p&gt;
  This is the key point, under the folder of our project named .vscode, there are 2 files, the one named compileCommands_YOURPROJECTNAME.json, could be used as compile_commands.json for project, the other one called compileCommands_Default.json is about Engine source code.&lt;/p&gt;
&lt;p&gt;
  You could also find .vscode folder under &amp;#34;Epic Games/UE_NO/&amp;#34;.&lt;/p&gt;
&lt;p&gt;
  In order to let those files work in Emacs, I put &amp;#34;NO/YOURPROJECTNAME/.vscode/compileCommands_YOURPROJECTNAME.json&amp;#34; under &amp;#34;NO/YOURPROJECTNAME/&amp;#34; as compile_commands.json, so I could get definitions and references from my project even UE Engine Source code.&lt;/p&gt;
&lt;p&gt;
  I also put &amp;#34;Epic Game/UE_NO/.vscode/compileCommands_Default.json&amp;#34; under &amp;#34;Epic Game/UE_NO/&amp;#34; as compile_commands.json, which helps us to search definitions and references in UE Engine Source folder.&lt;/p&gt;
&lt;p&gt;
  It will help you to understand, that the .vscode is generated by UnrealBuildTool.exe, aimed at helping VSCode to find definitions or references, and provide other functions.&lt;/p&gt;
&lt;p&gt;
  It&amp;#39;s difficult for gtags, ctags to generate tags file, I think it&amp;#39;s because they don&amp;#39;t know the project structure or how to parse code with so many macros.&lt;/p&gt;
&lt;p&gt;
  There are 2 ways to make Unreal editor generate .vscode folder. Both of them need you set VSCode as you default IDE first.&lt;/p&gt;
&lt;p&gt;
  To set VSCode as your default IDE, you need open you editor, find Editor Preferences, go to Source Code, select Visual Studio Code as you Source Code Editor.&lt;/p&gt;
&lt;p&gt;
  Then you could choose the way you like to generate the .vscode folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Under Tools, choose Refresh Visual Studio Code Project, then you will get the .vscode folder both under your project and the Engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use UnrealBuildTool.exe.&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UnrealBuildTool.exe -projectfiles -project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOURPROJECTNAME\YOURPROJECTNAME.uproject&amp;#34;&lt;/span&gt; -game -rocket -progress&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The key parameter is -projectfiles, it tells UBT to generate project files according to your setting for default IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  That&amp;#39;s all I want to share. I think it will also help if you want to use NeoVim as your C++ IDE, which supports lsp to parse source code too.&lt;/p&gt;
&lt;p&gt;
  If you want to use other software to develop Unreal C++ project, I guess you may be interested in using commands building or running your game. Here is the link I found in Unreal Engine forum, which really helps me a lot.
  &lt;a href=&#34;https://www.youtube.com/watch?v=94FvzO1HVzY&amp;amp;t=1285s&#34;&gt;Unreal Engine C++ Project Setup, From Scratch&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 1.5基础知识</title>
      <link>https://toughcactus.github.io/post/1.5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、命名规则
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
虚幻C++
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;变量，常量和函数的首字母大写&lt;/li&gt;
&lt;li&gt;枚举类 &amp;gt; E打头&lt;/li&gt;
&lt;li&gt;结构体 &amp;gt; F打头&lt;/li&gt;
&lt;li&gt;Actor派生类 &amp;gt; A打头&lt;/li&gt;
&lt;li&gt;模板类 &amp;gt; T打头&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
虚幻编辑器
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;材质类 &amp;gt; M_打头&lt;/li&gt;
&lt;li&gt;基于C++的蓝图类 &amp;gt; BP_打头&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
二、虚幻C++ &amp;gt; 基础类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uint8 c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uint32 a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int32 b;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;int32类型 &amp;gt; 在不同平台编译时，该类型始终占4个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
三、虚幻C++ &amp;gt; 强制类型转换 Cast
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基类 转换成 派生类&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Actor);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 1.6使用UnrealBuildTool</title>
      <link>https://toughcactus.github.io/post/1.6%E4%BD%BF%E7%94%A8unrealbuildtool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.6%E4%BD%BF%E7%94%A8unrealbuildtool/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用UnrealBuildTool时，依赖很多第三方工具，下载引擎时，虚幻引擎有把这些工具打包，并在脚本里指定了路径&lt;/li&gt;
&lt;li&gt;如果是Windows系统，直接使用UBT问题不大&lt;/li&gt;
&lt;li&gt;MacOS中，建议使用脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;UBT路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/Binaries/DotNET/UnrealBuildTool/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;脚本路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uproject文件路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.1.1/TheBasics/TheBasics.uproject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、使用UBT生成项目文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在uproject文件同级目录生成工程文件&lt;/li&gt;
&lt;li&gt;在MacOS上直接使用UBT，需要安装dotnet 6.0 Runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建默认源码编辑器的工程文件&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UBT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Binaries/DotNET/UnrealBuildTool/UnrealBuildTool&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/TheBasics.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/.vscode/compileCommands_Default.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/.vscode/compileCommands_TheBasics.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成默认Source Code Editor的工程文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $UBT -projectfiles -project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$Project&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -game -rocket -progress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成VSCode工程文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $UBT -projectfiles -project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$Project&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -game -rocket -progress -VSCode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成XCode工程文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $UBT -projectfiles -project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$Project&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -game -rocket -progress -XCodeProjectFiles
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp $EngineCCSrc $EngineCCDst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp $ProjectCCSrc $ProjectCCDst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VS Code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 -VSCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XCode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 -XCodeProjectFiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用脚本 ShooterGame
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GenerateProjectFilesScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;Script&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/GenerateProjectFiles.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BuildScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;Script&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Build.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/Examples/ShooterGame/ShooterGame.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成VSCode工程文件       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;GenerateProjectFilesScript &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;projectfiles &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;game &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rocket &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;progress &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;VSCode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 编译       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;BuildScript ShooterGameEditor Mac Development &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;waitmutex &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;NoHotReload&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、使用脚本 TheBasics
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GenerateProjectFilesScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;Script&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/GenerateProjectFiles.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BuildScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;Script&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Build.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/TheBasics.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成VSCode工程文件       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;GenerateProjectFilesScript &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;projectfiles &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;game &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rocket &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;progress &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;VSCode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/.vscode/compileCommands_Default.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/TheBasics/.vscode/compileCommands_TheBasics.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;EngineCCSrc &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;EngineCCDst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;ProjectCCSrc &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;ProjectCCDst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 编译       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;BuildScript TheBasicsEditor Mac Development &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;waitmutex &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;NoHotReload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 在虚幻编辑器中打开项目       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  open &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;Project&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 13.1虚幻引擎主要类概述</title>
      <link>https://toughcactus.github.io/post/13.1%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%BB%E8%A6%81%E7%B1%BB%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/13.1%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%BB%E8%A6%81%E7%B1%BB%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、World，Actor和Component
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;世界场景由Actor对象组成，Actor对象由各种Component组成&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/World,Actor和Component.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/World,Actor和Component.png&#34; title=&#34;/pic/虚幻引擎主要类概述/World,Actor和Component.png&#34; width=&#34;600&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、控制器 APawn类和APlayerController类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/控制器.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/控制器.png&#34; title=&#34;/pic/虚幻引擎主要类概述/控制器.png&#34; width=&#34;500&#34;/&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. APawn类
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;派生自AActor，实现了对Actor对象的控制&lt;/li&gt;
&lt;li&gt;接收来自输入设备的信息，使Actor对象做出相应动作&lt;/li&gt;
&lt;li&gt;无视觉表示，逻辑类&lt;/li&gt;
&lt;li&gt;Pawn就是棋子的意思，如控制游戏角色前后左右移动，通常通过APawn类完成&lt;/li&gt;
&lt;li&gt;生存期与Actor对象一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2.APlayerController类
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;派生自AController，AController派生自AActor&lt;/li&gt;
&lt;li&gt;生存期与关卡一致&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当游戏玩家可以控制多个Actor对象时，通过APlayerController切换当前操作的Actor对象，或者不操作任何一个Actor对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用组合(Composite)模式，APawn作为APlayerController的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收来自输入设备的信息，通常使用APlayerController处理全局控制，如关闭菜单，关闭声音，退出游戏等&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
三、关卡 AGameModeBase类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;关卡类型&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持各种设置，且都有默认值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括游戏时长设置，玩家和NPC个数，团队分布，玩家的重生机制等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在关卡编辑器，世界设置中，可对GameMode进行配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值时，显示为None&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/LevelEditor-WorldSettings-GameMode.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/LevelEditor-WorldSettings-GameMode.png&#34; title=&#34;/pic/虚幻引擎主要类概述/LevelEditor-WorldSettings-GameMode.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
四、游戏角色 ACharacter类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/ACharacter.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/ACharacter.png&#34; title=&#34;/pic/虚幻引擎主要类概述/ACharacter.png&#34; width=&#34;500&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;派生自APawn，实现了游戏角色相应功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增加了碰撞检测功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;胶囊组件 CapsuleComponent，负责与外界的物理交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增加了骨骼网格体组件 Mesh，可以设置模型和动画&lt;/li&gt;
&lt;li&gt;增加了角色移动组件 CharacterMovement，控制角色的移动，如速度，跳跃高度等  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
五、AI AIController类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/AIController.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/AIController.png&#34; title=&#34;/pic/虚幻引擎主要类概述/AIController.png&#34; width=&#34;500&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;派生自AController&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;APawn既可以由玩家控制，也可以由AI控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用组合(Composite)模式，APawn作为AIController的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在行为树中给出其主要任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
六、HUD类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Head Up Display&lt;/li&gt;
&lt;li&gt;负责用户界面，目前使用较少&lt;/li&gt;
&lt;li&gt;虚幻引擎通过Widget来使用接口，可以用HUD来管理Widget&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
七、观察者 ASpectatorPawn类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;观察者类&lt;/li&gt;
&lt;li&gt;角色死亡时，玩家所控制的Pawn&lt;/li&gt;
&lt;li&gt;通常情况下，即flying camera，可以设置其为黑白效果  &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
八、玩家信息 APlayerState类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;负责存储玩家的各种统计信息，如击杀人数，死亡次数&lt;/li&gt;
&lt;li&gt;生存期与关卡一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
九、游戏信息 AGameState类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;多人游戏逻辑使用&lt;/li&gt;
&lt;li&gt;多人游戏中，GameModeBase存在于服务器端，保存各种信息，将游戏过程中的玩家信息传输给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-12&#34;&gt;
十、游戏 UGameInstance类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;游戏实例类&lt;/li&gt;
&lt;li&gt;会创建该类型的全局变量&lt;/li&gt;
&lt;li&gt;一些全局信息，如和关卡无关的图形设置，声音设置，及其他直接加载到关卡的信息，需要作为全局信息保存&lt;/li&gt;
&lt;li&gt;可以创建GameInstance的派生类，包含保存以上信息的变量&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在项目设置中，配置使用GameInstance的派生类&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/ProjectSettings-GameInstance.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/ProjectSettings-GameInstance.png&#34; title=&#34;/pic/虚幻引擎主要类概述/ProjectSettings-GameInstance.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-13&#34;&gt;
十一、总结
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/虚幻引擎主要类概述/UGameInstance.png&#34; alt=&#34;/pic/虚幻引擎主要类概述/UGameInstance.png&#34; title=&#34;/pic/虚幻引擎主要类概述/UGameInstance.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;有三种生存期，Actor对象的生存期，关卡生存期，和游戏实例生存期&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游戏包含多个关卡，关卡类型为AGameModeBase，AGameModeBase对象负责创建所有关卡基本对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APawn&lt;/li&gt;
&lt;li&gt;APlayerController&lt;/li&gt;
&lt;li&gt;ASpectatorPawn&lt;/li&gt;
&lt;li&gt;APlayerState&lt;/li&gt;
&lt;li&gt;AGameState&lt;/li&gt;
&lt;li&gt;AHUD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打开关卡时，GameModeBase对象被创建，其创建关卡基本对象&lt;/li&gt;
&lt;li&gt;整个游戏中，在所有关卡之上，有UGameInstance对象    &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 16.1源码的编译过程</title>
      <link>https://toughcactus.github.io/post/16.1%E6%BA%90%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/16.1%E6%BA%90%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;编译源码的规则使用C#编写&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿TheBasics举例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source/TheBasics/TheBasics.Build.cs&lt;/li&gt;
&lt;li&gt;Source/TheBasics.Target.cs&lt;/li&gt;
&lt;li&gt;Source/TheBasicsEditor.Target.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑虚幻引擎项目是通过UnrealBuildTool完成的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎提供的子例程&lt;/li&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/Binaries/DotNET/UnrealBuildTool/  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不直接使用UnrealBuildTool，而是调用对应的脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/Binaries/ThirdParty里存放了很多第三方工具&lt;/li&gt;
&lt;li&gt;脚本里包含了这些工具的路径，减少了虚幻引擎的环境配置工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、引擎代码模块化
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;EpicGames/UE_5.1/Source/&lt;/li&gt;
&lt;li&gt;引擎代码由若干个模块组成，模块对指定功能进行了封装，如AI、特效和用户界面等&lt;/li&gt;
&lt;li&gt;每个模块拥有一个xx.Build.cs文件，包含其编译说明&lt;/li&gt;
&lt;li&gt;模块类的编译规则拥有基类 ModuleRules，我们可以对编译规则进行设置&lt;/li&gt;
&lt;li&gt;不同平台上，模块的编译规则也不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、TheBasics.Build.cs文件中的编译规则
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依赖模块列表 PublicDependencyModuleNames&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;4个默认依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core&lt;/li&gt;
&lt;li&gt;CoreUObject&lt;/li&gt;
&lt;li&gt;Engine&lt;/li&gt;
&lt;li&gt;InputCore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以添加要使用的第三方库，如机器学习库和计算机视觉库&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用构建选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/module-properties-in-unreal-engine/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、TheBasics模块
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Souce/TheBasics/TheBasics.cpp中，使用宏定义了游戏模块&lt;/li&gt;
&lt;li&gt;游戏也可以由模块组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、项目描述 TheBasics.uproject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;json格式&lt;/li&gt;
&lt;li&gt;Mudules字段描述游戏模块TheBasics&lt;/li&gt;
&lt;li&gt;EngineAssociation字段描述引擎版本&lt;/li&gt;
&lt;li&gt;虚幻引擎根据uproject生成项目所需文件，并根据虚幻编辑器的设置来运行项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、预编译头文件(PCH, Precompiled Headers)机制
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;预编译头文件机制提前处理模块内文件，并替换相应文本，可以减少编译项目时预处理器的工作量&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块预设共享头文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以Engine/Source/Runtime/Engine/为例&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Engine.Build.cs文件中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/源码的编译过程/Engine-SharedPCHHeaderFile.png&#34; alt=&#34;/pic/源码的编译过程/Engine-SharedPCHHeaderFile.png&#34; title=&#34;/pic/源码的编译过程/Engine-SharedPCHHeaderFile.png&#34; width=&#34;350&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;包含模块相应头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TheBasics模块使用预编译头文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source/TheBasics.Build.cs文件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCHUsage项默认设置&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/源码的编译过程/TheBasics-PCHUsage.png&#34; alt=&#34;/pic/源码的编译过程/TheBasics-PCHUsage.png&#34; title=&#34;/pic/源码的编译过程/TheBasics-PCHUsage.png&#34; width=&#34;350&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;编译时，会包含依赖模块提供的SharedPCHHeaderFile  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不使用预编译头文件机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置PCHUsage为NoPCHs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PCHUsage = PCHUsageMode.NoPCHs;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;按照之前添加的头文件，编译没有问题&lt;/li&gt;
&lt;li&gt;换言之，使用默认PCHUsage设置，可以不用添加那些头文件&lt;/li&gt;
&lt;li&gt;注意，未包含USceneComponent的头文件，AActor中有包含&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、IWYU
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Include-What-You-Use&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/include-what-you-use-iwyu-for-unreal-engine-programming/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、构建目标
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;之前都是在虚幻编辑器中运行游戏，构建目标是TheBasicsEditor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source/TheBasicsEditor.Target.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建独立(standalone)游戏时，target为TheBasics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source/TheBasics.Target.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想将游戏构建为专用服务器，添加TheBasic.ServerTarget.cs文件，自己实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置Type为TargetType.Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/unreal-engine-build-tool-target-reference/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、游戏项目的动态库
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;如 TheBasics/Binaries/Mac/UnrealEditor-TheBasics.dylib&lt;/li&gt;
&lt;li&gt;每个模块对应一个UnrealEditor打头的动态库文件&lt;/li&gt;
&lt;li&gt;当我们下载虚幻引擎时，将预编译模块的动态库文件下载到本地&lt;/li&gt;
&lt;li&gt;当我编译源码时，在本地生成模块的动态库文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
九、设置头文件搜索路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Source目录下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ShootTraining.Build.cs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PublicIncludePaths.AddRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Player&amp;#34;&lt;/span&gt; });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 16.2宏和生成文件</title>
      <link>https://toughcactus.github.io/post/16.2%E5%AE%8F%E5%92%8C%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/16.2%E5%AE%8F%E5%92%8C%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在其他程序中，在源码设置变量值，实现函数，做出调整时，需要在源码中进行修改，重新编译运行程序&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而虚幻编辑器中，在运行游戏之前，我们可以可以设置原型和实例的属性值，这个更像是在gdb中修改变量值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是虚幻引擎通过宏实现的&lt;/li&gt;
&lt;li&gt;而在蓝图编辑器中，做出相应修改，除了要记得保存，在使用之前还需点击Compile进行编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、虚幻引擎的反馈系统
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;虚幻引擎实现了反馈系统，在虚幻编辑器中运行游戏时，能够追踪和修改数据结构和行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以在运行时获取类型信息，通过名字调用函数，获取枚举元素的名字，创建迭代器来遍历数据结构的所有字段，以及获取其他信息&lt;/li&gt;
&lt;li&gt;我们可以在创建实例之前，把指定类型的指针传递给创建对象的类，如WorldSettings中，指定关卡的基础类型&lt;/li&gt;
&lt;li&gt;在实例的细节面板中设置属性&lt;/li&gt;
&lt;li&gt;虚幻C++和蓝图的通信&lt;/li&gt;
&lt;li&gt;对象序列化&lt;/li&gt;
&lt;li&gt;在虚幻编辑器中的配置可以保存到磁盘&lt;/li&gt;
&lt;li&gt;垃圾(内存)回收机制也是基于反馈系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;该系统加快了开发工程，在多个领域中应用&lt;/li&gt;
&lt;li&gt;纯C++开发的系统不具备上述功能，这是游戏引擎的概念&lt;/li&gt;
&lt;li&gt;我们可以编写纯C++代码来处理运算，也可以在Actor对象间传递计算结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、从虚幻编辑器创建C++类时使用了类模板
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;引擎提供了主要类的模板&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engine/Content/Editor/Templates/&lt;/li&gt;
&lt;li&gt;templates文件，或meta文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿ActorClass.cpp.template和ActorClass.h.template举例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以看到其中包含的变量&lt;/li&gt;
&lt;li&gt;对变量进行替换，得到源码文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、编译项目时的头文件解析
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;为target解析头文件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行UnrealHeadTool程序，该子例程既是解析器，也是生成器，负责处理源码中的宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UnrealHeadTool扫描头文件查看其是否包含后缀为.generted.h的头文件，拥有该标记的头文件意味着其使用了虚幻引擎提供的特殊类型，需要额外处理，若无，跳过&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UHT会搜索UENUM，USTRUCT，UCLASS，UPROPERTY，UFUNCTION宏，并生成反馈系统所需的源码，部分源码在后缀为.generted.h的头文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类成员如果未使用宏，不会出现在该文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成文件保存在TheBasics/Intermediate/Build/Mac/x86_64/UnrealEditor/Inc/TheBasics/UHT/目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.1的目录&lt;/li&gt;
&lt;li&gt;5.1之前在TheBasics/Intermediate/Build/Mac/x86_64/UnrealEditor/Inc/TheBasics/目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成文件的可读性很差&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意到定义类时使用的xxx_API宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该宏被定义为DLLEXPORT，而DLLEXPORT宏针对不同的平台有不同的定义&lt;/li&gt;
&lt;li&gt;windows为 __declspec(dllexport)，即可从dll文件导出类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、项目文件夹
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要保留的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻编辑器和游戏的项目设置 Config&lt;/li&gt;
&lt;li&gt;资产和蓝图 Content&lt;/li&gt;
&lt;li&gt;源码 Source&lt;/li&gt;
&lt;li&gt;uproject文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以删除的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目编译的生成文件 Binaries&lt;/li&gt;
&lt;li&gt;临时文件 DerivedDataCache&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;临时文件 Intermediate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intermediate/ProjectFiles包含使用的Source Code Editor的项目文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志和备份 Saved&lt;/li&gt;
&lt;li&gt;工程文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 1.3项目结构</title>
      <link>https://toughcactus.github.io/post/1.3%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.3%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;以XCode项目为例&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、项目结构
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;工程中包含两个子项目&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Engine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引擎代码&lt;/li&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目代码&lt;/li&gt;
&lt;li&gt;Projects/5.1.1/TheBasics/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/项目结构/XCode-Project.png&#34; alt=&#34;/pic/项目结构/XCode-Project.png&#34; title=&#34;/pic/项目结构/XCode-Project.png&#34; width=&#34;250&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、源码文件夹
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;包含所有代码文件&lt;/li&gt;
&lt;li&gt;TheBasics/Source&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、C++类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Games/Source/TheBasics目录下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SimpleGeometry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 &amp;gt; Source/TheBasics/Public/SimpleGeometry.h&lt;/li&gt;
&lt;li&gt;源文件 &amp;gt; Source/TheBasics/Private/SimpleGeometry.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 1.4C&#43;&#43;类源码阅读</title>
      <link>https://toughcactus.github.io/post/1.4c&#43;&#43;%E7%B1%BB%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4c&#43;&#43;%E7%B1%BB%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件框架 SimpleGeometry.h
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Head.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Head.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Head.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; width=&#34;400&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;版权说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保留所有权利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预处理指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保在编译过程中，源文件只会被引入一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含头文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CoreMinimal.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了基本类型，常量和日志工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actor.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BaseGeometryActor.generated.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须位于最后&lt;/li&gt;
&lt;li&gt;引擎自动生成的头文件&lt;/li&gt;
&lt;li&gt;每个Actor均有，包含类的元信息(meta information)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类定义中使用的宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UCLASS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义类使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;THEBASICS_API&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GENERATED_BODY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;填充类定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编译项目文件之前，UnrealBuildTool会展开这些宏生成实际代码。&lt;/p&gt;
&lt;p&gt;
借助这些宏，我们可以在编辑器中使用C++类，创建派生自C++类的蓝图类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、SimpleGeometry类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;派生自Actor。&lt;/p&gt;
&lt;p&gt;
  源码默认包含默认构造函数和两个虚函数，这也是最常用到的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以设置是否每帧都要调用Tick函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeginPlay函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常在成功创建对象后，对其调用BeginPlay函数，只调用一次&lt;/li&gt;
&lt;li&gt;若在关卡中添加对象时，运行游戏是自动对其调用&lt;/li&gt;
&lt;li&gt;在代码中可以不直接创建对象，使用SpawnActor或SpawnActorDeferred，BeginPlay的调用可能紧接构造函数，也可能在完成某些操作之后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tick函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每秒会刷新若干次帧，默认每次刷新帧时调用&lt;/li&gt;
&lt;li&gt;可以设置帧刷新间隔，即参数DeltaTime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、源文件框架 SimpleGeometry.cpp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; width=&#34;450&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; width=&#34;350&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;版权注释&lt;/li&gt;
&lt;li&gt;包含头文件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若bCanEverTick为true，每一帧都会调用Tick函数&lt;/li&gt;
&lt;li&gt;设置该变量可起到优化效果，不一定需要每一帧都调用Tick函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Super关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeginPLay和Tick是虚函数&lt;/li&gt;
&lt;li&gt;虚幻C++将Super设定为基类的别名&lt;/li&gt;
&lt;li&gt;虚幻C++的元代码(meta code)允许我们通过Super关键字统一使用基类函数和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 10.1添加获取和设置GeometrySetting的接口</title>
      <link>https://toughcactus.github.io/post/10.1%E6%B7%BB%E5%8A%A0%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEgeometrysetting%E7%9A%84%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.1%E6%B7%BB%E5%8A%A0%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEgeometrysetting%E7%9A%84%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、AGeometryObject类添加接口，获取和设置GeometrySetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 GetGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;inline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 SetGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;inline   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 11.销毁Actor对象</title>
      <link>https://toughcactus.github.io/post/11.%E9%94%80%E6%AF%81actor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/11.%E9%94%80%E6%AF%81actor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用委托完成&lt;/li&gt;
&lt;li&gt;C++侧订阅&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在服务器端，定义委托类型 AGeometryObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅C++侧，多客户端，传入Actor对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_MULTICAST_DELEGATE_OneParam&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_MULTICAST_DELEGATE_OneParam(FOnActorDestroy, AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在服务器端，添加委托类型变量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;客户端订阅该服务时需要访问&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AGeometryObject添加数据成员 OnActorDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   FOnActorDestroy OnActorDestroy;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、给AGeometryObject添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FTimerHandle DestroyTimer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DestroyTimerRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定时器 DestroyTimer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时器间隔 DestroyTimerRate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、给AGeometryObject添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DestroyTimer回调函数 OnTimerDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭定时器&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerDestroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GetWorldTimerManager().ClearTimer(DestroyTimer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化DestroyTimer InitTimerDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitTimerDestroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GetWorldTimerManager().SetTimer(DestroyTimer, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerDestroy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      DestroyTimerRate, true);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、在OnTimerDestroy中通知客户端
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;至此，委托服务器端的部署全部完成&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OnActorDestroy.Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;委托客户端的处理函数 OnActorDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;销毁Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnActorDestroy(AActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Actor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Actor) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Destroy Timer of Actor %s is UP&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Actor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Actor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Geometry) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next to DESTROY Actor %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//    Geometry-&amp;gt;SetLifeSpan(2.0f);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、给AGeometryHub添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象类型 GeometryClassForDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForDestroy;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，为其订阅委托并注册处理函数 SpawnGeometryForDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForDestroy()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForDestroy, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnActorDestroy.AddUObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnActorDestroy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
九、重载EndPlay函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;给出EndPlay的声明&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现EndPlay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用基类的EndPlay&lt;/li&gt;
&lt;li&gt;输出日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EndPlay(EEndPlayReason&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Type EndPlayReason) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EndPlay(EndPlayReason);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometry, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EndPlay Called&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
十、日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/销毁Actor对象/AGeometryHub-日志.png&#34; alt=&#34;/pic/销毁Actor对象/AGeometryHub-日志.png&#34; title=&#34;/pic/销毁Actor对象/AGeometryHub-日志.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 12.1材质颜色改变时通知</title>
      <link>https://toughcactus.github.io/post/12.1%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E6%97%B6%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.1%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E6%97%B6%E9%80%9A%E7%9F%A5/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在服务器端，定义委托类型 AGeometryObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++侧和蓝图，多客户端，传入颜色和Actor对象描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出的变量名不是字符串，但在蓝图编辑器中确实作为参数名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnColorChange, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;, Color, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FString&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;, Name);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在服务器端，添加委托类型变量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;客户端订阅该服务时需要访问&lt;/li&gt;
&lt;li&gt;需要在蓝图中为该数据成员赋值&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AGeometryObject添加数据成员 OnColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(BlueprintAssignable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FOnColorChange OnColorChange;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在OnTimerRandomColor中通知客户端
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;至此，委托服务器端的部署全部完成&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OnColorChange.Broadcast(Color, GetName());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 12.3在C&#43;&#43;侧订阅委托并注册处理函数</title>
      <link>https://toughcactus.github.io/post/12.3%E5%9C%A8c&#43;&#43;%E4%BE%A7%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E6%B3%A8%E5%86%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.3%E5%9C%A8c&#43;&#43;%E4%BE%A7%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E6%B3%A8%E5%86%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;该委托同时支持蓝图和C++&lt;/li&gt;
&lt;li&gt;只用于C++的委托，使用AddUObject函数进行订阅&lt;/li&gt;
&lt;li&gt;对于可用于蓝图的委托，使用AddDynamic函数进行订阅&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;委托客户端的处理函数 OnColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;打印Actor描述和颜色描述&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为该委托可用于蓝图，虽然不会在蓝图中使用OnColorChange，仍需使用UFUNCTION宏标记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需使用声明符&lt;/li&gt;
&lt;li&gt;与引擎内存模型有关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、给AGeometryHub添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象类型 GeometryClassForColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForColorChange;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，为其订阅委托并注册处理函数 SpawnGeometryForColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForColorChange() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForColorChange, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnColorChange.AddDynamic(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnColorChange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FGeometrySetting GeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetGeometrySetting();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GeometrySetting.FlagRandomColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GeometrySetting.MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RandBool() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; EGeometryMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Rotate : EGeometryMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Sin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetGeometrySetting(GeometrySetting);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; alt=&#34;/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; title=&#34;/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 14.2实现GeometryPawn</title>
      <link>https://toughcactus.github.io/post/14.2%E5%AE%9E%E7%8E%B0geometrypawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.2%E5%AE%9E%E7%8E%B0geometrypawn/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加静态日志类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogGeometryPawn, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Velocity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector VelocityVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroVector;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;速度 Velocity&lt;/li&gt;
&lt;li&gt;方向 VelocityVector&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员 MoveForward
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FString Direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPawn, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Move %s: %f&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Direction, Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector.X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、添加函数成员 MoveRight
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FString Direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPawn, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Move %s: %f&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Direction, Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector.Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、添加函数成员 VelocityInForce
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在Tick中更新Pawn位置&lt;/li&gt;
&lt;li&gt;当按下上下左右键位时，虽然在X轴和Y轴有步进，但直观上来看，并不是前后左右移动，和摄像机的方向有关&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;VelocityInForce(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DeltaTime)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;VelocityVector.IsZero())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FVector NewLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Velocity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DeltaTime &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; VelocityVector;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          SetActorLocation(NewLocation);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、添加函数成员 BindAxis
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在SetupPlayerInputComponent中调用&lt;/li&gt;
&lt;li&gt;将回调函数绑定到函数描述&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用委托机制实现绑定&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindAxis(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、创建组件并注册为根组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虽然没有使用SceneComponent，如果省略这一步，摄像机无法移动  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USceneComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; SceneComponent;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitComponent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在构造函数中调用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建组件并注册为根组件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SceneComponent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USceneComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SceneComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SetRootComponent(SceneComponent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 14.3使用GeometryPawn</title>
      <link>https://toughcactus.github.io/post/14.3%E4%BD%BF%E7%94%A8geometrypawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.3%E4%BD%BF%E7%94%A8geometrypawn/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GameModeBase中完成设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPawn.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员 InitPawn
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPawn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DefaultPawnClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员 默认构造函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;AGeometryGameModeBase()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitPawn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、在虚幻编辑器中查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; alt=&#34;/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; title=&#34;/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 15.1添加CameraComponent</title>
      <link>https://toughcactus.github.io/post/15.1%E6%B7%BB%E5%8A%A0cameracomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.1%E6%B7%BB%E5%8A%A0cameracomponent/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;为Pawn添加StaticMesh组件和Camera组件，了解一下Camera组件&lt;/li&gt;
&lt;li&gt;之前绑定StaticMesh时，将其作为根组件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在使用Camera组件，一种做法时，将Scene组件作为根组件，将StaticMesh和Camera组件作为根组件附件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用到Scene组件的变换，也会应用到StaticMesh和Camera上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还有一种做法，将StaticMesh作为根组件，而Camera作为StaticMesh附件，此时，移动StaticMesh，Camera会一起移动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反过来亦可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根组件和附件的选择，会影响组件的最终变换矩阵，其为父组件变换矩阵和附件变换矩阵的乘积&lt;/li&gt;
&lt;li&gt;选择第一种做法&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中添加前向声明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UCameraComponent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UStaticMeshComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在源文件中添加头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UStaticMeshComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;StaticMesh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UCameraComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Camera;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化组件，并挂在根组件下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitStaticMeshAndCameraComponent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UCameraComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CameraComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(SceneComponent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现虚函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;调用时输出日志&lt;/li&gt;
&lt;li&gt;用来了解切换Pawn时，对Pawn对象的操作  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用Pawn时，调用PossessedBy&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PossessedBy(AController &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NewController) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PossessedBy(NewController);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;NewController) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPawn, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s possessed by %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NewController&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换Pawn时，调用UnPossessed&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UnPossessed() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UnPossessed();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPawn, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s is unpossessed&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 15.4切换Pawn</title>
      <link>https://toughcactus.github.io/post/15.4%E5%88%87%E6%8D%A2pawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.4%E5%88%87%E6%8D%A2pawn/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在PlayerController的派生类中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPawn.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加静态日志类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogGeometryPlayerController, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;Pawns;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int32 CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;获取场景中派生自AGeometryPawn的Pawn对象&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPawns() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAllActorsOfClass(GetWorld(), AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass(), Pawns);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现BeginPlay
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BeginPlay() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BeginPlay();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitPawns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;Pawn个数为1时，切换无效&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挨个轮转Pawn对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Pawns.Num() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPlayerController, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pawn Num %d&amp;#34;&lt;/span&gt;), Pawns.Num());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryPawn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;CurrentPawn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Pawns[CurrentPawnIndex]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; Pawns.Num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryPawn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NextPawn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Pawns[CurrentPawnIndex]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;CurrentPawn &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;NextPawn) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPlayerController, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s switch pawn from %s to %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;CurrentPawn&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NextPawn&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Possess(NextPawn);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;为函数描述绑定回调函数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupInputComponent中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindChangePawn() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (InputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          InputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChangePawn&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、实现SetupInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetupInputComponent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetupInputComponent();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BindChangePawn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 15.5使用GeometryPlayerController</title>
      <link>https://toughcactus.github.io/post/15.5%E4%BD%BF%E7%94%A8geometryplayercontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.5%E4%BD%BF%E7%94%A8geometryplayercontroller/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GameModeBase中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPlayerController.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员 InitPlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPlayerController() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerControllerClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 15.6比较APawn和APlayerController的输入处理</title>
      <link>https://toughcactus.github.io/post/15.6%E6%AF%94%E8%BE%83apawn%E5%92%8Caplayercontroller%E7%9A%84%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.6%E6%AF%94%E8%BE%83apawn%E5%92%8Caplayercontroller%E7%9A%84%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、APawn中
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;成员函数SetupPlayerInputComponent中完成，其参数为UInputComponent指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、APlayerController中
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;继承自AController的成员函数SetupInputComponent&lt;/li&gt;
&lt;li&gt;继承自AActor的数据成员InputComponent，其类型为UInputComponent指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、说明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;APawn和APlayerController都会处理输入&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二者均继承自AActor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APlayerController的输入处理来自AActor，而APawn对输入处理进行了封装&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; alt=&#34;/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; title=&#34;/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 15.8修复键位滞粘</title>
      <link>https://toughcactus.github.io/post/15.8%E4%BF%AE%E5%A4%8D%E9%94%AE%E4%BD%8D%E6%BB%9E%E7%B2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.8%E4%BF%AE%E5%A4%8D%E9%94%AE%E4%BD%8D%E6%BB%9E%E7%B2%98/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GeometryPawn中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Tick函数的最后调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ClearVelocityVector() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroVector;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在调用VelocityInForce之前，判断Pawn是否被接管
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Called every frame
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Tick(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DeltaTime)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Tick(DeltaTime);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsPawnControlled())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          VelocityInForce(DeltaTime);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ClearVelocityVector();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 17.1使用GeometryHub动态创建Actor对象</title>
      <link>https://toughcactus.github.io/post/17.1%E4%BD%BF%E7%94%A8geometryhub%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.1%E4%BD%BF%E7%94%A8geometryhub%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;创建两个Actor对象，并用两个指针指向&lt;/li&gt;
&lt;li&gt;一个指针只在C++中使用，一个使能虚幻编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForGarbageCollector;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NonePropertyGeometry;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PropertyGeometry;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForGarbageCollector() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;600.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          NonePropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForGarbageCollector, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;600.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          PropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForGarbageCollector, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出指针情况&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PrintPointerStatus() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;property pointer %i, is valid %i&amp;#34;&lt;/span&gt;), PropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;, IsValid(PropertyGeometry));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nonproperty pointer %i, is valid %i&amp;#34;&lt;/span&gt;), NonePropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;, IsValid(NonePropertyGeometry));    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 2.输出日志</title>
      <link>https://toughcactus.github.io/post/2.%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、使用全局日志类别LogTemp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;运行时输出日志&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UseLogTemp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Warning, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Error, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/输出日志/UE_LOG-Output.png&#34; alt=&#34;/pic/输出日志/UE_LOG-Output.png&#34; title=&#34;/pic/输出日志/UE_LOG-Output.png&#34; width=&#34;1100&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、自定义日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogSimpleGeometry, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用自定义日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UseStaticLogCategory()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogSimpleGeometry, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、日志存放路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;TheBasics/Saved/Logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、在输出日志窗口查看日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可通过日志类别和日志级别筛选日志&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; alt=&#34;/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; title=&#34;/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; width=&#34;1000&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 3.在屏幕输出日志</title>
      <link>https://toughcactus.github.io/post/3.%E5%9C%A8%E5%B1%8F%E5%B9%95%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.%E5%9C%A8%E5%B1%8F%E5%B9%95%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/Engine.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在屏幕输出信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;通过指向UEngine对象的全局指针输出信息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GEngine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Orange, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Green, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在屏幕输出日志/DebugOnScreen.png&#34; alt=&#34;/pic/在屏幕输出日志/DebugOnScreen.png&#34; title=&#34;/pic/在屏幕输出日志/DebugOnScreen.png&#34; width=&#34;130&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 4.1添加静态网格组件</title>
      <link>https://toughcactus.github.io/post/4.1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虚幻引擎中的组件可以分为两大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不具备可视化功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视化组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如静态网格组件，粒子系统控制组件等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加静态网格组件可以达到以下效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象具有Gizmo，拥有变换属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仍不可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续可在虚幻编辑器中绑定模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;骨骼 或 体积&lt;/li&gt;
&lt;li&gt;可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续可对Actor对象应用材质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图案 或 纹理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;给Actor派生类添加组件，扩展类的功能，通过Composite模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;添加静态网格组件属于ASimpleGeometry对象构造过程中的一个环节，一应操作在构造函数中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中进行前向声明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UStaticMeshComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在源文件中包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、为类添加数据成员 StaticMesh
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;公有成员&lt;/li&gt;
&lt;li&gt;只在代码中使用，在虚幻编辑器的原型和实例中均可见&lt;/li&gt;
&lt;li&gt;针对静态网格组件，虚幻编辑器会添加Static Mesh属性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; StaticMesh;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建组件 UObject::CreateDefaultSubobject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回指针指向给定类型对象&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#34;StaticMeshInEditor&amp;#34;为虚幻编辑器中的组件对应的属性名，一经设置，不得修改&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshInEditor&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、注册为根组件 AActor::SetRootComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetRootComponent(StaticMesh);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、在虚幻编辑器查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;在关卡中添加对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仍旧没有外形&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有Gizmo表示之余，细节面板可看到变换参数，以及静态网格体(Static Mesh)属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过静态网格体属性绑定模型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;细节面板可看到根组件StaticMesh，及在虚幻编辑器中的属性名StaticMeshInEditor&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/添加静态网格组件/StaticMeshInEditor.png&#34; alt=&#34;/pic/添加静态网格组件/StaticMeshInEditor.png&#34; title=&#34;/pic/添加静态网格组件/StaticMeshInEditor.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 6.设置材质参数</title>
      <link>https://toughcactus.github.io/post/6.%E8%AE%BE%E7%BD%AE%E6%9D%90%E8%B4%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/6.%E8%AE%BE%E7%BD%AE%E6%9D%90%E8%B4%A8%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取指向材质对象的指针 UStaticMeshComponent::CreateAndSetMaterialInstanceDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;已为正方体绑定材质M_Color，获取指向对应材质对象的指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一个材质，索引为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UMaterialInstanceDynamic &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、设置材质对象参数 UMaterialInstanceDynamic::SetVectorParameterValue
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(Material)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 7.让Actor对象运动</title>
      <link>https://toughcactus.github.io/post/7.%E8%AE%A9actor%E5%AF%B9%E8%B1%A1%E8%BF%90%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/7.%E8%AE%A9actor%E5%AF%B9%E8%B1%A1%E8%BF%90%E5%8A%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三种运动类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静止 Static&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Z方向上余弦运动 Sin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Z坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绕Z轴旋转 Rotate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 Yaw&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建枚举类 EMoveType
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UENUM(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMoveType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Static,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Sin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Rotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在蓝图编辑器中可使用该类型&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建结构体 FMoveSetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTRUCT(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FMoveSetting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GENERATED_USTRUCT_BODY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleInstanceOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FTransform InitialTransform;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在蓝图编辑器中可使用该类型&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FMoveSetting MoveSetting;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在实例的细节面板中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在原型的细节面板中&lt;/p&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34;/&gt;     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;结构体成员的访问说明符受到数据成员的访问说明符的限制，数据成员的访问说明符宜大不宜小&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitMoveSetting&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveInForce&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、保存初始状态，用来计算相对变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorTransform&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MoveSetting.InitialTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorTransform();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、获得程序运行时长，用来计算相对变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorld&lt;/li&gt;
&lt;li&gt;UWorld::GetTimeSeconds&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimeSeconds();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、Z方向上余弦运动
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从初始变换提取位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTransForm::GetLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector InitialLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MoveSetting.InitialTransform.GetLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取Actor对象当前位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector CurrentLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据程序运行时长计算相对旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长 Amplitude&lt;/li&gt;
&lt;li&gt;振幅 Frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CurrentLocation.Z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InitialLocation.Z &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MoveSetting.Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Sin(MoveSetting.Frequency &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Time);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置新位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::SetActorLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorLocation(CurrentLocation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、绕Z轴旋转
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从初始变换提取旋转分量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTransForm::Rotator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator InitRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MoveSetting.InitialTransform.Rotator();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取Actor对象当前旋转信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorRotation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator CurrentRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorRotation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据程序运行时长计算相对旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长使用Amplitude&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CurrentRotation.Yaw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (InitRotation.Yaw &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MoveSetting.Amplitude);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置新旋转信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::SetActorRotation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorRotation(CurrentRotation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 8.让材质颜色周期性随机</title>
      <link>https://toughcactus.github.io/post/8.%E8%AE%A9%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E5%91%A8%E6%9C%9F%E6%80%A7%E9%9A%8F%E6%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/8.%E8%AE%A9%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E5%91%A8%E6%9C%9F%E6%80%A7%E9%9A%8F%E6%9C%BA/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用定时器，到时间则修改材质颜色参数&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;TimerManager.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、定时器描述符 FTimerHandle
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;通过描述符初始化或停止定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FTimerHandle RandomColorTimer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; TimerRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitTimerRandomColor&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnTimerRandomColor&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现回调函数，随机材质颜色 OnTimerFired
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回类型void，参数列表为空&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerRandomColor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UMaterialInstanceDynamic&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Material)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, Color);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、初始化定时器
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取定时器管理对象的引用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorldTimerManager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化定时器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTimerManager::SetTimer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetWorldTimerManager().SetTimer(RandomColorTimer, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerRandomColor,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  TimerRate, true);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 9.1创建GeometryObject类</title>
      <link>https://toughcactus.github.io/post/9.1%E5%88%9B%E5%BB%BAgeometryobject%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.1%E5%88%9B%E5%BB%BAgeometryobject%E7%B1%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;TimerManager.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建枚举类 EGeometryMoveType
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;运动类型&lt;/li&gt;
&lt;li&gt;已创建EMoveType，同一工程内不能创建同名枚举类&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、创建结构体 FGeometrySetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;运动类型  MoveType&lt;/li&gt;
&lt;li&gt;初始变换信息 InitialTransform&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机变换颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使能标志 RandomColorFlag&lt;/li&gt;
&lt;li&gt;定时器 RandomColorTimer&lt;/li&gt;
&lt;li&gt;定时器间隔 TimerRate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余弦运动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;振幅 Amplitude&lt;/li&gt;
&lt;li&gt;频率 Frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长，复用余弦运动的振幅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建静态日志类型 LogGeometryObject
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、Actor对象的配置信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化GeometrySetting，在构造函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、静态网格组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 StaticMesh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;静态网格组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitStaticMesh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化静态网格组件，传入StaticMesh的引用，在构造函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、响应设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保存Actor对象初始变换信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitInitialTransform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;传入初始变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;材质颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 SetMaterialParameter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;设置材质对象颜色参数，传入静态网格组件和颜色参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机变换颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 OnimerRandomColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;定时器回调函数，生成随机颜色，调用SetMaterialParameter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitTimerRandomColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化定时器，传入定时器描述符 和 定时器间隔&lt;/li&gt;
&lt;li&gt;若FlagRandomColor为真，在BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 MoveInForce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;传入 运动类型，初始变换信息，振幅，频率&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻C&#43;&#43; &gt; 9.2创建Actor对象</title>
      <link>https://toughcactus.github.io/post/9.2%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.2%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用SpawnActor系列创建Actor对象时需要使用类模板，并设定具体类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建静态日志类型 LogGeometryHub
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorld&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用 UWorld::SpawnActor 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，坐标(0, 0, 0)&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor(GeometryClass1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、使用 UWorld::SpawnActor&amp;lt;T&amp;gt; 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass2, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、使用 UWorld::SpawnActorDeferred&amp;lt;T&amp;gt; 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryPayloads&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器设置元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FGeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Payload : GeometryPayloads)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass3, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置GeometrySetting&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetGeometrySetting(Payload);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收尾工作&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 1.1熟悉虚幻编辑器</title>
      <link>https://toughcactus.github.io/post/1.1%E7%86%9F%E6%82%89%E8%99%9A%E5%B9%BB%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.1%E7%86%9F%E6%82%89%E8%99%9A%E5%B9%BB%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>&lt;p&gt;
虚幻编辑器是统称，而不是一个具体的编辑器。其包含关卡编辑器，蓝图编辑器，材质编辑器等。&lt;/p&gt;
&lt;p&gt;
关卡编辑器是这些编辑器的中心，可以在内容浏览器选中关卡，或蓝图类，或C++类，或材质，或其他资产。&lt;/p&gt;
&lt;p&gt;
当我们打开虚幻编辑器时，打开的是关卡编辑器。&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、关卡编辑器布局
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor.png&#34; width=&#34;1400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、正中间 视口 世界场景
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;显示设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视图设置 设置视口的观察方式&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Settings.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Settings.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Settings.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光照设置 设置光照渲染&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Rendering.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Rendering.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Rendering.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顶视图 + 线框 用来判断对齐与否&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Top+Wireframe.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Top+Wireframe.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-Top+Wireframe.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示FPS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每秒传输帧数 Frame Per Second &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;菜单&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Viewport-ShowFPS.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-ShowFPS.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Viewport-ShowFPS.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gizmo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有Gizmo的Actor对象可平移，缩放，旋转&lt;/li&gt;
&lt;li&gt;选择当前的操作，也可使用快捷键切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、下方 内容浏览器
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;展示各种资产，如关卡，C++类，蓝图类，材质，声音资产，角色模型等&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、下方 输出日志
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、右上 世界大纲
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;世界场景(World)中所有物体列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、右下 世界场景设置(World Settings)
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;配置关卡&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-WorldSettings.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-WorldSettings.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-WorldSettings.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、右下 细节面板
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在世界大纲选中物体，在细节面板对其进行设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、左侧 放置Actor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;列出常用Actor&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
九、工具栏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;运行 或 停止 程序&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在独立窗口运行&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-ToolBar-NewEditorWindow.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ToolBar-NewEditorWindow.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ToolBar-NewEditorWindow.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
十、菜单栏 常用操作
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/UnrealEditor-Menu.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu.png&#34; title=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 或 关闭 窗口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Window项&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Window-Select.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Window-Select.png&#34; title=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Window-Select.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 虚幻编辑器偏好设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit项(Windows系统)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-Preference.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-Preference.png&#34; title=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-Preference.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 项目设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit项&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-ProjectSettings.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-ProjectSettings.png&#34; title=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Menu-Edit-ProjectSettings.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
十一、内容浏览器 常用操作
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建资产&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内容浏览器右键，或者点击 Add&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateAsset.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateAsset.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateAsset.png&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在场景中应用资产&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把资产拖到视口中的物体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调整图标大小及其他设置&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-IconSize.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-IconSize.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-IconSize.png&#34; width=&#34;1400&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-12&#34;&gt;
十二、关卡设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建Map&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建文件夹Content/Map，保存到该目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateMap.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateMap.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-ContentBrowser-CreateMap.png&#34; width=&#34;250&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置关卡编辑器和游戏的默认载入关卡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;项目设置 &amp;gt; Project &amp;gt; Maps &amp;amp; Modes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 Editor Startup Map&lt;/li&gt;
&lt;li&gt;设置 Game Default Map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑器默认载入OpenWorld关卡，在场景中做的所有操作若不保存则会丢失&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Toolbar-SaveMap.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Toolbar-SaveMap.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Toolbar-SaveMap.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-13&#34;&gt;
十三、编辑器偏好设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询 或 自定义 快捷键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外观&lt;/li&gt;
&lt;li&gt;源码编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/UnrealEditor-Preference-General.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Preference-General.png&#34; title=&#34;/pic/熟悉虚幻编辑器/UnrealEditor-Preference-General.png&#34; width=&#34;1200  align left&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器偏好设置 &amp;gt; General &amp;gt; Keyboard Shortcuts &amp;gt; Main Frame&lt;/li&gt;
&lt;li&gt;Ctrl + Shift + N&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
十四、项目设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成项目ID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project &amp;gt; Description&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置默认Map&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;见关卡设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
十五、快捷键
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;移动视口中的摄像机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按住鼠标 左键 或 右键&lt;/li&gt;
&lt;li&gt;ADWS对应左右前后，QE对应上下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换物体变换模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;W，E，R对应位移，旋转，缩放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐藏 或 恢复 非游戏元素的显示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G 进入到游戏模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使选中物体落到最近的平面(Mac不生效)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建C++类(自定义添加快捷键)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + Shift + N&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定位Actor Focus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在世界大纲选中实例&lt;/li&gt;
&lt;li&gt;F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止游戏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Esc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放鼠标控制，游戏仍在运行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S-F1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-16&#34;&gt;
十六、恢复属性的默认值
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/LevelEditor-Detail-ResetAttribute.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Detail-ResetAttribute.png&#34; title=&#34;/pic/熟悉虚幻编辑器/LevelEditor-Detail-ResetAttribute.png&#34; width=&#34;400&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;设置属性值之后，会出现 恢复图标&lt;/li&gt;
&lt;li&gt;点击恢复默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-17&#34;&gt;
十七、在命令行使用虚幻编辑器打开项目
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E:\Epic/熟悉虚幻编辑器 Games\UE_5.1\Engine\Binaries\Win64\UnrealEditor.exe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dirk\Dirk.uproject&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MacOS&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  open &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Volumes/虚幻引擎/Epic/熟悉虚幻编辑器Games/UE_5.1/Engine/Binaries/Mac/UnrealEditor.app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  open &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Volumes/虚幻引擎/Projects/5.1.1/TheBasics/TheBasics.uproject&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-18&#34;&gt;
十八、从Visual Studio启动虚幻编辑器
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建项目之后，我们通常在VS中进行编译运行，从而打开虚幻编辑器&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/VS-Debug.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/VS-Debug.png&#34; title=&#34;/pic/熟悉虚幻编辑器/VS-Debug.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已经打开虚幻编辑器，使VS项目附加到进程&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor1.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor1.png&#34; title=&#34;/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor1.png&#34; width=&#34;1000&#34;/&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor2.png&#34; alt=&#34;/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor2.png&#34; title=&#34;/pic/熟悉虚幻编辑器/VS-AttachUnrealEditor2.png&#34;/&gt;      &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 1.2创建C&#43;&#43;类</title>
      <link>https://toughcactus.github.io/post/1.2%E5%88%9B%E5%BB%BAc&#43;&#43;%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.2%E5%88%9B%E5%BB%BAc&#43;&#43;%E7%B1%BB/</guid>
      <description>&lt;p&gt;
我通常在虚幻编辑器中创建C++类，在代码编辑器中编辑。&lt;/p&gt;
&lt;p&gt;
当然可以徒手创建。&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建C++类 入口
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在内容浏览器中创建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显示C++类&lt;/p&gt;
&lt;p width=&#34;100&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/ContentBrowser-ShowC++Class.png&#34; alt=&#34;/pic/创建C++类/ContentBrowser-ShowC++Class.png&#34; title=&#34;/pic/创建C++类/ContentBrowser-ShowC++Class.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去到C++类目录 右键&lt;/p&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/ContentBrowser-CreateC++Class.png&#34; alt=&#34;/pic/创建C++类/ContentBrowser-CreateC++Class.png&#34; title=&#34;/pic/创建C++类/ContentBrowser-CreateC++Class.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;菜单栏 工具&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/Menu-Tools-CreateC++Class.png&#34; alt=&#34;/pic/创建C++类/Menu-Tools-CreateC++Class.png&#34; title=&#34;/pic/创建C++类/Menu-Tools-CreateC++Class.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;自定义快捷键 C-N&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、配置C++类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择基类 Actor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常见类中可以直接看到Actor，以及描述信息&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/C++Class-Base-Commons.png&#34; alt=&#34;/pic/创建C++类/C++Class-Base-Commons.png&#34; title=&#34;/pic/创建C++类/C++Class-Base-Commons.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有类中可以看到类的派生关系&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/C++Class-Base-All.png&#34; alt=&#34;/pic/创建C++类/C++Class-Base-All.png&#34; title=&#34;/pic/创建C++类/C++Class-Base-All.png&#34; width=&#34;1000&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用默认路径 SimpleGeometry&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的类型 公有类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件和源文件都在Source/TheBasics目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公有类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会在Source/TheBasics创建Public和Private文件夹&lt;/li&gt;
&lt;li&gt;头文件在Public目录下，源文件在Private目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在编辑器中查看SimpleGeometry
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内容浏览器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content/C++ Classes/TheBasics/Public/&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;700&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/创建C++类/ContentBrowser-C++Class.png&#34; alt=&#34;/pic/创建C++类/ContentBrowser-C++Class.png&#34; title=&#34;/pic/创建C++类/ContentBrowser-C++Class.png&#34;/&gt;            	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;双击C++类会跳转到代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、在关卡中添加SimpleGeometry对象 ｜ 正方体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拖动C++类到视口，可在世界大纲查看新增物体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有Gizmo&lt;/li&gt;
&lt;li&gt;在世界大纲中选中实例，按下F键定位(Focus)到 正方体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 10.2基于C&#43;&#43;类的蓝图类2</title>
      <link>https://toughcactus.github.io/post/10.2%E5%9F%BA%E4%BA%8Ec&#43;&#43;%E7%B1%BB%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.2%E5%9F%BA%E4%BA%8Ec&#43;&#43;%E7%B1%BB%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB2/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、打开蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;双击蓝图类时，如果没有修改，默认显示原型细节面板&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/BlueprintEditor-Open.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/BlueprintEditor-Open.png&#34; title=&#34;/pic/基于C++类的蓝图类2/BlueprintEditor-Open.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在蓝图编辑器中查看继承的数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;声明AGeometryObject::GeometrySetting时，在UPROPERTY宏中给出BlueprintReadWrite&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;勾选继承成员可见&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/BlueprintEditor-ShowInheritedVariables.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/BlueprintEditor-ShowInheritedVariables.png&#34; title=&#34;/pic/基于C++类的蓝图类2/BlueprintEditor-ShowInheritedVariables.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将数据成员拖入蓝图中，可以设置或获取该成员，由虚幻引擎提供实现&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Edit.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Edit.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Edit.png&#34; width=&#34;150&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Set.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Set.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Set.png&#34; width=&#34;150&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Get.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Get.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-GeometrySetting-Get.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显示分量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右键，Split Struct Pin&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-Struct-SplitStructPin.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-SplitStructPin.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-SplitStructPin.png&#34; width=&#34;150&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-Struct-ShowAllPin.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-ShowAllPin.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-ShowAllPin.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对GeometrySettingGet操作的结果，Break&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-Struct-Break.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-Break.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-Break.png&#34; width=&#34;500&#34;/&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-Struct-Break-Result.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-Break-Result.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-Break-Result.png&#34;/&gt;         &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收起分量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右键，Recombine Struct Pin&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-Struct-RecombineStructPin.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-RecombineStructPin.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-Struct-RecombineStructPin.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、结构体操作
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting.png&#34;/&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取分量 Break&lt;/p&gt;
&lt;p width=&#34;300&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting-Break.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting-Break.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-FGeometrySetting-Break.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、在蓝图编辑器中使用C++函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting-Result.png&#34; alt=&#34;/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting-Result.png&#34; title=&#34;/pic/基于C++类的蓝图类2/Blueprint-SetGetGeometrySetting-Result.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 12.2在蓝图中订阅委托并实现处理函数</title>
      <link>https://toughcactus.github.io/post/12.2%E5%9C%A8%E8%93%9D%E5%9B%BE%E4%B8%AD%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.2%E5%9C%A8%E8%93%9D%E5%9B%BE%E4%B8%AD%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;C++侧订阅委托并注册处理函数是在对Actor对象调用BeginPlay函数之前完成的&lt;/li&gt;
&lt;li&gt;蓝图侧在BeginPlay函数之后订阅委托并注册处理函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、打开基于AGeometryObject的蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;BP_Geometry_Sphere&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay函数之后，对OnColorChanged赋值，即订阅FOnColorChange服务&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange.png&#34; alt=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange.png&#34; title=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange.png&#34; width=&#34;500&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange-Result.png&#34; alt=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange-Result.png&#34; title=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-Assign-OnColorChange-Result.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、实现处理函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;收到通知时，从OnColorChange_Event出发&lt;/li&gt;
&lt;li&gt;Color和Name作为传入参数&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;整合Color和Name到一个字符串 Append&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动添加节点将FLinearColor转换成String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输出字符串 PrintString&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-DELEGATE-Handle.png&#34; alt=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-DELEGATE-Handle.png&#34; title=&#34;/pic/在蓝图中订阅委托并实现处理函数/BlueprintEditor-DELEGATE-Handle.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输出
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在蓝图中订阅委托并实现处理函数/LevelEditor-Output.png&#34; alt=&#34;/pic/在蓝图中订阅委托并实现处理函数/LevelEditor-Output.png&#34; title=&#34;/pic/在蓝图中订阅委托并实现处理函数/LevelEditor-Output.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 13.2熟悉GameMode</title>
      <link>https://toughcactus.github.io/post/13.2%E7%86%9F%E6%82%89gamemode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/13.2%E7%86%9F%E6%82%89gamemode/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建派生自GameModeBase的蓝图类 BP_GameModeBase
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/UnrealEditor-GameModeBase-Create.png&#34; alt=&#34;/pic/熟悉GameMode/UnrealEditor-GameModeBase-Create.png&#34; title=&#34;/pic/熟悉GameMode/UnrealEditor-GameModeBase-Create.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在World Settings中应用
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/LevelEditor-WorldSettings-GameModeOverride.png&#34; alt=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings-GameModeOverride.png&#34; title=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings-GameModeOverride.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、熟悉关卡的基础类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;游戏中有多个关卡，每个关卡基础类型的配置可以各不相同&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可设置为GameMode的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GameModeBase      &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可设置为Pawn的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APawn&lt;/li&gt;
&lt;li&gt;ACharacter  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可设置为PlayerController的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/LevelEditor-WorldSettings.png&#34; alt=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings.png&#34; title=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、运行游戏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;世界大纲&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/LevelEditor-Outline.png&#34; alt=&#34;/pic/熟悉GameMode/LevelEditor-Outline.png&#34; title=&#34;/pic/熟悉GameMode/LevelEditor-Outline.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行游戏时的世界大纲&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/LevelEditor-Outline-Running.png&#34; alt=&#34;/pic/熟悉GameMode/LevelEditor-Outline-Running.png&#34; title=&#34;/pic/熟悉GameMode/LevelEditor-Outline-Running.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、创建派生自GameModeBase的C++类 GeometryGameModeBase
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择基类 GameModeBase&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/UnrealEditor-C++-GameModeBase-Create.png&#34; alt=&#34;/pic/熟悉GameMode/UnrealEditor-C++-GameModeBase-Create.png&#34; title=&#34;/pic/熟悉GameMode/UnrealEditor-C++-GameModeBase-Create.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;公有类   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用GeometryGameModeBase&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意到，基础类型不可配置，只能在C++中进行配置&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/熟悉GameMode/LevelEditor-WorldSettings-GeometryGameModeBase-Select.png&#34; alt=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings-GeometryGameModeBase-Select.png&#34; title=&#34;/pic/熟悉GameMode/LevelEditor-WorldSettings-GeometryGameModeBase-Select.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.1之前，创建项目时，自动生成GameModeBase源码文件，和Private、Public文件夹同级&lt;/li&gt;
&lt;li&gt;类定义为空，派生自AGameModeBase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此时使用的DefaultPawn具有最小输入，支持前后左右上下移动&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 14.1创建派生自APawn的C&#43;&#43;类并为其绑定键位</title>
      <link>https://toughcactus.github.io/post/14.1%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAapawn%E7%9A%84c&#43;&#43;%E7%B1%BB%E5%B9%B6%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E9%94%AE%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.1%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAapawn%E7%9A%84c&#43;&#43;%E7%B1%BB%E5%B9%B6%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E9%94%AE%E4%BD%8D/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建派生自APawn的C++类 GeometryPawn
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选择基类 Pawn&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自APawn的C++类并为其绑定键位/UnrealEditor-C++-Pawn-Create.png&#34; alt=&#34;/pic/创建派生自APawn的C++类并为其绑定键位/UnrealEditor-C++-Pawn-Create.png&#34; title=&#34;/pic/创建派生自APawn的C++类并为其绑定键位/UnrealEditor-C++-Pawn-Create.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;公有类&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、为GeometryPawn绑定键位
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MoveRight&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键位 Right 和 Left，缩放系数为1和-1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MoveForward&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键位 Up 和 Down，缩放系数为1和-1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自APawn的C++类并为其绑定键位/GeometryPawn-Axis.png&#34; alt=&#34;/pic/创建派生自APawn的C++类并为其绑定键位/GeometryPawn-Axis.png&#34; title=&#34;/pic/创建派生自APawn的C++类并为其绑定键位/GeometryPawn-Axis.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 15.2创建基于GeometryPawn的蓝图类</title>
      <link>https://toughcactus.github.io/post/15.2%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8Egeometrypawn%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.2%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8Egeometrypawn%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建基于GeometryPawn的蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;BP_GeometryPawn_Sphere&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击打开蓝图编辑器，摄像机就是CameraComponent的表示&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/BP_GeometryPawn_Sphere.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/BP_GeometryPawn_Sphere.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/BP_GeometryPawn_Sphere.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、为StaticMesh绑定模型Sphere，并应用材质
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/StaticMesh-Settings.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/StaticMesh-Settings.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/StaticMesh-Settings.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、分离StaticMesh组件和Camera组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实际运行起来，相当于第三视角，可以看到StaticMesh的运动&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/Component-Seperate.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/Component-Seperate.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/Component-Seperate.png&#34; width=&#34;1000&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、可以为Camera组件添加附件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;按理说是无法看到添加的附件的&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选中CameraComponent&lt;/p&gt;
&lt;p width=&#34;300&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-SelectComponent.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-SelectComponent.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-SelectComponent.png&#34;/&gt;     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add，选择Cube作为附件&lt;/p&gt;
&lt;p width=&#34;300&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Add-Cube.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Add-Cube.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Add-Cube.png&#34;/&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可为Cube应用材质&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Cube-Material.png&#34; alt=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Cube-Material.png&#34; title=&#34;/pic/创建基于GeometryPawn的蓝图类/BlueprintEditor-Cube-Material.png&#34; width=&#34;1000&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 15.3创建派生自APlayerController的C&#43;&#43;类并为其绑定键位</title>
      <link>https://toughcactus.github.io/post/15.3%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAaplayercontroller%E7%9A%84c&#43;&#43;%E7%B1%BB%E5%B9%B6%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E9%94%AE%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.3%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAaplayercontroller%E7%9A%84c&#43;&#43;%E7%B1%BB%E5%B9%B6%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E9%94%AE%E4%BD%8D/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建派生自APlayerController的C++类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;公有类&lt;/li&gt;
&lt;li&gt;AGeometryPlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加动作映射，按空格时切换当前Pawn
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Project Settings &amp;gt; Engine &amp;gt; Input&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数描述 ChangePawn    &lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自APlayerController的C++类并为其绑定键位/ProjectSettings-Bindings-SpaceBar.png&#34; alt=&#34;/pic/创建派生自APlayerController的C++类并为其绑定键位/ProjectSettings-Bindings-SpaceBar.png&#34; title=&#34;/pic/创建派生自APlayerController的C++类并为其绑定键位/ProjectSettings-Bindings-SpaceBar.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 15.7查看切换Pawn日志</title>
      <link>https://toughcactus.github.io/post/15.7%E6%9F%A5%E7%9C%8B%E5%88%87%E6%8D%A2pawn%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.7%E6%9F%A5%E7%9C%8B%E5%88%87%E6%8D%A2pawn%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在虚幻编辑器中查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/查看切换Pawn日志/UnrealEditor-WorldSettings.png&#34; alt=&#34;/pic/查看切换Pawn日志/UnrealEditor-WorldSettings.png&#34; title=&#34;/pic/查看切换Pawn日志/UnrealEditor-WorldSettings.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在虚幻编辑器中添加BP_GeometryPawn_Sphere实例，用以切换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PlayerController接管GeometryPawn&lt;/li&gt;
&lt;li&gt;AIController接管BP_GeometryPawn_Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一次切换 PlayerController预备接管BP_GeometryPawn_Cube&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PlayerController释放GeometryPawn&lt;/li&gt;
&lt;li&gt;AIController释放BP_GeometryPawn_Cube&lt;/li&gt;
&lt;li&gt;PlayerController接管BP_GeometryPawn_Cube&lt;/li&gt;
&lt;li&gt;GeometryPawn处于等待接管状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二次切换 PlayerController预备接管GeometryPawn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PlayerController释放BP_GeometryPawn_Cube&lt;/li&gt;
&lt;li&gt;PlayerController接管GeometryPawn&lt;/li&gt;
&lt;li&gt;BP_GeometryPawn_Cube处于等待接管状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三次切换 PlayerController预备接管BP_GeometryPawn_Cube&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PlayerController释放GeometryPawn&lt;/li&gt;
&lt;li&gt;PlayerController接管BP_GeometryPawn_Cube&lt;/li&gt;
&lt;li&gt;GeometryPawn处于等待接管状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束游戏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PlayerController释放BP_GeometryPawn_Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/查看切换Pawn日志/切换Pawn日志.png&#34; alt=&#34;/pic/查看切换Pawn日志/切换Pawn日志.png&#34; title=&#34;/pic/查看切换Pawn日志/切换Pawn日志.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、对BP_GeometryPawn_Sphere实例禁用AI自动控制
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认 Placed in World&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI.png&#34; alt=&#34;/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI.png&#34; title=&#34;/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用 Disabled&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI-Disable.png&#34; alt=&#34;/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI-Disable.png&#34; title=&#34;/pic/查看切换Pawn日志/LevelEditor-Details-AutoPossessAI-Disable.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/查看切换Pawn日志/切换Pawn日志-禁用AutoPossessAI.png&#34; alt=&#34;/pic/查看切换Pawn日志/切换Pawn日志-禁用AutoPossessAI.png&#34; title=&#34;/pic/查看切换Pawn日志/切换Pawn日志-禁用AutoPossessAI.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、按住方向键切换Pawn，切换后，前Pawn仍在移动
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类UnPossessd函数中，会调用DestroyPlayerInputComponent函数，删除输入组件&lt;/li&gt;
&lt;li&gt;即在删除输入组件之前，不会更新速度方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决思路1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Tick函数的最后，复位速度矢量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决思路2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有当Pawn对象被使用时，调用VelocityInForce&lt;/li&gt;
&lt;li&gt;切换后，前Pawn不会移动，但切换回前Pawn，会保持移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 17.2垃圾回收器</title>
      <link>https://toughcactus.github.io/post/17.2%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.2%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Garbage Collector&lt;/li&gt;
&lt;li&gt;负责定期清理内存&lt;/li&gt;
&lt;li&gt;当Actor对象或组件被销毁时，虚幻编辑器中指向对象或组件的指针会被置空&lt;/li&gt;
&lt;li&gt;TheBasics项目的最后一个内容点&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、设置Garbage Collector间隔
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Project Settings &amp;gt; Engine &amp;gt; Garbage Collection &amp;gt; Time Between Purging Pending Kill Objects&lt;/li&gt;
&lt;li&gt;当前61.1s&lt;/li&gt;
&lt;li&gt;开销不小，不建议频繁触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、编辑Level Blueprint
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不建议在关卡的蓝图编辑器添加实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对关卡蓝图的了解不够&lt;/li&gt;
&lt;li&gt;难以追踪逻辑的执行  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开关卡的蓝图编辑器&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/打开关卡蓝图编辑器.png&#34; alt=&#34;/pic/垃圾回收器/打开关卡蓝图编辑器.png&#34; title=&#34;/pic/垃圾回收器/打开关卡蓝图编辑器.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
按下Enter时从场景中删除所有指定类型的Actor对象
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加事件 键盘 Enter&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/KeyboardEvents-Enter.png&#34; alt=&#34;/pic/垃圾回收器/KeyboardEvents-Enter.png&#34; title=&#34;/pic/垃圾回收器/KeyboardEvents-Enter.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/KeyboardEvents-Enter-Result.png&#34; alt=&#34;/pic/垃圾回收器/KeyboardEvents-Enter-Result.png&#34; title=&#34;/pic/垃圾回收器/KeyboardEvents-Enter-Result.png&#34; width=&#34;100&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从Pressed出发 获取场景中指定类型的所有Actor对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置ActorClass GeometryObject&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-GetAllActorsOfClass.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-GetAllActorsOfClass.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-GetAllActorsOfClass.png&#34; width=&#34;450&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从OutActors出发 遍历数组&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-ForEachLoop-LookUp.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-ForEachLoop-LookUp.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-ForEachLoop-LookUp.png&#34; width=&#34;400&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接下来执行ForEachLoop&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-ForEachLoop.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-ForEachLoop.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-ForEachLoop.png&#34; width=&#34;450&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从ArrayElement出发 对每个元素调用DestroyActor&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-DestroyActor-LookUp.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-DestroyActor-LookUp.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-DestroyActor-LookUp.png&#34; width=&#34;400&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接下来执行DestroyActor&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-DestroyActor.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-DestroyActor.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-DestroyActor.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
按下Tab时立即回收内存
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加事件 键盘 Tab&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/KeyboardEvents-Tab.png&#34; alt=&#34;/pic/垃圾回收器/KeyboardEvents-Tab.png&#34; title=&#34;/pic/垃圾回收器/KeyboardEvents-Tab.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/KeyboardEvents-Tab-Result.png&#34; alt=&#34;/pic/垃圾回收器/KeyboardEvents-Tab-Result.png&#34; title=&#34;/pic/垃圾回收器/KeyboardEvents-Tab-Result.png&#34; width=&#34;100&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从Pressed出发 立即回收内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用CollectGarbage&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-CollectGarbage.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-CollectGarbage.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-CollectGarbage.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/Blueprint-CollectGarbage-Result.png&#34; alt=&#34;/pic/垃圾回收器/Blueprint-CollectGarbage-Result.png&#34; title=&#34;/pic/垃圾回收器/Blueprint-CollectGarbage-Result.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
效果图，保存并编译
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/LevelBlueprint-Result.png&#34; alt=&#34;/pic/垃圾回收器/LevelBlueprint-Result.png&#34; title=&#34;/pic/垃圾回收器/LevelBlueprint-Result.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、查看日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;运行程序&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/日志-均有效1.png&#34; alt=&#34;/pic/垃圾回收器/日志-均有效1.png&#34; title=&#34;/pic/垃圾回收器/日志-均有效1.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/日志-均有效2.png&#34; alt=&#34;/pic/垃圾回收器/日志-均有效2.png&#34; title=&#34;/pic/垃圾回收器/日志-均有效2.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按下Enter Actor从场景中消失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor对象的PendingToKill被置1，等待垃圾回收器回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/日志-按下Enter1.png&#34; alt=&#34;/pic/垃圾回收器/日志-按下Enter1.png&#34; title=&#34;/pic/垃圾回收器/日志-按下Enter1.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/日志-按下Enter2.png&#34; alt=&#34;/pic/垃圾回收器/日志-按下Enter2.png&#34; title=&#34;/pic/垃圾回收器/日志-按下Enter2.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按下Tab 立即回收内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使能虚幻编辑器的指针被指空&lt;/li&gt;
&lt;li&gt;仅在C++中使用的指针变做空悬指针，指向无效内存&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/垃圾回收器/日志-按下Tab.png&#34; alt=&#34;/pic/垃圾回收器/日志-按下Tab.png&#34; title=&#34;/pic/垃圾回收器/日志-按下Tab.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 4.2为静态网格组件绑定模型</title>
      <link>https://toughcactus.github.io/post/4.2%E4%B8%BA%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.2%E4%B8%BA%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用新手包里的模型或引擎提供的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加新手包
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;内容浏览器，Add 按钮&lt;/li&gt;
&lt;li&gt;添加功能或内容包&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容，初学者内容包&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/为静态网格组件绑定模型/AddStarterContent.png&#34; alt=&#34;/pic/为静态网格组件绑定模型/AddStarterContent.png&#34; title=&#34;/pic/为静态网格组件绑定模型/AddStarterContent.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、使用虚幻引擎自带内容
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;显示引擎内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在世界大纲选中对象&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;细节 静态网格体 下拉框&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings.png&#34; alt=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings.png&#34; title=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings.png&#34; width=&#34;350&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;管理 按钮&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示引擎内容&lt;/p&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings-ShowEngineContent.png&#34; alt=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings-ShowEngineContent.png&#34; title=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Settings-ShowEngineContent.png&#34;/&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索Cube&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择 EngineMeshes/Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;700&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/为静态网格组件绑定模型/Details-StaticMesh-Cube.png&#34; alt=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Cube.png&#34; title=&#34;/pic/为静态网格组件绑定模型/Details-StaticMesh-Cube.png&#34;/&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;效果图&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/为静态网格组件绑定模型/Viewport-Cube.png&#34; alt=&#34;/pic/为静态网格组件绑定模型/Viewport-Cube.png&#34; title=&#34;/pic/为静态网格组件绑定模型/Viewport-Cube.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他网格体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;立方体 Engine/EngineMeshes/Cube&lt;/li&gt;
&lt;li&gt;球形 Engine/EngineMeshes/Sphere&lt;/li&gt;
&lt;li&gt;圆锥 Engine/BasicShapes/Cone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 5.1材质类和材质实例类</title>
      <link>https://toughcactus.github.io/post/5.1%E6%9D%90%E8%B4%A8%E7%B1%BB%E5%92%8C%E6%9D%90%E8%B4%A8%E5%AE%9E%E4%BE%8B%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/5.1%E6%9D%90%E8%B4%A8%E7%B1%BB%E5%92%8C%E6%9D%90%E8%B4%A8%E5%AE%9E%E4%BE%8B%E7%B1%BB/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;应用材质，使Actor对象具有图案和纹理&lt;/li&gt;
&lt;li&gt;使用基础颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;材质类以M_打头&lt;/li&gt;
&lt;li&gt;修改材质参数后，需要手动保存&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;材质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎中的一种资产，负责视觉部分，如静态网格物体 static mesh，骨骼网格物体 skeletal mesh，粒子系统particle system，以及其他物体的外观&lt;/li&gt;
&lt;li&gt;更确切地说，材质是一种着色器，即一个微型子例程，可以GPU上运行并计算场景中像素点的颜色和位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;材质实例类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;材质实例类派生自材质类&lt;/li&gt;
&lt;li&gt;派生自同一材质类的材质实例类，可以分别对材质类的参数进行设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在内容浏览器创建材质类 M_Color
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;创建文件夹 Content/Material&lt;/li&gt;
&lt;li&gt;右键，（创建基础资产）材质&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在虚幻编辑器中打开材质类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;双击材质类，打开材质编辑器&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/MaterialEditor-M_Color.png&#34; alt=&#34;/pic/材质类和材质实例类/MaterialEditor-M_Color.png&#34; title=&#34;/pic/材质类和材质实例类/MaterialEditor-M_Color.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
材质编辑器
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;专门处理材质参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
三、为材质设置颜色 BaseColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用Constant4Vector作为输入&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/MaterialEditor-Material-BaseColor.png&#34; alt=&#34;/pic/材质类和材质实例类/MaterialEditor-Material-BaseColor.png&#34; title=&#34;/pic/材质类和材质实例类/MaterialEditor-Material-BaseColor.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转换为参数，命名为Color&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/Material-BaseColor.png&#34; alt=&#34;/pic/材质类和材质实例类/Material-BaseColor.png&#34; title=&#34;/pic/材质类和材质实例类/Material-BaseColor.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
四、为材质设置金属度 Metallic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用Constant作为输入&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/MaterialEditor-Material-Metallic.png&#34; alt=&#34;/pic/材质类和材质实例类/MaterialEditor-Material-Metallic.png&#34; title=&#34;/pic/材质类和材质实例类/MaterialEditor-Material-Metallic.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;为0，不具备金属度  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为1，效果图&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/Material-Metallic-1.png&#34; alt=&#34;/pic/材质类和材质实例类/Material-Metallic-1.png&#34; title=&#34;/pic/材质类和材质实例类/Material-Metallic-1.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
五、创建材质实例类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内容浏览器 选中材质类，右键，创建材质实例&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/LevelEditor-ContentBrowser-CreateMaterialInstance.png&#34; alt=&#34;/pic/材质类和材质实例类/LevelEditor-ContentBrowser-CreateMaterialInstance.png&#34; title=&#34;/pic/材质类和材质实例类/LevelEditor-ContentBrowser-CreateMaterialInstance.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击材质实例类，在材质编辑器中打开，M_Color_Inst&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果Color没有转换为参数，材质实例类不能修改Color值&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/MaterialEditor-M_Color_Inst.png&#34; alt=&#34;/pic/材质类和材质实例类/MaterialEditor-M_Color_Inst.png&#34; title=&#34;/pic/材质类和材质实例类/MaterialEditor-M_Color_Inst.png&#34; width=&#34;1400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
创建多个材质实例类，Color值不同
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/LevelEditor-ContentBrowser-MaterialInstanceList.png&#34; alt=&#34;/pic/材质类和材质实例类/LevelEditor-ContentBrowser-MaterialInstanceList.png&#34; title=&#34;/pic/材质类和材质实例类/LevelEditor-ContentBrowser-MaterialInstanceList.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
六、应用材质
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;将材质拖放到视口中的对象上&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用按钮&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内容浏览器中选中材质&lt;/li&gt;
&lt;li&gt;在世界大纲中选中对象&lt;/li&gt;
&lt;li&gt;在细节面板中应用该材质&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial1.png&#34; alt=&#34;/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial1.png&#34; title=&#34;/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial1.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下拉框&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在世界大纲中选中对象&lt;/li&gt;
&lt;li&gt;在细节面板中设置材质&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial2.png&#34; alt=&#34;/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial2.png&#34; title=&#34;/pic/材质类和材质实例类/UnrealEditor-ApplyMaterial2.png&#34; width=&#34;600&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 初级课程 &gt; 虚幻编辑器 &gt; 5.2基于C&#43;&#43;类的蓝图类</title>
      <link>https://toughcactus.github.io/post/5.2%E5%9F%BA%E4%BA%8Ec&#43;&#43;%E7%B1%BB%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/5.2%E5%9F%BA%E4%BA%8Ec&#43;&#43;%E7%B1%BB%E7%9A%84%E8%93%9D%E5%9B%BE%E7%B1%BB/</guid>
      <description>&lt;p&gt;
可以在虚幻编辑器中创建蓝图类，使其派生自C++类。&lt;/p&gt;
&lt;p&gt;
可以在虚幻编辑器中编辑蓝图类，设置数据成员初始值及其他。&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;创建文件夹，Content/BlueprintClasses&lt;/li&gt;
&lt;li&gt;内容浏览器 右键，Create Blueprint class based on SimpleGeometry&lt;/li&gt;
&lt;li&gt;名字以BP_开头&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在虚幻编辑器中打开蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;双击蓝图类，打开蓝图编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类/BP_SimpleGeometry.png&#34; alt=&#34;/pic/基于C++类的蓝图类/BP_SimpleGeometry.png&#34; title=&#34;/pic/基于C++类的蓝图类/BP_SimpleGeometry.png&#34; width=&#34;1400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、创建多个蓝图类，使StaticMesh绑定不同模型，并应用不同材质实例类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/基于C++类的蓝图类/LevelEditor-ContentBrowser-BPList.png&#34; alt=&#34;/pic/基于C++类的蓝图类/LevelEditor-ContentBrowser-BPList.png&#34; title=&#34;/pic/基于C++类的蓝图类/LevelEditor-ContentBrowser-BPList.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 1.3代码规范</title>
      <link>https://toughcactus.github.io/post/1.3%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.3%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;文件.clang-format&lt;/li&gt;
&lt;li&gt;文件.gitignore&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、代码规范
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;按个人习惯来，非建议&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/epic-cplusplus-coding-standard-for-unreal-engine/&#34;&gt;参考&lt;/a&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;大括号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;放在新行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎建议使用制表符，也可以使用空格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、.clang-format文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;很多项目都包含该文件，描述了管理代码文件的统一格式&lt;/li&gt;
&lt;li&gt;我们可以通过该文件设置格式化代码的规则&lt;/li&gt;
&lt;li&gt;YAML标记文件&lt;/li&gt;
&lt;li&gt;在ShootTraining中添加.clang-format文件&lt;/li&gt;
&lt;li&gt;每行遵循格式 key: value&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormatStyleOptions.html&#34;&gt;参考&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 设置应用该格式的语言
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;如果项目中只一种开发语言，或者所有开发语言使用相同规范，可忽略该配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Cpp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. Style
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个制表符对应2个空格，大括号不在新行&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;BasedOnStyle&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Google&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个制表符对应4个空格，大括号在新行&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;BasedOnStyle&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Microsoft&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
3. 缩进宽度
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;IndentWidth&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
4. 缩进使用制表符或空格
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缩进使用空格&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;UseTab&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩进使用制表符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源文件中既有空格又有制表符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;UseTab&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Always&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
5. 制表符宽度
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每6个空格替换一个制表符，当缩进使用制表符时，效果很糟糕&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;TabWidth&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
6. 设置大括号位置
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不在新行&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;BreakBeforeBraces&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Attach&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在新行&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;BreakBeforeBraces&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Allman&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
7. 其他设置
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ColumnLimit&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;140&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;AccessModifierOffset&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-4&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;SortIncludes&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;AllowShortBlocksOnASingleLine&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;AlignAfterOpenBracket&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DontAlign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;AllowShortFunctionsOnASingleLine&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;PointerAlignment&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Left&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
三、.gitignore文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;告诉Git，repository排除哪些文件和文件夹&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/gitignore/blob/main/UnrealEngine.gitignore&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
四、虚幻引擎蓝图命名格式
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Allar/ue5-style-guide&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/代码规范/蓝图命名格式.png&#34; alt=&#34;/pic/代码规范/蓝图命名格式.png&#34; title=&#34;/pic/代码规范/蓝图命名格式.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.1在本地运行ShooterGame示例项目</title>
      <link>https://toughcactus.github.io/post/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cshootergame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cshootergame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、下载ShooterGame
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Epic Games Launcher &amp;gt; Samples &amp;gt; Shooter Game&lt;/li&gt;
&lt;li&gt;支持引擎版本4.0 - 4.27，当前使用引擎版本5.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、需要修改的问题
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;UMatineeCameraShake已被ULegacyCameraShake替代&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PLATFORM_PS4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个不合适的改法是在引擎代码中，紧接着SWITCH定义该宏&lt;/li&gt;
&lt;li&gt;另一个麻烦但更合理的改法是，屏蔽该宏的出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source/ShooterGame/Private/Player/ShhoterCharacter.cpp:322&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件运算符的第二个和第三个操作数如果类型不一致，存在转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/cpp/cpp/conditional-operator-q?view=msvc-170&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AController*和AActor*可以相互转换，此处有歧义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、运行效果
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; alt=&#34;/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; title=&#34;/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.4.2设置STGameModeBase</title>
      <link>https://toughcactus.github.io/post/1.4.2%E8%AE%BE%E7%BD%AEstgamemodebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4.2%E8%AE%BE%E7%BD%AEstgamemodebase/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件包含
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看源文件，指明上级文件夹Player&lt;/p&gt;
&lt;p width=&#34;600&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置STGameModeBase/头文件路径.png&#34; alt=&#34;/pic/设置STGameModeBase/头文件路径.png&#34; title=&#34;/pic/设置STGameModeBase/头文件路径.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置头文件搜索路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ShootTraining.Build.cs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PublicIncludePaths.AddRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Player&amp;#34;&lt;/span&gt; });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在STGameModeBase中使用STBaseCharacter和STPlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在源文件包含头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;STBaseCharacter.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;STPlayerController.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在默认构造函数中调用  &lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCharacterAndPlayerController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DefaultPawnClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerControllerClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ASTPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASTGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ASTGameModeBase()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitCharacterAndPlayerController();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、为STBaseCharacter添加Camera组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;头文件中添加前向声明&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UCameraComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源文件中添加头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Components&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UCameraComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Camera;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCameraComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UCameraComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CameraComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻编辑器 &gt; 1.2初始化ShootTraining项目</title>
      <link>https://toughcactus.github.io/post/1.2%E5%88%9D%E5%A7%8B%E5%8C%96shoottraining%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.2%E5%88%9D%E5%A7%8B%E5%8C%96shoottraining%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将ShooterGame作为内容包，基于其开发ShootTraining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如有室内设计师提供游戏资料，我们基于此开发游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建ShootTraining项目
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Blank&lt;/li&gt;
&lt;li&gt;Blueprint&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、配置ShootTraining
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加Copyright&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目设置 &amp;gt; Project &amp;gt; Description &amp;gt; Legal &amp;gt; Copyright Notice&lt;/li&gt;
&lt;li&gt;Shoot Training Game, All Rights Reserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关卡设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加关卡文件夹 Content/Levels&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建关卡&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/创建关卡.png&#34; alt=&#34;/pic/初始化ShootTraining项目/创建关卡.png&#34; title=&#34;/pic/初始化ShootTraining项目/创建关卡.png&#34; width=&#34;200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择Basic&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/创建关卡-Basic.png&#34; alt=&#34;/pic/初始化ShootTraining项目/创建关卡-Basic.png&#34; title=&#34;/pic/初始化ShootTraining项目/创建关卡-Basic.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;命名为DefaultMap，保存到Content/Levels&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置DefaultMap作为EditorStartupMap和GameDefaultMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目设置 &amp;gt; Project &amp;gt; Maps &amp;amp; Modes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不使用预编译头文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ShootTraining.Build.cs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PCHUsage = PCHUsageMode.NoPCHs;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加外部资产文件夹 Content/ExternalContent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、从ShooterGame获取的资产
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开ShooterGame项目，在内容浏览器选中Content/Animations/TTP_Animations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右键 &amp;gt; Migrate&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/ContentBrowser-Migrate.png&#34; alt=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Migrate.png&#34; title=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Migrate.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消Sounds勾选&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/Migrate-取消Sounds勾选.png&#34; alt=&#34;/pic/初始化ShootTraining项目/Migrate-取消Sounds勾选.png&#34; title=&#34;/pic/初始化ShootTraining项目/Migrate-取消Sounds勾选.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过虚幻编辑器，将Content目录下的Animations，Characters，Environment移动到ExternalContent目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能直接迁移到ExternalContent，虚幻引擎会检查目录，这些资产的上级目录要求是Content，即使根目录是Content也无法通过检查&lt;/li&gt;
&lt;li&gt;不能直接将三个文件夹移动到ExternalContent中，会导致资产之间的相互引用路径出错&lt;/li&gt;
&lt;li&gt;Animations，Characters，Environment三个文件夹里的内容都是和TTP_Animations相关的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开ShootTraining项目，为ExternalContent设置文件夹颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选中Content/ExternalContent，右键&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor.png&#34; alt=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor.png&#34; title=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor-Result.png&#34; alt=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor-Result.png&#34; title=&#34;/pic/初始化ShootTraining项目/ContentBrowser-Folder-SetColor-Result.png&#34; width=&#34;200&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/Content结构.png&#34; alt=&#34;/pic/初始化ShootTraining项目/Content结构.png&#34; title=&#34;/pic/初始化ShootTraining项目/Content结构.png&#34;/&gt;       &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、基于蓝图创建C++项目
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;添加C++类即可&lt;/li&gt;
&lt;li&gt;创建蓝图项目的时间开销明显小于创建C++项目的时间开销&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加C++类 STGameModeBase&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不设置类类型&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/STGameModeBase.png&#34; alt=&#34;/pic/初始化ShootTraining项目/STGameModeBase.png&#34; title=&#34;/pic/初始化ShootTraining项目/STGameModeBase.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content同级目录出现C++ Classes文件夹&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/ContentBrowser-C++Classes.png&#34; alt=&#34;/pic/初始化ShootTraining项目/ContentBrowser-C++Classes.png&#34; title=&#34;/pic/初始化ShootTraining项目/ContentBrowser-C++Classes.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置关卡的GameModeBase为STGameModeBase&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/WorldSettings-STGameModeBase.png&#34; alt=&#34;/pic/初始化ShootTraining项目/WorldSettings-STGameModeBase.png&#34; title=&#34;/pic/初始化ShootTraining项目/WorldSettings-STGameModeBase.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、脚本
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;build.sh&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BuildScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac/Build.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Editor&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $BuildScript $Target Mac Development &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$Project&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -waitmutex -NoHotReload&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open_editor.sh&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UnrealEditor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Binaries/Mac/UnrealEditor.app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  open $Project&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generate_project_files.sh&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GenerateProjectFilesScript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac/GenerateProjectFiles.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.uproject&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $GenerateProjectFilesScript -projectfiles -project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$Project -game -rocket -progress -VSCode 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# $GenerateProjectFilesScript -projectfiles -project=$Project -game -rocket -progress -XCodeProjectFiles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EngineCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EpicGames/UE_5.1/.vscode/compileCommands_Default.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCDst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/compile_commands.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProjectCCSrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Projects/5.1.1/&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/.vscode/compileCommands_&amp;#34;&lt;/span&gt;$ProjectName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp $EngineCCSrc $EngineCCDst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cp $ProjectCCSrc $ProjectCCDst&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、查看项目源码
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以在源码文件看见注释的版权信息&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/初始化ShootTraining项目/版权注释.png&#34; alt=&#34;/pic/初始化ShootTraining项目/版权注释.png&#34; title=&#34;/pic/初始化ShootTraining项目/版权注释.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻编辑器 &gt; 1.4.1创建派生自ACharacter的C&#43;&#43;类</title>
      <link>https://toughcactus.github.io/post/1.4.1%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAacharacter%E7%9A%84c&#43;&#43;%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4.1%E5%88%9B%E5%BB%BA%E6%B4%BE%E7%94%9F%E8%87%AAacharacter%E7%9A%84c&#43;&#43;%E7%B1%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建派生自ACharacter的C++类 STBaseCharacter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在子目录Player下创建，命名为STBaseCharacter&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter.png&#34; alt=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter.png&#34; title=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公有类&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter-Public.png&#34; alt=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter-Public.png&#34; title=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STBaseCharacter-Public.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建派生自APlayerController的C++类 STPlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在子目录Player下创建，命名为STPlayerController&lt;/li&gt;
&lt;li&gt;公有类&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/创建派生自ACharacter的C++类/C++Classes-Player-STPlayerController.png&#34; alt=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STPlayerController.png&#34; title=&#34;/pic/创建派生自ACharacter的C++类/C++Classes-Player-STPlayerController.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻编辑器 &gt; 1.4.3设置BP_STBaseCharacter</title>
      <link>https://toughcactus.github.io/post/1.4.3%E8%AE%BE%E7%BD%AEbp_stbasecharacter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4.3%E8%AE%BE%E7%BD%AEbp_stbasecharacter/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在虚幻编辑器中查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/WorldSettings-STGameModeBase.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/WorldSettings-STGameModeBase.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/WorldSettings-STGameModeBase.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;创建文件夹 Content/Player&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BP_STGameModeBase&lt;/p&gt;
&lt;p width=&#34;600&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/ContentBrowser-Content.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/ContentBrowser-Content.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/ContentBrowser-Content.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content/Player目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BP_STBaseCharacter&lt;/li&gt;
&lt;li&gt;BP_STPlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/ContentBrowser-Content-Player.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/ContentBrowser-Content-Player.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/ContentBrowser-Content-Player.png&#34;/&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、设置关卡使用蓝图类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/WorldSettings-BP_.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/WorldSettings-BP_.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/WorldSettings-BP_.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、打开BP_STBaseCharacter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
组件信息
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;300&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Component.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Component.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Component.png&#34;/&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Capsule组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;角色的前进方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Camera组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++中添加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mesh组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;skeletal mesh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Character Movement&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
为Mesh组件绑定HeroTPP
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Mesh绑定HeroTPP&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP-Lookup.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP-Lookup.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP-Lookup.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;材质自动应用HeroTPP&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh-HeroTPP.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动到合适位置，旋转模型与前进方向一致&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/BP_STBaseCharacter-Mesh.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
第三视角
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分离Camera组件和Mesh组件&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/分离Camera和Mesh.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/分离Camera和Mesh.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/分离Camera和Mesh.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行效果图&lt;/p&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置BP_STBaseCharacter/效果图.png&#34; alt=&#34;/pic/设置BP_STBaseCharacter/效果图.png&#34; title=&#34;/pic/设置BP_STBaseCharacter/效果图.png&#34;/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
