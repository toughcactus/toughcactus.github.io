<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on </title>
    <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/</link>
    <description>Recent content in Hugo on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jun 2023 10:15:21 +0000</lastBuildDate><atom:link href="https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建个人博客</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 08 Jun 2023 10:57:46 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Overview # 环境 说明 Github Page 部署服务器 Hugo 构建静态网页 安装依赖 # Hugo 1. 使用go安装 # Windows系统 安装go 官网下载 环境变量 # go export PATH=/usr/local/go/bin:$PATH export GOROOT=/usr/local/go export GOPATH=/Users/USERNAME/go export GOBIN=/Users/USERNAME/go/bin # go安装的软件 export PATH=$GOBIN:$PATH 生效 vi ~/.zshrc source ~/.zshrc 安装hugo 如若遇上网络不佳 go env -w GOPROXY=https://goproxy.cn,direct go env -w GOSUMDB=off 安装，验证 go install github.com/gohugoio/hugo@latest hugo env -v 如果需要使用hugo扩展功能，替换hugo文件 2. 使用homebrew安装 # MacOS brew install hugo 使用hugo构建静态网页 # 初始化项目 hugo new site /site/path 通用项目结构 文件 说明 config.</description>
    </item>
    
    <item>
      <title>使用ox-hugo的头部设置</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E4%BD%BF%E7%94%A8ox-hugo%E7%9A%84%E5%A4%B4%E9%83%A8%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 08 Jun 2023 11:42:14 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E4%BD%BF%E7%94%A8ox-hugo%E7%9A%84%E5%A4%B4%E9%83%A8%E8%AE%BE%E7%BD%AE/</guid>
      <description>Overview # ox-hugo manual 根目录 # 如果使能 org-hugo-external-file-extensions-allowed-for-copying，要求根目录下必须有static文件夹，默认创建ox-hugo文件夹，并将图片拷贝到ox-hugo 分区对应 根目录/content/分区，默认创建content文件夹 #+HUGO_BASE_DIR: ../ 生成博文方式 # manual 子树 每个org子树作为一篇博文 ​* 每棵子树作为一篇博文 :PROPERTIES: :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :bookFlatSection true :weight 2 :END: ** 第一篇博文 ** 第二篇博文 org文件作为博文 #+HUGO_CUSTOM_FRONT_MATTER: :bookCollapseSection true :weight 20 #+HUGO_CUSTOM_FRONT_MATTER: :bookFlatSection true :weight 2 配置自定义选项 # 如果同时在子树和文件配置，根据子树导出时，只有子树定义项 子树 :PROPERTIES: :EXPROT_HUGO_CUSTOM_FRONT_MATTER: :foo bar :baz zoo :END: 文件 #+HUGO_CUSTOM_FRONT_MATTER: :foo bar :baz zoo 分区 + 样式 + 权重 # 子树 :PROPERTIES: :EXPORT_HUGO_SECTION: ./ :EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml :EXPORT_HUGO_WEIGHT: 4 :END: 文件 #+HUGO_SECTION: .</description>
    </item>
    
    <item>
      <title>Doks主题</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/doks%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Wed, 07 Jun 2023 11:19:42 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/doks%E4%B8%BB%E9%A2%98/</guid>
      <description>Overview # demo github 依赖 说明 Git 并不知道为什么会依赖Git Node.js 前端插件 环境 Github Node.js Doks Hugo 安装依赖 # Git git --version Node.js 官网下载 18.16.0 LTS node --version npm --version npm config list # 查看配置 # 设置代理 npm config set proxy http://localhost:15236 npm config set https-proxy http://localhost:15236 # 如果代理不支持https npm config set registry &amp;quot;http://registry.npmjs.org&amp;quot; 初始化项目 # 下载到本地 和之前的hugo theme不同，不放到theme/，而是直接作为项目 官网提供两个项目，Child theme适合新手 git clone https://github.com/h-enk/doks.git doks 安装node modules npm install 本地部署服务器 不建议，会删除./public文件夹 npm run start 访问 http://localhost:1313/ 项目结构 # 基础结构 基础结构 说明 package.</description>
    </item>
    
    <item>
      <title>文章目录跟随文章内容滚动</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E8%B7%9F%E9%9A%8F%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8/</link>
      <pubDate>Sat, 10 Jun 2023 10:46:13 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/hugo/%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E8%B7%9F%E9%9A%8F%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8/</guid>
      <description>如果在目录项高亮时设置文章目录滚动跟随，文章目录跳转功能失效 文章目录跳转时，会高亮中间的每一个目录项。在高亮下一个目录项时，文章目录立即滚动跟随，此时会终止跳转。 滚动触发 找到了文章目录对应的元素 document.querySelector(&#39;.docs-toc&#39;) ，没有找到页面对应的元素 1. 两种滚动注册 # 监听 所有滚动都会触发。配合定时器，如果在定时器到时间之前没有跳转到目的目录项，文章目录滚动偏移重置 window.addEventListener(&#39;scroll&#39;, () =&amp;gt; { // 处理 }); 绑定事件处理函数 对window绑定处理函数，只在滚动页面时触发 ✔️ 参考./assets/js/to-top.js window.onscroll = function() { // 处理 }; 2. 处理函数调用时间点 # 如果文章目录滚动即触发，因为持续滚动，文章目录跳转功能完全失效。得在滚动结束后，再调用处理函数。 使用定时器。滚动即重启定时器，定时器到时间再调用处理函数。 let timer = null; window.onscroll = function () { clearTimeout(timer); timer = setTimeout(function () { // 处理 }, 300); // 设置定时器间隔；要求不小于最长跳转时间 }; 3. 设置文章目录滚动 # 每个目录项占用的高度 single ，和文章目录除去&amp;quot;On This Page&amp;quot;文本之后的高度有关 document.querySelector(&#39;.my-toc&#39;).scrollHeight 。 考虑到文章目录上方&amp;quot;On This Page&amp;quot;文本，窗口可供显示目录的高度应减去&amp;quot;On This Page&amp;quot;文本的高度。 根据窗口高度 window.</description>
    </item>
    
  </channel>
</rss>
