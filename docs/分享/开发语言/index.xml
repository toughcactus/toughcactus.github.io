<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发语言 on </title>
    <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 开发语言 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jun 2023 11:00:28 +0000</lastBuildDate><atom:link href="https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell脚本</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/bash/</link>
      <pubDate>Sat, 10 Jun 2023 23:33:26 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/bash/</guid>
      <description>花括号的使用 # 资料 可以使用花括号定义集合集合，集合内有多个可以枚举的项，使用逗号分隔 {项1, 项2, 项3...} 遇到花括号时，会对集合进行展开，可以将集合内的每一项与外面的字符串进行组合，然后返回全部组合项 xxx.conf{,.bak} 展开为 xxx.conf xxx.conf.bak 和前方的命令配合起来，就可以起到多个入参的效果 cp xxx.conf{,.bak} # cp xxx.conf xxx.conf.bak 接受多个参数的命令都可以这么玩，但前提是这些参数有共同部分，或者有某些规律 echo cp mkdir mv for mkdir app{,.bak} echo {1..5} echo {a..z} echo {001..10} # 前导0 echo {001..10..2} # 前导0 + 步进 echo {a..z}{0..9} # 组合：26 * 10 tr命令 # runoob 去除引号 # tr -d &#39;&amp;quot;&#39; 使用sed sed &#39;s/\&amp;quot;//g&#39; sed命令 # MacOS安装gsed runoob 1. 匹配行打印 # p gsed -n &amp;quot;/abc/p&amp;quot; file 2.</description>
    </item>
    
    <item>
      <title>Elisp</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/elisp/</link>
      <pubDate>Sat, 10 Jun 2023 23:34:41 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/elisp/</guid>
      <description>执行shell命令 # (shell-command &amp;quot;ps&amp;quot;) 当前文件路径+文件名 # (buffer-file-name) </description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/markdown/</link>
      <pubDate>Sat, 10 Jun 2023 23:35:59 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/markdown/</guid>
      <description>代码框 # ```elisp ``` 插入图片 # ![img](/pic/在本地运行ShooterGame示例项目/运行效果.png) 插入连接 # [参考](https://learn.microsoft.com/zh-cn/cpp/cpp/conditional-operator-q?view=msvc-170) 下划线 # &amp;lt;u&amp;gt;ddd&amp;lt;/u&amp;gt; 换行 # &amp;lt;br&amp;gt; 分隔线 # --- 注释 # &amp;lt;!--哈哈我是注释，不会在浏览器中显示。--&amp;gt; </description>
    </item>
    
    <item>
      <title>JavaScrpit</title>
      <link>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/javascrpit/</link>
      <pubDate>Sat, 10 Jun 2023 11:07:26 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/javascrpit/</guid>
      <description>foreach # 中断foreach循环不能使用break 获取窗口和显示器屏幕参数 # 参考 窗口 # 浏览器窗口可以改变大小 验证情况 内部高度 window.innerHeight o 内部宽度 window.innerWidth 外部高度 window.outerheight 外部宽度 window.outerwidth 显示器屏幕 # 验证情况 显示器屏幕高度，除windows任务栏以外 screen.availHeight 显示器屏幕宽度，除windows任务栏以外 screen.availWidth 显示器屏幕高度 screen.height 显示器屏幕宽度 screen.width 传参 # runoob 不需要给出参数类型 function myFunction(x, y = 10) { // y is 10 if not passed or undefined return x + y; } myFunction(0, 2) // 输出 2 myFunction(5); // 输出 15, y 参数的默认值 处理滚动 # 参考 注册 # 添加监听事件 滚动 window 所有滚动都会触发 window.</description>
    </item>
    
  </channel>
</rss>
