<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ToughCactus</title>
    <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/</link>
    <description>Recent content on ToughCactus</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC++/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UEngine类型</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/UEngine%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/UEngine%E7%B1%BB%E5%9E%8B/</guid>
      <description> 一、头文件 # #include &amp;#34;Engine/Engine.h&amp;#34; 二、指向UEngine对象的指针 GEngine # 全局变量 使用前需检查 三、在屏幕输出信息 UEngine::AddOnScreenDebugMessage # 参数 名称 说明 消息标识 Key Key相同的消息只显示第一个；使用-1则一定会显示 文本显示时长 TimeToDisplay 文本颜色 DisplayColor 可以使用FColor预定义颜色，也可以使用自定义的FColor对象 文本内容 DebugMessage 在世界场景中的位置 bNewerOnTop 默认在顶部输出信息，为false则在屏幕底部输出 设置文字大小 TextScale 使用 if (GEngine) { GEngine-&amp;gt;AddOnScreenDebugMessage(-1, 3.0f, FColor::Orange, TEXT(&amp;#34;Hello&amp;#34;)); GEngine-&amp;gt;AddOnScreenDebugMessage(-1, 5.0f, FColor::Green, TEXT(&amp;#34;World!&amp;#34;)); } </description>
    </item>
    
    <item>
      <title>UWorld类型</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/UWorld%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B/UWorld%E7%B1%BB%E5%9E%8B/</guid>
      <description>Overview # 关卡编辑器中，视口所展示的即世界场景，简称场景。 Engine/Source/Runtime/Engine/Classes/Engine/World.h 可以使用AActor::GetWorld获取UWorld对象，使用前需判断指针对象是否成功获取 一、头文件 # #include &amp;#34;Engine/World.h&amp;#34; 二、获取程序运行时长 UWorld::GetTimeSeconds # 使用 if (GetWorld()) { float Time = GetWorld()-&amp;gt;GetTimeSeconds(); } 三、动态生成Actor对象 # 分两步 调用基类或派生类的构造函数 调用对象的函数成员BeginPlay 1. 生成Actor对象 UWorld::SpawnActor # 返回AActor指针，如需使用派生类对象，需转换 对象类型 InClass 初始位置 Location 使用默认值，原点 初始旋转 Rotation 使用默认值，不发生旋转 TSubclassOf&amp;lt;ASimpleGeometry&amp;gt; GeometryClass; GetWorld()-&amp;gt;SpawnActor(GeometryClass); 2. 生成Actor对象 UWorld::SpawnActor&amp;lt;T&amp;gt; # 返回指向生成对象的指针 对象类型 Class 变换信息 Transform 其他参数 SpawnParameters 使用默认值 TSubclassOf&amp;lt;ASimpleGeometry&amp;gt; GeometryClass; const FTransform FTransform = FTransform(FRotator::ZeroRotator, FVector(0.0f, 300.0f, 300.0f)); ASimpleGeometry *Geometry = GetWorld()-&amp;gt;SpawnActor&amp;lt;ASimpleGeometry&amp;gt;(GeometryClass, FTransform); 3.</description>
    </item>
    
  </channel>
</rss>
