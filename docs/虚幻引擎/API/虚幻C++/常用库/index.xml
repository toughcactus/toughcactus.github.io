<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ToughCactus</title>
    <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/</link>
    <description>Recent content on ToughCactus</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC++/%E5%B8%B8%E7%94%A8%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DrawDebugHelpers库</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/DrawDebugHelpers%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/DrawDebugHelpers%E5%BA%93/</guid>
      <description> Overview # 绘制图形基元(Graphic Primitives)库 头文件 UE5/Engine/Source/Runtime/Engine/Public/DrawDebugHelpers.h 源文件 UE5/Engine/Source/Runtime/Engine/Private/DrawDebugHelpers.cpp 一、头文件 # #include &amp;#34;DrawDebugHelpers.h&amp;#34; 二、绘制球体 DrawDebugSphere # 指向UWorld对象的指针 InWorld 球体中心坐标 Center 球体半径 Radius 细分参数(tessellation parameter) Segments 随着Segments的增大，球体棱角越少，绘制开销愈大 颜色 Color FColor类型 使用 DrawDebugSphere(GetWorld(), GetActorLocation(), Radius, 24, FColor::Red); </description>
    </item>
    
    <item>
      <title>FMath库</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/FMath%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/FMath%E5%BA%93/</guid>
      <description>Overview # 定义了多种数学函数，包括sine, cosine, 和其他三角函数(Trigonometric Functions) API 通过命名空间FMath使用 头文件 UE5/Engine/Source/Runtime/Core/Public/Math/UnrealMathUtility.h 头文件 UE5/Engine/Source/Runtime/Core/Public/GenericPlatform/GenericPlatformMath.h 一、三角函数 # 1. 计算正弦值 FGenericPlatformMath::Sin # 静态成员 2. 弧度转角度 FMath::RadiansToDegrees # 3. 计算反余弦 FGenericPlatformMath::Acos # 二、获得随机布尔值 FMath::RandBool # 静态成员 三、取符号 FGenericPlatformMath::Sign # 四、获取二者中较小值 FGenericPlatformMath::Min # 五、范围 # 1. 获得满足范围的数值 FMath::Clamp # 模版函数 自动推测类型 要求三个参数类型一致 若 Min &amp;lt;= X &amp;lt;= Max，返回X； 若 X &amp;lt; Min，返回Min； 若 Max &amp;lt; X，返回Max 2. 区域线性映射 FMath::GetMappedRangeValueClamped&amp;lt;T&amp;gt; # 若给定值Value小于InputRange.X，返回OutputRange.X； 若给定值Value大于InputRange.Y，返回OutputRange.Y； 若给定值Value在范围内[InputRange.X, InputRange.Y]，返回线性映射值： 斜率 K = (OutputRange.</description>
    </item>
    
    <item>
      <title>UGameplayStatics类型</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/UGameplayStatics%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/API/%E8%99%9A%E5%B9%BBC&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%BA%93/UGameplayStatics%E7%B1%BB%E5%9E%8B/</guid>
      <description> Overview # 虚幻引擎提供的辅助类；提供多种静态函数，均可在蓝图中使用 源文件 UE5/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp 头文件 UE5/Engine/Source/Runtime/Engine/Classes/Kismet/GameplayStatics.h 一、头文件 # #include &amp;#34;Kismet/GameplayStatics.h&amp;#34; 二、获得场景中的指定类型的所有Actor对象 UGameplayStatics::GetAllActorsOfClass # 和类模板TSubclassOf搭配使用 保存到传入的数组引用参数中 指向游戏中任意Object WorldContextObject 可以使用GetWorld传入世界对象，或者使用指向PlayerController的指针(this) UGameplayStatics::GetAllActorsOfClass(GetWorld(), AGeometryPawn::StaticClass(), Pawns); 三、计算伤害 # 半径伤害 UGameplayStatics::ApplyRadialDamageWithFalloff # 静态成员 调用OverlapMultiByObjectType搜索和球体重叠的Actor，对这些Actor调用TakeDamage 三、计算伤害 包裹函数 # 半径伤害 UGameplayStatics::ApplyRadialDamage # 静态成员 包裹函数，封装UGameplayStatics::ApplyRadialDamageWithFalloff 参数 名称 说明 可以传入指向UWorld对象的指针 WorldContextObject 伤害的数量特征(quantitative characteristic) BaseDamage 半径伤害的中心位置 Origin 伤害半径 DamageRadius 伤害类型 DamageTypeClass UDamageType及其派生类，类型变量；处理函数根据伤害类型做出相应处理 不受伤害的Actor数组 IgnoreActors 伤害来源 DamageCauser 可以是武器 伤害来源的上级Controller InstigatedByController 当伤害来源是Pawn或Character时，传入上级Controller，用以判断阵营 计算半径伤害用标志 bDoFullDamage 为true时，处于伤害半径球体内的Actor，受到相同伤害值，计算半径伤害模型简单；为false时，离球体中心越近，伤害值越大，需要一定开销 减免伤害用枚举变量 DamagePreventionChannel 碰撞系数；当Character和伤害中心有隔挡时，如何计算伤害；在某些情形，允许Character不受伤害 使用 UGameplayStatics::ApplyRadialDamage(GetWorld(), Damage, GetActorLocation(), Radius, nullptr, {}, this, nullptr, DoFullDamage); 点伤害 UGameplayStatics::ApplyPointDamage # 存在碰撞，需要知道指向目标Actor的指针 其他类型 UGameplayStatics::ApplyDamage # 需要知道指向目标Actor的指针 </description>
    </item>
    
  </channel>
</rss>
