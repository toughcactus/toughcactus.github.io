<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ToughCactus</title>
    <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/</link>
    <description>Recent content on ToughCactus</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>运行ShooterGame示例项目</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8CShooterGame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8CShooterGame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</guid>
      <description> 下载ShooterGame # Epic Games Launcher &amp;gt; Samples &amp;gt; Shooter Game 支持引擎版本 4.0 - 4.27 ，当前使用引擎版本 5.1.1 需要修改的地方 # UMatineeCameraShake 已被 ULegacyCameraShake 替代 PLATFORM_PS4 一个不合适的改法是在引擎代码中，紧接着 SWITCH 定义该宏 另一个麻烦但更合理的改法是，屏蔽该宏的出现 Source/ShooterGame/Private/Player/ShhoterCharacter.cpp:322 参考 条件运算符的第二个和第三个操作数如果类型不一致，存在转换 AController * 和 AActor * 可以相互转换，此处有歧义2 运行效果 # </description>
    </item>
    
    <item>
      <title>初始化ShootTraining项目</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.2%E5%88%9D%E5%A7%8B%E5%8C%96ShootTraining%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.2%E5%88%9D%E5%A7%8B%E5%8C%96ShootTraining%E9%A1%B9%E7%9B%AE/</guid>
      <description>虚幻编辑器 Overview # 将ShooterGame作为内容包，基于此开发ShootTraining 如有室内设计师提供游戏资料，我们基于此开发游戏 一、创建ShootTraining项目 # Blank Blueprint 二、配置ShootTraining # 添加Copyright 项目设置 &amp;gt; Project &amp;gt; Description &amp;gt; Legal &amp;gt; Copyright Notice Shoot Training Game, All Rights Reserved. 关卡设置 添加关卡文件夹 Content/Levels 创建关卡 Content/Levels/DefaultMap Basic 设置EditorStartupMap和GameDefaultMap为DefaultMap 项目设置 &amp;gt; Project &amp;gt; Maps &amp;amp; Modes 不使用预编译头文件 ShootTraining.Build.cs // PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; PCHUsage = PCHUsageMode.NoPCHs; 添加外部资产文件夹 Content/ExternalContent 三、从ShooterGame导入资产 # 打开ShooterGame项目，在内容浏览器选中 Content/Animations/TTP_Animations 右键 &amp;gt; Migrate 取消Sounds勾选 通过虚幻编辑器，将 Content 目录下的 Animations Characters Environment 移动到 ExternalContent 目录下 不能直接迁移到 ExternalContent ，虚幻引擎会检查目录，要求这些资产的上级目录是 Content ，即使根目录是 Content 也无法通过检查 不能直接将三个文件夹移动到 ExternalContent 中，会导致资产之间的相互引用路径出错 Animations Characters Environment 三个文件夹里的内容都与 TTP_Animations 相关 打开ShootTraining项目，为 ExternalContent 设置文件夹颜色 选中Content/ExternalContent &amp;gt; 右键 效果图 外部资产结构 四、基于蓝图创建C++项目 # 添加C++类即可 创建蓝图项目的时间开销明显小于创建C++项目的时间开销 1.</description>
    </item>
    
    <item>
      <title>代码规范</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.3%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.3%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>Overview # .clang-format .gitignore 按个人习惯来，非建议 参考 大括号 放在新行 缩进 虚幻引擎建议使用制表符，也可以使用空格 一、定义格式化代码规则 # .clang-format YAML标记文件 参考 作为项目的一部分，描述管理代码文件的统一格式 每行遵循格式 key: value 1. 设置受约束的开发语言 # 如果项目中只一种开发语言，或者所有开发语言使用相同规范，可忽略该配置 Language: Cpp 2. 通用样式 # Google 一个制表符对应2个空格，大括号不在新行 BasedOnStyle: Google Microsoft 一个制表符对应4个空格，大括号在新行 BasedOnStyle: Microsoft 3. 缩进宽度 # IndentWidth: &amp;#39;4&amp;#39; 4. 缩进样式 # 空格 UseTab: Never 制表符 源文件中既有空格又有制表符 UseTab: Always 5. 制表符宽度 # 每6个空格替换一个制表符，若缩进使用制表符，效果很糟糕 TabWidth: &amp;#39;6&amp;#39; 6. 设置大括号位置 # 行尾 BreakBeforeBraces: Attach 新行 BreakBeforeBraces: Allman 7. 其他设置 # ColumnLimit: &amp;#39;140&amp;#39; AccessModifierOffset: &amp;#39;-4&amp;#39; SortIncludes: false AllowShortBlocksOnASingleLine: false AlignAfterOpenBracket: DontAlign AllowShortFunctionsOnASingleLine: Inline PointerAlignment: Left 二、Git仓库同步 # .</description>
    </item>
    
    <item>
      <title>为Character绑定模型</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.4%E4%B8%BACharacter%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.4%E4%B8%BACharacter%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/</guid>
      <description>Part 1 创建 Character 和 PlayController # 虚幻编辑器 一、创建 Player/STBaseCharacter # ACharacter 公有类 二、创建 Player/STPlayerController # APlayerController 公有类 Part 2 使用 Character 和 PlayController # C++ 一、查看头文件包含路径 # 源文件路径中有指明上级文件夹 Player 设置头文件搜索路径，之后可以不指明上级文件夹 ShootTraining.Build.cs PublicIncludePaths.AddRange(new string[] { &amp;#34;ShootTraining/Public/Player&amp;#34; }); 二、使用 STBaseCharacter 和 STPlayerController # STGameModeBase 包含头文件 源文件 #include &amp;#34;STBaseCharacter.h&amp;#34; #include &amp;#34;STPlayerController.h&amp;#34; 设置使用类 函数成员 private 在默认构造函数中调用 void ASTGameModeBase::InitCharacterAndPlayerController() { DefaultPawnClass = ASTBaseCharacter::StaticClass(); PlayerControllerClass = ASTPlayerController::StaticClass(); } 实现默认构造函数 public ASTGameModeBase::ASTGameModeBase() { InitCharacterAndPlayerController(); } 三、添加 Camera 组件 # STBaseCharacter 前向声明 头文件 class UCameraComponent; 包含头文件 源文件 #include &amp;#34;Camera/CameraComponent.</description>
    </item>
    
    <item>
      <title>实现Character前后左右移动</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.5%E5%AE%9E%E7%8E%B0Character%E5%89%8D%E5%90%8E%E5%B7%A6%E5%8F%B3%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.5%E5%AE%9E%E7%8E%B0Character%E5%89%8D%E5%90%8E%E5%B7%A6%E5%8F%B3%E7%A7%BB%E5%8A%A8/</guid>
      <description> Part 1 绑定键位 # 虚幻编辑器 项目设置 &amp;gt; Engine &amp;gt; Input 1. 轴映射 # 连续 如 前后左右移动 2. 动作映射 # 离散 如 跳跃，装弹，更换武器 Part 2 实现前后左右移动逻辑 # C++ STBaseCharacter 1. 添加头文件 # 源文件 #include &amp;#34;Components/InputComponent.h&amp;#34; 2. 实现回调函数 # 函数成员 private void ASTBaseCharacter::MoveForward(float Amount) { AddMovementInput(GetActorForwardVector(), Amount); } void ASTBaseCharacter::MoveRight(float Amount) { AddMovementInput(GetActorRightVector(), Amount); } 3. 绑定函数描述和回调函数 # 函数成员 private 在SetupPlayerInputComponent中调用 void ASTBaseCharacter::BindMoveHandler(UInputComponent* PlayerInputComponent) { PlayerInputComponent-&amp;gt;BindAxis(&amp;#34;MoveForward&amp;#34;, this, &amp;amp;ASTBaseCharacter::MoveForward); PlayerInputComponent-&amp;gt;BindAxis(&amp;#34;MoveRight&amp;#34;, this, &amp;amp;ASTBaseCharacter::MoveRight); } </description>
    </item>
    
    <item>
      <title>实现Character视角旋转</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.6%E5%AE%9E%E7%8E%B0Character%E8%A7%86%E8%A7%92%E6%97%8B%E8%BD%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.6%E5%AE%9E%E7%8E%B0Character%E8%A7%86%E8%A7%92%E6%97%8B%E8%BD%AC/</guid>
      <description>Part 1 绑定键位 # 虚幻编辑器 项目设置 &amp;gt; Engine &amp;gt; Input 轴映射 1. 抬头，低头 # 鼠标垂直方向的移动决定抬头角度，绕Y轴旋转 函数描述 LookUp 键位 MouseY 2. 环顾四周 # 鼠标水平方向的移动决定身体旋转角度，绕Z轴旋转 函数描述 TurnAround 键位 MouseX Part 2 实现视角旋转逻辑1 # C++ 一、搭建框架 # 添加空函数并绑定函数描述和回调函数，之后再实现函数逻辑 函数成员 函数体为空 private void LookUp(float Amount); void TurnAround(float Amount); 绑定函数描述和回调函数 函数成员 private 在SetupPlayerInputComponent中调用 void ASTBaseCharacter::InitCameraRotate(UInputComponent* PlayerInputComponent) { PlayerInputComponent-&amp;gt;BindAxis(&amp;#34;LookUp&amp;#34;, this, &amp;amp;ASTBaseCharacter::LookUp); PlayerInputComponent-&amp;gt;BindAxis(&amp;#34;TurnAround&amp;#34;, this, &amp;amp;ASTBaseCharacter::TurnAround); } 二、添加静态日志类型 # DEFINE_LOG_CATEGORY_STATIC(LogBaseCharacter, All, All) 三、实现回调函数 # void ASTBaseCharacter::LookUp(float Amount) { AddControllerPitchInput(Amount); UE_LOG(LogBaseCharacter, Log, TEXT(&amp;#34;LookUp Amount: %f&amp;#34;), Amount); } void ASTBaseCharacter::TurnAround(float Amount) { AddControllerYawInput(Amount); } Part 3 配置 Camera 组件在垂直方向上移动 # 虚幻编辑器 水平移动鼠标时，Character和摄像机一齐左右旋转 垂直移动鼠标时，Character无旋转 一、使 Camera 组件 跟随 Pawn 旋转 # BP_STBaseCharacter 选中Camera组件 &amp;gt; 细节面板 &amp;gt; CameraOptions &amp;gt; 使能UsePawnControlRotation 保存并编译 此时向下移动鼠标时，摄像机向上旋转，向上移动鼠标时，摄像机向下旋转 查看日志，鼠标向上移动时，Amount的确是正数 二、调试 InputPitchScale # BP_PlayerController 参考 引擎版本 5.</description>
    </item>
    
    <item>
      <title>为Character添加跑步动画</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.7%E6%B7%BB%E5%8A%A0%E5%90%91%E5%89%8D%E8%B7%91%E6%AD%A5%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.7%E6%B7%BB%E5%8A%A0%E5%90%91%E5%89%8D%E8%B7%91%E6%AD%A5%E5%8A%A8%E7%94%BB/</guid>
      <description>虚幻编辑器 Overview # 动画随着Character运动速度变化 brush 是最简单的可编辑几何体，我们可以修改其顶点位置，调整其他参数，然后将其转换成静态网格体 CharacterMovement 组件负责 Character 运动，其各种属性均和 Character 运动有关 一、重新设置平台 # 从场景中移除Floor 添加 Geometry/Box 恢复默认位置，设置 brush 长宽高 二、Character运动速度上限 # BP_STBaseCharacter CharacterMovement组件 选择CharacterMovement组件 &amp;gt; 细节面板 &amp;gt; Character Movement: Walking &amp;gt; MaxWalkSpeed Character 的最大运动速度 单位 cm/s 虚幻引擎里的步长使用 cm 修改 MaxWalkSpeed ，当速度改为 1600 时，可以看到单位时间内移动的距离增加，而跑步动画没有加速过程 三、打印实时速度 # BP_STBaseCharacter EventGraph 获得Character速度 GetVelocity函数 获得Actor各个方向上的速度，保存在FVector中 获得速度标量 FVector::VectorLength 在屏幕上输出实时速度 PrintString 使用 AddOnScreenDebugMessage 移除打印 四、创建动画蓝图 # Animation Blueprint 动画蓝图和 Skeleton Mesh 有关 创建文件夹 Content/Players/Animations 动画蓝图命名 ABP_打头 方法一 基于 Skeleton Mesh 创建动画蓝图 # 选中ExternalContent/Characters/HeroTPP/HeroTPP &amp;gt; 右键 &amp;gt; Create &amp;gt; AnimBlueprint 方法二 在指定位置创建动画蓝图 # 去到 Content/Player/Animations &amp;gt; 右键 &amp;gt; Animation &amp;gt; 选择Animation Blueprint 选择 HeroTPP_Skeleton ，命名为 ABP_BaseCharacter 五、在蓝图编辑器中查看动画蓝图 # ABP_BaseCharacter 1.</description>
    </item>
    
    <item>
      <title>实现Character跳跃</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.8%E5%AE%9E%E7%8E%B0Character%E8%B7%B3%E8%B7%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.8%E5%AE%9E%E7%8E%B0Character%E8%B7%B3%E8%B7%83/</guid>
      <description> Part 1 绑定键位 # 虚幻编辑器 项目设置 &amp;gt; Engine &amp;gt; Input 动作映射 函数描述 Jump 键位 SpaceBar Part 2 实现跳跃逻辑 # C++ 使用虚幻引擎提供的跳跃回调函数 绑定函数描述和回调函数 # 函数成员 private 在SetupPlayerInputComponent中调用 void ASTBaseCharacter::InitJump(UInputComponent* PlayerInputComponent) { PlayerInputComponent-&amp;gt;BindAction(&amp;#34;Jump&amp;#34;, IE_Pressed, this, &amp;amp;ASTBaseCharacter::Jump); } Part 3 添加跳跃动画 # 虚幻编辑器 ABP_BaseCharacter 跳跃动画 JumpStart JumpLoop JumpEnd 跳跃动画切换条件 变量 IsFalling 使用 ACharacter::IsFalling 来设置 true则Character在空中，false则说明Character在地面上 上一小节中，变量 Velocity 横跨 ABP_BaseCharacter 的 EventGraph 和 AnimGraph ，这里，布尔类型变量 IsFalling 也一样 在 EventGraph 设置变量值，在 AnimGraph 中使用变量 使用状态机 在一个动画蓝图中管理多个动画，并定义动画之间的转换条件 一、设置布尔型变量 IsFalling # EventGraph ACharacter::IsFalling 需要 Pawn 到 Character 的转换 不能同时从 EventBlueprintUpdateAnimation 出发 SetVelocity 之后，执行转换 输入是 Character 的 MovementComponent ，从 AsCharacter 到 Target ，自动添加提取数据成员 IsFalling 函数的返回类型是布尔，作为 SetIsFalling 的输入 完整 EventGraph 二、实现 状态机 # AnimGraph 添加 状态机 ，命名为 Locomotion ，作为 OutputPose 的输入 StateMechine 双击 Locomotion ，进入 状态机 仅一个入口 Entry 为 Entry 添加 State ，命名为 Walk 双击 Walk 为 Walk 设置输入动画 BS_Locomotion 即之前 AnimGraph 中， OutputPose 的输入 到此， Character 的运动动画和上一小节一致 直接从 AssetBrowser 把 Jump 的三个动画拖入 Locomotion 动画自动被封装为 State ，和之前 AddState ，再将动画作为输入达到的效果一样 添加状态转换路径 添加转换条件 双击转换图标 Walk &amp;gt; JumpStart IsFalling 为 true JumpStart &amp;gt; JumpLoop JumpStart 将近结束 JumpStart 只播放一次 JumpLoop &amp;gt; JumpEnd IsFalling 为 false JumpLoop 循环播放 JumpEnd &amp;gt; Walk JumpEnd 将近结束 JumpEnd 只播放一次 三、设置 State 输入动画 # 拿 JumpStart 状态举例 选中JumpStart动画 &amp;gt; Details &amp;gt; Settings &amp;gt; LoopAnimation 默认循环播放动画 设置 JumpStart JumpEnd JumpLoop 的 LoopAnimation Jump 动画 设计时， JumpStart 和 JumpEnd 只播放一次， JumpLoop 可循环 如此设置可以修复Character跳跃时的卡顿 四、添加楼梯，查看 Jump 三阶段是否正常显示 # 添加楼梯 PlaceActors &amp;gt; Geometry &amp;gt; LinearStair 设置阶数 选中LinearStairBrush &amp;gt; Details &amp;gt; BrushSettings &amp;gt; NumSteps Character 从楼梯跳到平面时，一直保持 JumpLoop 五、跑步时跳跃，落地平滑 # 可以减少 JumpEnd &amp;gt; Walk 的 TimeRemaining 来缩短平滑 六、跳跃高度 # BP_STBaseCharacter JumpZVelocity 和 JumpStart 的时长有关 JumpLoop 动画更适合从临界点落下 </description>
    </item>
    
    <item>
      <title>实现Character跑步</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.9%E5%AE%9E%E7%8E%B0Character%E8%B7%91%E6%AD%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.9%E5%AE%9E%E7%8E%B0Character%E8%B7%91%E6%AD%A5/</guid>
      <description>Part 1 绑定键位 # 虚幻编辑器 项目设置 &amp;gt; Engine &amp;gt; Input 动作映射 函数描述 Run 键位 LeftShift 虽然是跑步键位，但是限制方向为向前 要求同时按下 W 或 Up 要求速度不为0 前方有障碍物时，不应该由走路转换成跑步动画 动作映射的回调函数参数列表为空 判断是否为前进方向时，还可根据速度矢量和朝向的夹角 Part 2 实现跑步逻辑 # C++ 一、判断跑步键位是否按下，方向是否为前进 # 数据成员 private bool IsForward = false; bool AbleRun = false; 二、实现键位按下逻辑，绑定函数描述和回调函数 # 函数成员 private 在SetupPlayerInputComponent中调用InitRun void ASTBaseCharacter::RunEnable() { AbleRun = true; } void ASTBaseCharacter::RunDisable() { AbleRun = false; } void ASTBaseCharacter::InitRun(UInputComponent* PlayerInputComponent) { PlayerInputComponent-&amp;gt;BindAction(&amp;#34;Run&amp;#34;, IE_Pressed, this, &amp;amp;ASTBaseCharacter::RunEnable); PlayerInputComponent-&amp;gt;BindAction(&amp;#34;Run&amp;#34;, IE_Released, this, &amp;amp;ASTBaseCharacter::RunDisable);	} 三、判断方向是否为前进 # 函数成员 private 在MoveForward中调用 void ASTBaseCharacter::SetIsForward(float Amount) { IsForward = Amount &amp;gt; 0.</description>
    </item>
    
    <item>
      <title>添加转向动画</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.a%E6%B7%BB%E5%8A%A0%E8%BD%AC%E5%90%91%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.a%E6%B7%BB%E5%8A%A0%E8%BD%AC%E5%90%91%E5%8A%A8%E7%94%BB/</guid>
      <description>Overview # 当前实现了3种动作，走路，跑步和跳跃 走路这块，从静止到跑起来支持加速，使用 BS_Locomotion 本小节会重新实现走路动画，根据速度方向，加载转向和后退动画 之后还有 装弹 Reloading 、死亡 Death 、瞄准 Aiming 动画 Blend Space 2D混合空间 # 两个轴 Vertial Axis Horizontal Axis Part 1 建模 # 一、 ForwardVector 和 RightVector # Actor 有 ForwardVector 和 RightVector ， Character 前后左右移动有使用到这两个方向向量 若我们水平移动鼠标， ForwardVector 和 RightVector 随之发生改变 在视觉上， ForwardVector 一直向前， RightVector 一直向右，二者在水平面垂直 二、数学基础 # 1. 点乘 # 计算向量夹角 其中一个向量为 0向量 时，点乘结果为 0 ，而反余弦计算得到其夹角为 PI/2 2. 叉乘 # 用来将向量夹角从[0, PI]扩充到[-PI, PI] c.z 向量c的z坐标 其符号说明向量c的方向 theta 为 0 PI 和 -PI 时，叉乘结果为 0 无法通过向量确定平面，也就无法得到平面法向量 三、 VelocityVector # Actor 的速度是一个矢量，其表现是单位时间内的位移方向 当速度不为 0 ， VelocityVector 和 ForwardVector 的夹角与此时 Actor 应该展现的动画息息相关 四、计算夹角 # 坐标 ( Velocity , Angle ) VelocityVector 和 ForwardVector 夹角的计算通过反余弦结果和 sign(c.</description>
    </item>
    
    <item>
      <title>打包游戏</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.b%E6%89%93%E5%8C%85%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.b%E6%89%93%E5%8C%85%E6%B8%B8%E6%88%8F/</guid>
      <description>Overview # 打包游戏，从二进制文件运行 定期打包游戏，确保所做改动能正常运行 一、设置游戏首页 # 项目设置 &amp;gt; Project &amp;gt; Maps &amp;amp; Modes 设置 GameDefaultMap 二、设置编译选项 # 项目设置 &amp;gt; Packaging &amp;gt; Project &amp;gt; Build Configuration 选择 发行 Shipping 三、设置玩家出发点 # 参考 LevelEditor &amp;gt; PlaceActors &amp;gt; Basic &amp;gt; PlayerStart 添加到关卡中 四、编译游戏 # 参考 可在日志窗口查看过程 创建文件夹 Projects/5.1.1/ShootTraining/Build 设置二进制文件保存路径 工具栏 &amp;gt; Platforms &amp;gt; Mac &amp;gt; Package Project 选择 Build 文件夹 1. metal-ar 报错 # 当前项目路径不包含空格，但包含汉字 打包项目 菜单栏 &amp;gt; File &amp;gt; Zip Project 移动到不含空格的英文路径 2.</description>
    </item>
    
    <item>
      <title>代码重构</title>
      <link>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.c%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/1.c%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</guid>
      <description>一、在5.2.0中编译ShooterGame # 不搞这个 二、项目结构 # 资产 Content/ ExternalContent/ Levels/ DefaultMap Player/ Animations/ ABP_BaseCharacter BS_Run BS_Walk BP_STBaseCharacter BP_STPlayerController BP_STGameModeBase C++ ShootTrainingSecond/ ShootTrainingSecondGameModeBase Public/ Components/ STCharacterMovementComponent Player/ STBaseCharacter STPlayerController 三、基础设置 # 载入 ExternalContent 创建 DefaultMap 并设置 设置地板 配置头文件搜索路径 添加 PlayerStart 设置 编译成功自动保存 四、任务 # 1. 三个蓝图类 # 虚幻编辑器 BP_STBaseCharacter BP_STPlayerController BP_STGameModeBase 使用 BP_STGameModeBase BP_STGameModeBase 使用 BP_STBaseCharacter 和 BP_STPlayerController 2. 添加组件 # C++ STBaseCharacter CameraComponent SpringArmComponent 3. 为Character绑定模型 # 虚幻编辑器 BP_STBaseCharacter 4. 绑定键位并给出函数描述 # 虚幻编辑器 项目设置 移动 轴映射 MoveRight APawn::AddMovementInput AActor::GetActorRightVector MoveForward APawn::AddMovementInput AActor::GetActorForwardVector 视角旋转 轴映射 TurnAround APawn::AddControllerYawInput 摄像机和Character一齐旋转 LookUp APawn::AddControllerPitchInput 需使能 SpringArmComponent::bUsePawnControlRotation 默认 PlayerController::InputPitchScale 是负数，所以 Scale 为 -1 CameraComponent 以 CameraComponent 为中心旋转， SpringArmComponent 以 Pawn 为中心旋转 动作 动作映射 Jump ACharacter::Jump Run 按下键位 速度不为0 Velocity和Forward夹角为0 可配置加速系数 通过覆写 CharacterMovementComponent::GetMaxSpeed 实现加速 5.</description>
    </item>
    
  </channel>
</rss>
