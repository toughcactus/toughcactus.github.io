<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on 苔滑非关雨，松鸣不假风。</title>
    <link>https://toughcactus.github.io/tags/api/</link>
    <description>苔滑非关雨，松鸣不假风。 (API)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All Rights Reserved.</copyright>
    
    <atom:link href="https://toughcactus.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 1.日志类别</title>
      <link>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;每个模块可以有自己的日志类别，定位问题会比较方便&lt;/li&gt;
&lt;li&gt;虚幻C++提供了日志类别的枚举类，包含各模块的全局日志类别&lt;/li&gt;
&lt;li&gt;可以使用全局日志类别，也可以自定义静态日志类别&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、自定义日志类别 DEFINE_LOG_CATEGORY_STATIC
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Logging/LogMacros.h&lt;/p&gt;
&lt;p&gt;
  静态日志类别只能在定义所在源文件内使用。&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; alt=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; title=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogSimpleGeometry, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打印级别 DefaultVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于打印级别时，不予打印&lt;/li&gt;
&lt;li&gt;日志级别数值越大，级别越低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别 CompileTimeVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于编译级别时，该语句不予编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议将编译级别和打印级别均设为All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、全局日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; width=&#34;1400&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;LogTemp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打印级别为Log&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志级别不低于Log时打印&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-LogTemp.png&#34; alt=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; title=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; width=&#34;800&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Warning, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Error, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义的日志类别，编译级别均为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 10.UENUM宏</title>
      <link>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需使用宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用枚举类，定义枚举类时，需使用UENUM宏对其进行封装&lt;/li&gt;
&lt;li&gt;虚幻C++中所有枚举类型以大写E开头&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、枚举类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对枚举类变量赋值时，只能使用枚举类成员&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚幻C++中所有的枚举类都必须指定强类型，且必须为uint8（受到蓝图类限制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能使用强类型变量为枚举类对象赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、UENUM宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;定义枚举类时，在上一行使用UENUM宏标记&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UENUM宏/UENUM宏.png&#34; alt=&#34;/pic/UENUM宏/UENUM宏.png&#34; title=&#34;/pic/UENUM宏/UENUM宏.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该枚举类作为蓝图类使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UENUM(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMoveType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Static,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Sin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Rotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 11.FTransform结构体</title>
      <link>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;保存变换信息，包含旋转，缩放，位置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FRotator类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FRotator结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FRotator3d&lt;/li&gt;
&lt;li&gt;Rotator.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pitch&lt;/li&gt;
&lt;li&gt;Yaw&lt;/li&gt;
&lt;li&gt;Roll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
描述为字符串 FRotator::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
FRotator::ZeroRotator
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;li&gt;三个分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
二、FTransform结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/FTransform.png&#34; alt=&#34;/pic/FTransform结构体/FTransform.png&#34; title=&#34;/pic/FTransform结构体/FTransform.png&#34; width=&#34;350&#34;/&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
查看TTransform定义
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;TransformVectorized.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3个数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rotation&lt;/li&gt;
&lt;li&gt;Translation&lt;/li&gt;
&lt;li&gt;Scale3D&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/TTransform.png&#34; alt=&#34;/pic/FTransform结构体/TTransform.png&#34; title=&#34;/pic/FTransform结构体/TTransform.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、分量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
位置 FTransform::Translation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
旋转 FTransform::Rotation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
缩放 FTransform::Scale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
四、获取分量   
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
提取位置分量 FTransform::GetLocation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
提取旋转分量 FTransform::Rotator
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
提取缩放分量 FTransform::GetScale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
五、获取描述信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
FTransform::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
FTransform::ToHumanReadableString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;生成的字符串可读性更高&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 12.USTRUCT宏</title>
      <link>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用该结构体类，定义结构体类时，需使用USTRUCT宏对其进行封装，在定义开始处使用GENERATEATED_USTRUCT_BODY宏&lt;/li&gt;
&lt;li&gt;虚幻C++中所有结构体类以大写F开头&lt;/li&gt;
&lt;li&gt;FColor，FLinearColor，FMath，FTransform，FVector，FRotator都是结构体类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、结构体类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++使用结构体类组织数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、USTRUCT宏 和 GENERATED_USTRUCT_BODY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USTRUCT宏/USTRUCT宏.png&#34; alt=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; title=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;定义结构体类时，在上一行使用USTRUCT宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体开始处，使用GENERATED_USTRUCT_BODY宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以能在虚幻编辑器中使用为目的对结构体进行填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该结构体类作为蓝图类使用，在蓝图类中可读写的数据成员使用BlueprintReadWrite标识&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTRUCT(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FMoveSetting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GENERATED_USTRUCT_BODY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FTransform InitialTransform;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 13.FMath库</title>
      <link>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定义了多种数学函数，包括sine, cosine, 和其他三角函数(trigonometric functions)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/API/Runtime/Core/Math/FMath/&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
计算正弦值 FMath::Sin
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
获得随机布尔值 FMath::RandBool
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-RandBool.png&#34; alt=&#34;/pic/FMath库/FMath-RandBool.png&#34; title=&#34;/pic/FMath库/FMath-RandBool.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 14.UWorld类型</title>
      <link>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;关卡编辑器中，视口所展示的，即场景，又叫做世界场景&lt;/li&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/World.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取程序运行时长 UWorld::GetTimeSeconds
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; alt=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; title=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimeSeconds();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、创建Actor对象并对其调用BeginPlay UWorld::SpawnActor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;动态创建Actor对象，在调用完Actor对象的构造函数之后，调用Actor对象的BeginPlay函数&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActor.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; width=&#34;1200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;返回AActor指针  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InClass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，原点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rotation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，不发生旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor(GeometryClass);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建Actor对象并对其调用BeginPlay UWorld::SpawnActor&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; width=&#34;1200&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpawnParameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform FTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, FTransform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、创建Actor对象 UWorld::SpawnActorDeferred&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, Transform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Owner&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instigator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CollisionHandlingOverride&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 15.向量结构体</title>
      <link>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FVector2D
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector2d&lt;/li&gt;
&lt;li&gt;二维向量&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、FVector
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector3d&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X&lt;/li&gt;
&lt;li&gt;Y&lt;/li&gt;
&lt;li&gt;Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
获取描述信息 FVector::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ToString.png&#34; alt=&#34;/pic/向量结构体/FVector-ToString.png&#34; title=&#34;/pic/向量结构体/FVector-ToString.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
获取分量为0的FVector对象 FVector::ZeroVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ZeroVector.png&#34; alt=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; title=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
判断分量是否为0 FVector::IsZero
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;为0返回true&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-IsZero.png&#34; alt=&#34;/pic/向量结构体/FVector-IsZero.png&#34; title=&#34;/pic/向量结构体/FVector-IsZero.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 16.FTimerManager结构体</title>
      <link>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定时器管理类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
初始化定时器 FTimerManager::SetTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InOutHandle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计时器描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InObj&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向受计时器约束的Actor对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InTimerMethod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;到时间后调用回调函数&lt;/li&gt;
&lt;li&gt;参数为函数指针，需要对回调函数取地址，直接传函数名报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InRate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间间隔&lt;/li&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InbLoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环计时 标志&lt;/li&gt;
&lt;li&gt;布尔类型&lt;/li&gt;
&lt;li&gt;为true则循环计时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InFirstDelay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
停止定时器  FTimerManager::ClearTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; width=&#34;750&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 17.类模板</title>
      <link>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、UClass指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;UClass是所有类型的基类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以匹配到虚幻C++的所有类型，蓝图类、C++类均可&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UClass &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Class;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、ASimpleGeometry指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只能匹配ABaseGeometryActor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ABaseGeometryActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GeometryObject;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、类模板 TSubclassOf
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可以匹配给定类及其派生类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用时需要设定具体类，可以在虚幻编辑器中设置，也可以在C++中设置&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以匹配的类有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASimpleGeometry&lt;/li&gt;
&lt;li&gt;派生自该类的蓝图类，BP_SimpleGeometry_Cube和BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 18.数组类型</title>
      <link>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
TArray
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;容器类型&lt;/li&gt;
&lt;li&gt;模板类&lt;/li&gt;
&lt;li&gt;初始化时不用设置元素个数&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器设置数组元素个数，添加或者写元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FGeometrySetting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryPayloads;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 19.UFUNCTION宏</title>
      <link>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果想在蓝图编辑器中调用该函数，声明时，需使用UFUNCTION宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、UFUNCTION宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明函数时，在上一行使用UFUNCTION宏&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UFUNCTION宏/UFUNCTION宏.png&#34; alt=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; title=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; width=&#34;180&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、使用BlueprintCallable说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可在蓝图中调用该函数&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetGeometrySetting(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FGeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Setting) { GeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Setting; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FGeometrySetting GetGeometrySetting() {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GeometrySetting; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 20.委托</title>
      <link>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DELEGATE系列宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Delegates/DelegateCombinations.h&lt;/p&gt;
&lt;p&gt;
  可以按如下类型进行分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只允许一个客户端订阅&lt;/li&gt;
&lt;li&gt;允许多客户端，使用MULTICAST标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能否在蓝图中使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只能在C++侧使用&lt;/li&gt;
&lt;li&gt;如果要在蓝图中使用，使用DYNAMIC标识&lt;/li&gt;
&lt;li&gt;在C++中使用时，参数只用给出类型&lt;/li&gt;
&lt;li&gt;在蓝图中使用时，需要给出参数的类型和名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理函数的参数个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认参数列表为空&lt;/li&gt;
&lt;li&gt;使用OneParam - NineParams，允许 1 - 9 个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE系列宏.png&#34; alt=&#34;/pic/委托/DELEGATE系列宏.png&#34; title=&#34;/pic/委托/DELEGATE系列宏.png&#34;/&gt;       &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
参数列表为空的委托说明
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; alt=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; title=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
DECLARE_MULTICAST_DELEGATE_OneParam
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; alt=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; title=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
二、服务器端通知客户端 Broadcast
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;MulticastDelegateBase.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传参和定义委托时给出的参数信息一致&lt;/li&gt;
&lt;li&gt;通过委托类型变量调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-Broadcast.png&#34; alt=&#34;/pic/委托/DELEGATE-Broadcast.png&#34; title=&#34;/pic/委托/DELEGATE-Broadcast.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、仅C++ 订阅服务并注册处理函数 AddUObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;DelegateSignatureImpl.inl&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
四、支持蓝图 订阅服务并注册处理函数 AddDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Delegate.h&lt;/p&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-AddDynamic.png&#34; alt=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34; title=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 21.APawn类型</title>
      <link>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、配置用户输入 APawn::SetupPlayerInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; alt=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; title=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取类型 APawn::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GENERATED_BODY宏中定义    &lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; alt=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; title=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;UObject也有StaticClass，UObjectBaseUtility没有&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、Pawn被使用时调用 APawn::PossessedBy
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-PossessedBy.png&#34; alt=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; title=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、Pawn被释放时调用 APawn::UnPossessed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、不推荐 查看是否被PlayerController接管 APawn::IsControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; width=&#34;1400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、查看是否被Controller接管 APawn::IsPawnControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AIController或PlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 22.UInputComponent类型</title>
      <link>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、绑定轴映射的回调函数 UInputComponent::BindAxis
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输入事件 EInputEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/EngineBaseTypes.h&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/EInputEvent.png&#34; alt=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; title=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; width=&#34;350&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;按下时触发 IE_Pressed&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、绑定动作映射的回调函数 UInputComponent::BindAction
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChangePawn&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 23.AGameModeBase类型</title>
      <link>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DefaultPawn设置 AGameModeBase::DefaultPawnClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;数据成员&lt;/li&gt;
&lt;li&gt;使用TSubOfClass定义的模板类&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、默认构造函数 AGameModeBase::AGameModeBase
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对关卡基础类型的设置可以参照这里&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; width=&#34;550&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、PlayerController设置 AGameModeBase::PlayerControllerClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 24.USceneComponent类型</title>
      <link>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;场景中有变换属性的基础组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、挂载到根组件 USceneComponent::SetupAttachment
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;根节点 InParent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置相对于根组件的变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 相对平移 USceneComponent::SetRelativeLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. 相对选旋转 USceneComponent::SetRelativeRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
3. 相对缩放 USceneComponent::SetRelativeScale3D
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
4. 相对变换 USceneComponent::SetRelativeTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 25.UCameraComponent类型</title>
      <link>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;摄像机类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 26.UGameplayStatics类型</title>
      <link>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;虚幻引擎提供的辅助类&lt;/li&gt;
&lt;li&gt;提供多种静态函数，均可在蓝图中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得场景中的指定类型的所有Actor对象 UGameplayStatics::GetAllActorsOfClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;和类模板TSubclassOf搭配使用&lt;/li&gt;
&lt;li&gt;保存到传入的数组引用参数中&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指向游戏中任意Object WorldContextObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用GetWorld传入世界对象，或者使用指向PlayerController的指针(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAllActorsOfClass(GetWorld(), AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass(), Pawns);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 27.APlayerController类型</title>
      <link>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、切换Pawn AController::Possess
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess1.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess2.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、处理输入 APlayerController::SetupInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、获取类型 APlayerController::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;在GENERATED_BODY中定义  &lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-StaticClass.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 28.ACharacter类型</title>
      <link>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;派生自APawn，实现了角色的动作(motion)，动画(animation)和物理交互(physical interaction)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 3.UE_LOG宏</title>
      <link>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</guid>
      <description>&lt;p width=&#34;1500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UE_LOG宏/UE_LOG.png&#34; alt=&#34;/pic/UE_LOG宏/UE_LOG.png&#34; title=&#34;/pic/UE_LOG宏/UE_LOG.png&#34;/&gt;
输出日志时，给出所属的日志类别和该条日志的级别。&lt;/p&gt;
&lt;p&gt;
当日志的级别小于日志类别的打印级别时，忽略；小于日志类别的编译级别时，不编译该条语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出格式
CategoryName: Verbosity: TEXT    &lt;/li&gt;
&lt;li&gt;当日志级别大于Log时，输出日志级别&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志级别 Verbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎定义了日志级别的枚举类&lt;/li&gt;
&lt;li&gt;常用的有Log，Display，Warning和Error&lt;/li&gt;
&lt;li&gt;在编辑器的输出日志窗口，不同级别的日志以不同颜色显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本格式 Format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不接受cstring，要求TCHAR *  &lt;/li&gt;
&lt;li&gt;使用TEXT宏包裹&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format中的%s匹配TCHAR *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果匹配cstring，编译不会报错，输出可能是乱码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 4.AActor类型</title>
      <link>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;
UObjectBaseUtility&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UObject&lt;/p&gt;
&lt;p&gt;
  ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
AActor  &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、AActor类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++基础类型&lt;/li&gt;
&lt;li&gt;能放置到世界场景中的物体，具有相同的基类，AActor&lt;/li&gt;
&lt;li&gt;初始状态不具有Gizmo(不可移动)，也无法绑定模型&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actor对象代指所有能添加到世界场景中的物体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几何体，特效，声音，都派生自AActor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器中添加AActor对象，也可以在代码中动态生成Actor对象&lt;/li&gt;
&lt;li&gt;Actor对象有无实体均可&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由Component组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的组件可以根据需求进行组装，方便重用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、UObject类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎中最基础的类型，AActor类型的父类&lt;/li&gt;
&lt;li&gt;不能在场景中添加UObject对象&lt;/li&gt;
&lt;li&gt;可以在代码中创建UObject对象并对逻辑进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、获得Actor对象描述 UObjectBaseUtility::GetName
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存在FString对象中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; width=&#34;300&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogSimpleGeometry, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、组件 Component
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
创建组件 UObject::CreateDefaultSubobject&amp;lt;T&amp;gt;
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回指向给定类型对象的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; alt=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; title=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; width=&#34;1100&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshInEditor&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SubobjectName&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FName类型&lt;/li&gt;
&lt;li&gt;虚幻编辑器中对应的属性名&lt;/li&gt;
&lt;li&gt;在C++中对变量StaticMesh做设置，在虚幻编辑器中对名为&amp;#34;StaticMeshInEditor&amp;#34;的属性做设置&lt;/li&gt;
&lt;li&gt;二者相对应&lt;/li&gt;
&lt;li&gt;可以在C++中修改变量名&lt;/li&gt;
&lt;li&gt;如果修改属性名，虚幻编辑器中该属性的已有设置会因找不到目标载体而无法生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTransient&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
注册为根组件 AActor::SetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;根组件的设置会影响到变换矩阵求值&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; width=&#34;600&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetRootComponent(StaticMesh);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NewRootComponent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向组件的指针      &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USceneComponent *类型，可以接受UStaticMeshCompoent *(动态绑定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UStaticMeshComponent派生自UMeshComponent&lt;/li&gt;
&lt;li&gt;UMeshComponent派生自UPrimitiveComponent&lt;/li&gt;
&lt;li&gt;UPrimitiveComponent派生自USceneComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
获取指向根组件的指针 AActor::GetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetRootComponent();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
输入组件 AActor::InputComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据成员&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-InputComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; title=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
五、Actor变换信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
获得Actor对象的变换信息 AActor::GetActorTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorTransform.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MoveSetting.InitialTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorTransform();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
获得Actor对象位置信息 AActor::GetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorLocation.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector CurrentLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
获得Actor对象旋转信息 AActor::GetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator CurrentRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorRotation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
设置Actor对象位置信息 AActor::SetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation1.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation2.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorLocation(CurrentLocation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
设置Actor对象旋转信息 AActor::SetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorRotation(CurrentRotation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
六、获取指向世界对象的指针 AActor::GetWorld
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorld.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-16&#34;&gt;
七、获取定时器管理对象的引用 AActor::GetWorldTimerManager
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-17&#34;&gt;
八、对Actor对象调用BeginPlay AActor::FinishSpawning
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;和UWorld::SpawnActorDeferred配合使用&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-FinishSpawning.png&#34; alt=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; title=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; width=&#34;1200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-18&#34;&gt;
九、销毁Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
销毁Actor对象 AActor::Destroy
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;不支持重载&lt;/li&gt;
&lt;li&gt;对对象调用Destroy时，会将其PendingKill标志置1，等到Garbage Collector被触发时，再回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy1.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy2.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
等待若干秒后销毁Actor对象 AActor::SetLifeSpan
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;li&gt;通过定时器实现&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetLifeSpan.png&#34; alt=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; title=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-21&#34;&gt;
十、从场景中移除Actor对象之前进行收尾工作 AActor::EndPlay
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;将Actor对象从场景中移除之前，会对其调用EndPlay函数&lt;/li&gt;
&lt;li&gt;对Actor对象调用Destroy函数，包含EndPlay函数的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-EndPlay.png&#34; alt=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; title=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-22&#34;&gt;
十一、Actor对象是否有效 IsValid
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回true则未被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/IsValid.png&#34; alt=&#34;/pic/AActor类型/IsValid.png&#34; title=&#34;/pic/AActor类型/IsValid.png&#34;/&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;除了判断指针是否为空，还会检查对象的Flag；对对象调用Destroy时，会将其PendingKill标志置1，此时即认为Actor对象不再有效&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/PendingKillFlag.png&#34; alt=&#34;/pic/AActor类型/PendingKillFlag.png&#34; title=&#34;/pic/AActor类型/PendingKillFlag.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 5.颜色结构体</title>
      <link>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;32位整型，存放RGBA&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供预定义颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FColor-Pre-Inited.png&#34; alt=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; title=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、FLinearColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;具有RGBA4个通道，每个通道使用32位表示&lt;/li&gt;
&lt;li&gt;分量类型float&lt;/li&gt;
&lt;li&gt;可以更细致地描述颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
提供预定义颜色
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Black;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
获得随机颜色 FLinearColor::MakeRandomColor
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
输出颜色描述 FLinearColor::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-ToString.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; width=&#34;350&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Color.ToString());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 6.UEngine类型</title>
      <link>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/Engine.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、GEngine
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;使用前需检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在屏幕输出信息 UEngine::AddOnScreenDebugMessage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; alt=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; title=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;消息标识 Key&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key相同的消息只显示第一个&lt;/li&gt;
&lt;li&gt;使用-1则一定会显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本显示时长 TimeToDisplay&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本颜色 DisplayColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用FColor预定义颜色，也可以使用自定义的FColor对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本内容 DebugMessage&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在世界场景中的位置 bNewerOnTop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认在顶部输出信息，为false则在屏幕底部输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置文字大小 TextScale&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GEngine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Orange, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Green, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 7.UPROPERTY宏</title>
      <link>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需该配置&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中读写该数据成员，声明数据成员时，需使用UPROPERTY宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、原型 Default
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于C++类的蓝图类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;li&gt;BP_SimpleGeometry_Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、实例 Instance
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;当把蓝图类或者C++类拖动到关卡中时，会创建该类的对象，称作实例&lt;/li&gt;
&lt;li&gt;在世界大纲中可以看到关卡中的实例，选中，可以在细节面板查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、UPROPERTY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UPROPERTY宏/UPROPERTY宏.png&#34; alt=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; title=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;声明数据成员时，在上一行使用UPROPERTY宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型和实例的细节面板中，数据成员的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问说明符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;li&gt;设置原型的数据成员，是设置数据成员的初始值&lt;/li&gt;
&lt;li&gt;设置实例的数据成员，是设置对象的数据成员的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持给数据成员分组       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供元信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在蓝图编辑器中的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝图属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不支持批量设置，可以分得更细&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、访问说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;EditAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，开放读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，开放写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，开放写权限     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，只读     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、元信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给数据成员分组 Category&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、蓝图属性
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在蓝图编辑器中的读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadWrite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BluepringAssignable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许赋值     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 8.UStaticMeshComponent类型</title>
      <link>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;初始化后，具有Gizmo&lt;/li&gt;
&lt;li&gt;可在虚幻编辑器中绑定模型&lt;/li&gt;
&lt;li&gt;获取材质对象后，可设置其参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
USceneComponent&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UPrimitiveComponent&lt;/p&gt;
&lt;p&gt;
        ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UStaticMeshComponent&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得指向给定索引的材质对象指针 UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;材质对象存在则返回指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全，可多次调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若网格组件未应用材质，告警&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; alt=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; title=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UMaterialInstanceDynamic &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;材质对象索引 ElementIndex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从0开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 9.UMaterialInstanceDynamic类型</title>
      <link>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;材质实例类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置给定参数 UMaterialInstanceDynamic::SetVectorParameterValue
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; alt=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; title=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; width=&#34;700&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, Color);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;参数名 ParameterName&lt;/li&gt;
&lt;li&gt;值 Value&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 1.向量类型</title>
      <link>https://toughcactus.github.io/post/1.%E5%90%91%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.%E5%90%91%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、1-4维向量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;li&gt;Constant2Vector&lt;/li&gt;
&lt;li&gt;Constant3Vector&lt;/li&gt;
&lt;li&gt;Constant4Vector&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建1-4维向量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;任意区域 右键 搜索&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-CreateConstants.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-CreateConstants.png&#34; title=&#34;/pic/蓝图类型/Blueprint-CreateConstants.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键盘数字 1-4&lt;/li&gt;
&lt;li&gt;鼠标左键&lt;/li&gt;
&lt;li&gt;对应1-4维向量实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、常量 Constant
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant.png&#34; width=&#34;120&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、四维常量 Constant4Vector
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector.png&#34; width=&#34;120&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;可以用来存储颜色，4个分量分别存放RGBA&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
写值
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双击vector&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init1.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在细节面板设置&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Init2.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
五、转换成可输入参数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右键&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; title=&#34;/pic/蓝图类型/Blueprint-ConvertToParameter.png&#34; width=&#34;300&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; alt=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; title=&#34;/pic/蓝图类型/Blueprint-Constant4Vector-Parameter.png&#34; width=&#34;150&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 2.字符串</title>
      <link>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建字符串变量 MakeLiteralString
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-MakeLiteralString.png&#34; width=&#34;300&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; alt=&#34;/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; title=&#34;/pic/字符串/Blueprint-String-MakeLiteralString.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、连接字符串 Append
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-Append.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-Append.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-Append.png&#34; width=&#34;300&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-Append.png&#34; alt=&#34;/pic/字符串/Blueprint-String-Append.png&#34; title=&#34;/pic/字符串/Blueprint-String-Append.png&#34; width=&#34;200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可增加输入字符串个数 Add pin&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-Append-AddPin.png&#34; alt=&#34;/pic/字符串/Blueprint-String-Append-AddPin.png&#34; title=&#34;/pic/字符串/Blueprint-String-Append-AddPin.png&#34; width=&#34;200&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输出字符串 PrintString
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-Search-String-PrintString.png&#34; alt=&#34;/pic/字符串/Blueprint-Search-String-PrintString.png&#34; title=&#34;/pic/字符串/Blueprint-Search-String-PrintString.png&#34; width=&#34;350&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/Blueprint-String-PrintString.png&#34; alt=&#34;/pic/字符串/Blueprint-String-PrintString.png&#34; title=&#34;/pic/字符串/Blueprint-String-PrintString.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻编辑器 &gt; 3.键位绑定</title>
      <link>https://toughcactus.github.io/post/3.%E9%94%AE%E4%BD%8D%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.%E9%94%AE%E4%BD%8D%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;入口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目设置 &amp;gt; 引擎 &amp;gt; 输入 &amp;gt; Bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;键位绑定有两种，动作映射和轴映射，其触发机制不同&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/键位绑定/ProjectSettings-Bindings.png&#34; alt=&#34;/pic/键位绑定/ProjectSettings-Bindings.png&#34; title=&#34;/pic/键位绑定/ProjectSettings-Bindings.png&#34; width=&#34;700&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、动作映射
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;一次完整的按下并松开按键，触发一次回调函数&lt;/li&gt;
&lt;li&gt;具有离散性&lt;/li&gt;
&lt;li&gt;如，跳跃&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、轴映射
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;按下键位之后，松开之前的这段时间，持续触发回调函数&lt;/li&gt;
&lt;li&gt;每次刷新帧时，调用回调函数&lt;/li&gt;
&lt;li&gt;具有连续性&lt;/li&gt;
&lt;li&gt;如，前后左右移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、绑定
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在虚幻编辑器中，将键位和函数描述绑定在一起；稍后在C++中，再将回调函数和函数描述绑定在一起&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; alt=&#34;/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; title=&#34;/pic/键位绑定/ProjectSettings-Bindings-Example.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
