<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虚幻C&#43;&#43; on 苔滑非关雨，松鸣不假风。</title>
    <link>https://toughcactus.github.io/tags/%E8%99%9A%E5%B9%BBc&#43;&#43;/</link>
    <description>苔滑非关雨，松鸣不假风。 (虚幻C&#43;&#43;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All Rights Reserved.</copyright>
    
    <atom:link href="https://toughcactus.github.io/tags/%E8%99%9A%E5%B9%BBc++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 1.日志类别</title>
      <link>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.%E6%97%A5%E5%BF%97%E7%B1%BB%E5%88%AB/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;每个模块可以有自己的日志类别，定位问题会比较方便&lt;/li&gt;
&lt;li&gt;虚幻C++提供了日志类别的枚举类，包含各模块的全局日志类别&lt;/li&gt;
&lt;li&gt;可以使用全局日志类别，也可以自定义静态日志类别&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 自定义日志类别 DEFINE_LOG_CATEGORY_STATIC
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Logging/LogMacros.h&lt;/p&gt;
&lt;p&gt;
  静态日志类别只能在定义所在源文件内使用。&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; alt=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; title=&#34;/pic/日志类别/LogCategory-DEFINE_LOG_CATEGORY_STATIC.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogSimpleGeometry, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打印级别 DefaultVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于打印级别时，不予打印&lt;/li&gt;
&lt;li&gt;日志级别数值越大，级别越低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别 CompileTimeVerbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出日志时，给定日志级别小于编译级别时，该语句不予编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议将编译级别和打印级别均设为All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 全局日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERN.png&#34; width=&#34;1400&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;LogTemp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打印级别为Log&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志级别不低于Log时打印&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译级别为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-LogTemp.png&#34; alt=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; title=&#34;/pic/日志类别/LogCategory-LogTemp.png&#34; width=&#34;800&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Warning, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Error, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_LOG_CATEGORY_EXTERN定义的日志类别，编译级别均为All&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; alt=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; title=&#34;/pic/日志类别/LogCategory-DECLARE_LOG_CATEGORY_EXTERNs.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 10.UENUM宏</title>
      <link>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.uenum%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需使用宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用枚举类，定义枚举类时，需使用UENUM宏对其进行封装&lt;/li&gt;
&lt;li&gt;虚幻C++中所有枚举类型以大写E开头&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 枚举类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对枚举类变量赋值时，只能使用枚举类成员&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚幻C++中所有的枚举类都必须指定强类型，且必须为uint8（受到蓝图类限制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能使用强类型变量为枚举类对象赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; UENUM宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;定义枚举类时，在上一行使用UENUM宏标记&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UENUM宏/UENUM宏.png&#34; alt=&#34;/pic/UENUM宏/UENUM宏.png&#34; title=&#34;/pic/UENUM宏/UENUM宏.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该枚举类作为蓝图类使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UENUM(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMoveType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Static,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Sin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Rotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 11.FTransform结构体</title>
      <link>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/11.ftransform%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;保存变换信息，包含旋转，缩放，位置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FRotator类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用FVector类型保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; FRotator结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FRotator3d&lt;/li&gt;
&lt;li&gt;Rotator.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pitch&lt;/li&gt;
&lt;li&gt;Yaw&lt;/li&gt;
&lt;li&gt;Roll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&amp;gt;&amp;gt; 描述为字符串 FRotator::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&amp;gt;&amp;gt; FRotator::ZeroRotator
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;li&gt;三个分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; FTransform结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/FTransform.png&#34; alt=&#34;/pic/FTransform结构体/FTransform.png&#34; title=&#34;/pic/FTransform结构体/FTransform.png&#34; width=&#34;350&#34;/&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; 查看TTransform定义
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;TransformVectorized.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3个数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rotation&lt;/li&gt;
&lt;li&gt;Translation&lt;/li&gt;
&lt;li&gt;Scale3D&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTransform结构体/TTransform.png&#34; alt=&#34;/pic/FTransform结构体/TTransform.png&#34; title=&#34;/pic/FTransform结构体/TTransform.png&#34; width=&#34;800&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
&amp;gt; 分量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; 位置 FTransform::Translation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&amp;gt;&amp;gt; 旋转 FTransform::Rotation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&amp;gt;&amp;gt; 缩放 FTransform::Scale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
&amp;gt; 获取分量   
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&amp;gt;&amp;gt; 提取位置分量 FTransform::GetLocation
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&amp;gt;&amp;gt; 提取旋转分量 FTransform::Rotator
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&amp;gt;&amp;gt; 提取缩放分量 FTransform::GetScale3D
&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
&amp;gt; 获取描述信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
&amp;gt;&amp;gt; FTransform::ToString
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
&amp;gt;&amp;gt; FTransform::ToHumanReadableString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;生成的字符串可读性更高&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 12.USTRUCT宏</title>
      <link>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.ustruct%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需宏&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中使用该结构体类，定义结构体类时，需使用USTRUCT宏对其进行封装，在定义开始处使用GENERATEATED_USTRUCT_BODY宏&lt;/li&gt;
&lt;li&gt;虚幻C++中所有结构体类以大写F开头&lt;/li&gt;
&lt;li&gt;FColor，FLinearColor，FMath，FTransform，FVector，FRotator都是结构体类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 结构体类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++使用结构体类组织数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; USTRUCT宏 和 GENERATED_USTRUCT_BODY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USTRUCT宏/USTRUCT宏.png&#34; alt=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; title=&#34;/pic/USTRUCT宏/USTRUCT宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;定义结构体类时，在上一行使用USTRUCT宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体开始处，使用GENERATED_USTRUCT_BODY宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以能在虚幻编辑器中使用为目的对结构体进行填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 使用BlueprintType说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可将该结构体类作为蓝图类使用，在蓝图类中可读写的数据成员使用BlueprintReadWrite标识&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTRUCT(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FMoveSetting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GENERATED_USTRUCT_BODY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FTransform InitialTransform;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 13.FMath库</title>
      <link>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/13.fmath%E5%BA%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定义了多种数学函数，包括sine, cosine, 和其他三角函数(trigonometric functions)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/en-US/API/Runtime/Core/Math/FMath/&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过命名空间FMath使用  &lt;/li&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Core/Public/Math/UnrealMathUtility.h  &lt;/li&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Core/Public/GenericPlatform/GenericPlatformMath.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 计算正弦值 FGenericPlatformMath::Sin
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Sin.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Sin.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Sin.png&#34; width=&#34;400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Sin-Definition.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Sin-Definition.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Sin-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 获得随机布尔值 FMath::RandBool
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-RandBool.png&#34; alt=&#34;/pic/FMath库/FMath-RandBool.png&#34; title=&#34;/pic/FMath库/FMath-RandBool.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 弧度转角度 FMath::RadiansToDegrees
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-RadiansToDegrees.png&#34; alt=&#34;/pic/FMath库/FMath-RadiansToDegrees.png&#34; title=&#34;/pic/FMath库/FMath-RadiansToDegrees.png&#34; width=&#34;500&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-RadiansToDegrees-Definition.png&#34; alt=&#34;/pic/FMath库/FMath-RadiansToDegrees-Definition.png&#34; title=&#34;/pic/FMath库/FMath-RadiansToDegrees-Definition.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 取符号 FGenericPlatformMath::Sign
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Sign.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Sign.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Sign.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
&amp;gt; 计算反余弦 FGenericPlatformMath::Acos
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Acos.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Acos.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Acos.png&#34; width=&#34;400&#34;/&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Acos-Definition.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Acos-Definition.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Acos-Definition.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
&amp;gt; 获取合乎范围的数值 FMath::Clamp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;模版函数，自动推测类型，要求三个参数类型一致&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-Clamp.png&#34; alt=&#34;/pic/FMath库/FMath-Clamp.png&#34; title=&#34;/pic/FMath库/FMath-Clamp.png&#34; width=&#34;500&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;若 Min &amp;lt;= X &amp;lt;= Max，返回X&lt;/li&gt;
&lt;li&gt;若 X &amp;lt; Min，返回Min&lt;/li&gt;
&lt;li&gt;若 Max &amp;lt; X，返回Max&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
&amp;gt; 获取二者中较小值 FGenericPlatformMath::Min
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FGenericPlatformMath-Min.png&#34; alt=&#34;/pic/FMath库/FGenericPlatformMath-Min.png&#34; title=&#34;/pic/FMath库/FGenericPlatformMath-Min.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
&amp;gt; 浮点数在允许误差范围内判等 FMath::IsNearlyEqual
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-IsNearlyEqual.png&#34; alt=&#34;/pic/FMath库/FMath-IsNearlyEqual.png&#34; title=&#34;/pic/FMath库/FMath-IsNearlyEqual.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
&amp;gt; 浮点数在允许误差范围内判断是否为0 FMath::IsNearlyZero
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-IsNearlyZero.png&#34; alt=&#34;/pic/FMath库/FMath-IsNearlyZero.png&#34; title=&#34;/pic/FMath库/FMath-IsNearlyZero.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
&amp;gt; 计算线性值 FMath::GetMappedRangeValueClamped&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Value &amp;lt; InputRange.X&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OutputRange.X&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Value &amp;gt; InputRange.Y&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OutputRange.Y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Value [InputRange.X, InputRange.Y]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OutputRange.Y + (Value - InputRange.X) (OutputRange.Y - OutputRange.X)/(InputRange.Y - InputRange.X)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FMath库/FMath-GetMappedRangeValueClamped.png&#34; alt=&#34;/pic/FMath库/FMath-GetMappedRangeValueClamped.png&#34; title=&#34;/pic/FMath库/FMath-GetMappedRangeValueClamped.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 14.UWorld类型</title>
      <link>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.uworld%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;关卡编辑器中，视口所展示的，即场景，又叫做世界场景&lt;/li&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/World.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 获取程序运行时长 UWorld::GetTimeSeconds
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; alt=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; title=&#34;/pic/UWorld类型/UWorld-GetTimeSeconds.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimeSeconds();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 创建Actor对象并对其调用BeginPlay UWorld::SpawnActor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;动态创建Actor对象，在调用完Actor对象的构造函数之后，调用Actor对象的BeginPlay函数&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActor.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActor.png&#34; width=&#34;1200&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;返回AActor指针  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InClass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，原点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rotation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值，不发生旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor(GeometryClass);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 创建Actor对象并对其调用BeginPlay UWorld::SpawnActor&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorTemplate.png&#34; width=&#34;1200&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpawnParameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform FTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, FTransform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
&amp;gt; 创建Actor对象 UWorld::SpawnActorDeferred&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; alt=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; title=&#34;/pic/UWorld类型/UWorld-SpawnActorDeferred.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass, Transform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Owner&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instigator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CollisionHandlingOverride&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
&amp;gt; 获取定时器管理对象的引用 UWorld::GetTimerManager
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UWorld类型/UWorld-GetTimerManager.png&#34; alt=&#34;/pic/UWorld类型/UWorld-GetTimerManager.png&#34; title=&#34;/pic/UWorld类型/UWorld-GetTimerManager.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 15.向量结构体</title>
      <link>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.%E5%90%91%E9%87%8F%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; FVector2D
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector2d&lt;/li&gt;
&lt;li&gt;二维向量&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; FVector
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;别名 FVector3d&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三维向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X&lt;/li&gt;
&lt;li&gt;Y&lt;/li&gt;
&lt;li&gt;Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分量类型为double&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&amp;gt;&amp;gt; 获取描述信息 FVector::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ToString.png&#34; alt=&#34;/pic/向量结构体/FVector-ToString.png&#34; title=&#34;/pic/向量结构体/FVector-ToString.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&amp;gt;&amp;gt; 获取分量为0的FVector对象 FVector::ZeroVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;分量均为0&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-ZeroVector.png&#34; alt=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; title=&#34;/pic/向量结构体/FVector-ZeroVector.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; 判断分量是否为0 FVector::IsZero
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;为0返回true&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-IsZero.png&#34; alt=&#34;/pic/向量结构体/FVector-IsZero.png&#34; title=&#34;/pic/向量结构体/FVector-IsZero.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&amp;gt;&amp;gt; 安全单位化向量 FVector::GetSafeNormal
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-GetSafeNormal.png&#34; alt=&#34;/pic/向量结构体/FVector-GetSafeNormal.png&#34; title=&#34;/pic/向量结构体/FVector-GetSafeNormal.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; 向量点乘 FVector::DotProduct
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-DotProduct.png&#34; alt=&#34;/pic/向量结构体/FVector-DotProduct.png&#34; title=&#34;/pic/向量结构体/FVector-DotProduct.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&amp;gt;&amp;gt; 向量叉乘 FVector::CrossProduct
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-CrossProduct.png&#34; alt=&#34;/pic/向量结构体/FVector-CrossProduct.png&#34; title=&#34;/pic/向量结构体/FVector-CrossProduct.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&amp;gt;&amp;gt; 向量在允许误差范围内为0向量 FVector::IsNearlyZero
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/向量结构体/FVector-IsNearlyZero.png&#34; alt=&#34;/pic/向量结构体/FVector-IsNearlyZero.png&#34; title=&#34;/pic/向量结构体/FVector-IsNearlyZero.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 16.FTimerManager结构体</title>
      <link>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/16.ftimermanager%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;定时器管理类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 初始化定时器 FTimerManager::SetTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-SetTimer.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;计时器描述符 InOutHandle&lt;/li&gt;
&lt;li&gt;指向受计时器约束的Actor对象 InObj&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回调函数 InTimerMethod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到时间后调用回调函数&lt;/li&gt;
&lt;li&gt;参数为函数指针，需要对回调函数取地址，直接传函数名报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间间隔 InRate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环计时 标志 InbLoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布尔类型&lt;/li&gt;
&lt;li&gt;为true则循环计时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首次触发延后时长 InFirstDelay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值则不延后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 停止定时器 FTimerManager::ClearTimer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; alt=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; title=&#34;/pic/FTimerManager结构体/FTimerManager-ClearTimer.png&#34; width=&#34;750&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 17.类模板</title>
      <link>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.%E7%B1%BB%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; UClass指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;UClass是所有类型的基类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以匹配到虚幻C++的所有类型，蓝图类、C++类均可&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UClass &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Class;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; ASimpleGeometry指针
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只能匹配ABaseGeometryActor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ABaseGeometryActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GeometryObject;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 类模板 TSubclassOf
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可以匹配给定类及其派生类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用时需要设定具体类，可以在虚幻编辑器中设置，也可以在C++中设置&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClass;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以匹配的类有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASimpleGeometry&lt;/li&gt;
&lt;li&gt;派生自该类的蓝图类，BP_SimpleGeometry_Cube和BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 18.数组类型</title>
      <link>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/18.%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; TArray
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;容器类型&lt;/li&gt;
&lt;li&gt;模板类&lt;/li&gt;
&lt;li&gt;初始化时不用设置元素个数&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器设置数组元素个数，添加或者写元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FGeometrySetting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryPayloads;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 19.UFUNCTION宏</title>
      <link>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/19.ufunction%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果想在蓝图编辑器中调用该函数，声明时，需使用UFUNCTION宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; UFUNCTION宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明函数时，在上一行使用UFUNCTION宏&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UFUNCTION宏/UFUNCTION宏.png&#34; alt=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; title=&#34;/pic/UFUNCTION宏/UFUNCTION宏.png&#34; width=&#34;180&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 使用BlueprintCallable说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可在蓝图中调用该函数&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetGeometrySetting(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FGeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Setting) { GeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Setting; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FGeometrySetting GetGeometrySetting() {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GeometrySetting; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 2.字符串</title>
      <link>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虚幻C++提供3种字符串结构体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FString&lt;/li&gt;
&lt;li&gt;FName&lt;/li&gt;
&lt;li&gt;FText&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; TCHAR
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/4.26/en-US/API/Runtime/Core/HAL/TCHAR/&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ANSICHAR 或 WIDECHAR，取决于平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以把ANSICHAR理解为char，WIDECHAR当作wchar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;虚幻C++支持跨平台，当我们使用其提供的类型时，可以忽略平台差异(如编码和字体)&lt;/li&gt;
&lt;li&gt;格式化输出中的%s匹配TCHAR *&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; TEXT宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;包裹字符串，返回TCHAR *&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; FString结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/5.1/zh-CN/fstring-in-unreal-engine/&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;容器类型，元素类型是TCHAR&lt;/li&gt;
&lt;li&gt;格式化输出中的%s无法匹配FString&lt;/li&gt;
&lt;li&gt;输出FString时，需将其显式转换为TCHAR *&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&amp;gt;&amp;gt; 返回可输出字符串 FString::operator* 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回TCHAR *&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FString-Operator.png&#34; alt=&#34;/pic/字符串/FString-Operator.png&#34; title=&#34;/pic/字符串/FString-Operator.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; 字符串连接 FString::operator+
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&amp;gt;&amp;gt; 整型转字符串 FString::FromInt
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FString-FromInt.png&#34; alt=&#34;/pic/字符串/FString-FromInt.png&#34; title=&#34;/pic/字符串/FString-FromInt.png&#34; width=&#34;350&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; 浮点数转字符串 FString::SanitizeFloat
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FString-SanitizeFloat.png&#34; alt=&#34;/pic/字符串/FString-SanitizeFloat.png&#34; title=&#34;/pic/字符串/FString-SanitizeFloat.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&amp;gt;&amp;gt; 构造函数 接受cstring
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FString-Construct.png&#34; alt=&#34;/pic/字符串/FString-Construct.png&#34; title=&#34;/pic/字符串/FString-Construct.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&amp;gt;&amp;gt; 格式化输出 FString::Printf
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FString-Printf.png&#34; alt=&#34;/pic/字符串/FString-Printf.png&#34; title=&#34;/pic/字符串/FString-Printf.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
&amp;gt; FName结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;和FString相比，FName是一个轻量级的字符串，其功能较少，不包含字符串操作&lt;/li&gt;
&lt;li&gt;用于设置组件名，玩家名，材质参数，骨骼身体部分等&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
&amp;gt; FText结构体
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;保存文本&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&amp;gt;&amp;gt; FString转FText FText::FromString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态函数&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/字符串/FText-FromString.png&#34; alt=&#34;/pic/字符串/FText-FromString.png&#34; title=&#34;/pic/字符串/FText-FromString.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 20.委托</title>
      <link>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/20.%E5%A7%94%E6%89%98/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DELEGATE系列宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Engine/Source/Runtime/Core/Public/Delegates/DelegateCombinations.h&lt;/p&gt;
&lt;p&gt;
  可以按如下类型进行分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只允许一个客户端订阅&lt;/li&gt;
&lt;li&gt;允许多客户端，使用MULTICAST标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能否在蓝图中使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只能在C++侧使用&lt;/li&gt;
&lt;li&gt;如果要在蓝图中使用，使用DYNAMIC标识&lt;/li&gt;
&lt;li&gt;在C++中使用时，参数只用给出类型&lt;/li&gt;
&lt;li&gt;在蓝图中使用时，需要给出参数的类型和名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理函数的参数个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认参数列表为空&lt;/li&gt;
&lt;li&gt;使用OneParam - NineParams，允许 1 - 9 个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE系列宏.png&#34; alt=&#34;/pic/委托/DELEGATE系列宏.png&#34; title=&#34;/pic/委托/DELEGATE系列宏.png&#34;/&gt;       &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
参数列表为空的委托说明
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅C++，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，单客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DECLARE_DYNAMIC_MULTICAST_DELEGATE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++和蓝图，多客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; alt=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; title=&#34;/pic/委托/DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
DECLARE_MULTICAST_DELEGATE_OneParam
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; alt=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; title=&#34;/pic/委托/DECLARE_MULTICAST_DELEGATE_OneParam.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
二、服务器端通知客户端 Broadcast
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;MulticastDelegateBase.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传参和定义委托时给出的参数信息一致&lt;/li&gt;
&lt;li&gt;通过委托类型变量调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-Broadcast.png&#34; alt=&#34;/pic/委托/DELEGATE-Broadcast.png&#34; title=&#34;/pic/委托/DELEGATE-Broadcast.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
三、仅C++ 订阅服务并注册处理函数 AddUObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;DelegateSignatureImpl.inl&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
四、支持蓝图 订阅服务并注册处理函数 AddDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Delegate.h&lt;/p&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/委托/DELEGATE-AddDynamic.png&#34; alt=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34; title=&#34;/pic/委托/DELEGATE-AddDynamic.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 21.APawn类型</title>
      <link>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/21.apawn%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFramework/Pawn.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、配置用户输入 APawn::SetupPlayerInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; alt=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; title=&#34;/pic/APawn类型/APawn-SetupPlayerInputComponent.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取类型 APawn::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GENERATED_BODY宏中定义    &lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; alt=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; title=&#34;/pic/APawn类型/APawn-StaticClass-GENERATED_BODY.png&#34; width=&#34;900&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;UObject也有StaticClass，UObjectBaseUtility没有&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、Pawn被使用时调用 APawn::PossessedBy
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-PossessedBy.png&#34; alt=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; title=&#34;/pic/APawn类型/APawn-PossessedBy.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、Pawn被释放时调用 APawn::UnPossessed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-UnPossessed-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、不推荐 查看是否被PlayerController接管 APawn::IsControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled.png&#34; width=&#34;1400&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsControlled-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、查看是否被Controller接管 APawn::IsPawnControlled
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AIController或PlayerController&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-IsPawnControlled-Definition.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、Pawn响应指定方向的平移 APawn::AddMovementInput
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddMovementInput1.png&#34; alt=&#34;/pic/APawn类型/APawn-AddMovementInput1.png&#34; title=&#34;/pic/APawn类型/APawn-AddMovementInput1.png&#34; width=&#34;900&#34;/&gt;
&lt;p width=&#34;900&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddMovementInput2.png&#34; alt=&#34;/pic/APawn类型/APawn-AddMovementInput2.png&#34; title=&#34;/pic/APawn类型/APawn-AddMovementInput2.png&#34;/&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;移动角色的方向 WorldDirection&lt;/li&gt;
&lt;li&gt;方向向量和步长 ScaleValue&lt;/li&gt;
&lt;li&gt;使用默认值 bForce&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AddMovementInput(GetActorForwardVector(), Amount);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddMovementInput对MovementComponent-&amp;gt;AddInputVector进行封装，修改3D坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddMovementInput-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-AddMovementInput-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-AddMovementInput-Definition.png&#34; width=&#34;600&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、在指定平面旋转PlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;旋转的控制权不在Pawn，在PlayerController&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对PlayerController的旋转进行了封装    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X轴向前，Z轴向上，Y轴向右&lt;/li&gt;
&lt;li&gt;Roll，绕X轴旋转，YOZ，顺时针为正方向&lt;/li&gt;
&lt;li&gt;Pitch，绕Y轴旋转，XOZ，向上为正方向&lt;/li&gt;
&lt;li&gt;Yaw，绕Z轴旋转，XOY，向右为正方向&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
XOZ平面旋转 APawn::AddControllerPitchInput
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;XOZ平面旋转Controller，只旋转Camera，且还需在虚幻编辑器设置Camera组件&lt;/li&gt;
&lt;li&gt;Pitch增加时向上旋转     &lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddControllerPitchInput.png&#34; alt=&#34;/pic/APawn类型/APawn-AddControllerPitchInput.png&#34; title=&#34;/pic/APawn类型/APawn-AddControllerPitchInput.png&#34; width=&#34;600&#34;/&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddControllerPitchInput-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-AddControllerPitchInput-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-AddControllerPitchInput-Definition.png&#34;/&gt;   &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
XOY平面旋转 APawn::AddControllerYawInput
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;XOY平面旋转Controller，会同时旋转Camera和Mesh&lt;/li&gt;
&lt;li&gt;Yaw增加时，向右旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddControllerYawInput.png&#34; alt=&#34;/pic/APawn类型/APawn-AddControllerYawInput.png&#34; title=&#34;/pic/APawn类型/APawn-AddControllerYawInput.png&#34; width=&#34;600&#34;/&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddControllerYawInput-Definition.png&#34; alt=&#34;/pic/APawn类型/APawn-AddControllerYawInput-Definition.png&#34; title=&#34;/pic/APawn类型/APawn-AddControllerYawInput-Definition.png&#34;/&gt;   &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
YOZ平面旋转 APawn::AddControllerRollInput
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Roll增加时，顺时针旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-AddControllerRollInput.png&#34; alt=&#34;/pic/APawn类型/APawn-AddControllerRollInput.png&#34; title=&#34;/pic/APawn类型/APawn-AddControllerRollInput.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-12&#34;&gt;
九、获取Pawn速度 APawn::GetVelocity
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-GetVelocity.png&#34; alt=&#34;/pic/APawn类型/APawn-GetVelocity.png&#34; title=&#34;/pic/APawn类型/APawn-GetVelocity.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-13&#34;&gt;
十、计算伤害 APawn::TakeDamage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;参考AActor::TakeDamage&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-TakeDamage.png&#34; alt=&#34;/pic/APawn类型/APawn-TakeDamage.png&#34; title=&#34;/pic/APawn类型/APawn-TakeDamage.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
十一、获取指向AController的指针 APawn::GetController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可以是PlayerController，也可以是AIController&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-GetController.png&#34; alt=&#34;/pic/APawn类型/APawn-GetController.png&#34; title=&#34;/pic/APawn类型/APawn-GetController.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
十二、指向AController的指针 APawn::Controller
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APawn类型/APawn-Controller.png&#34; alt=&#34;/pic/APawn类型/APawn-Controller.png&#34; title=&#34;/pic/APawn类型/APawn-Controller.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 22.UInputComponent类型</title>
      <link>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/22.uinputcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、绑定轴映射的回调函数 UInputComponent::BindAxis
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAxis.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、输入事件 EInputEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Engine/Source/Runtime/Engine/Classes/Engine/EngineBaseTypes.h&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/EInputEvent.png&#34; alt=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; title=&#34;/pic/UInputComponent类型/EInputEvent.png&#34; width=&#34;350&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;按下时触发 IE_Pressed&lt;/li&gt;
&lt;li&gt;松开时触发 IE_Released&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、绑定动作映射的回调函数 UInputComponent::BindAction
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; alt=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; title=&#34;/pic/UInputComponent类型/UInputComponent-BindAction.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChangePawn&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 23.AGameModeBase类型</title>
      <link>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/23.agamemodebase%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、DefaultPawn设置 AGameModeBase::DefaultPawnClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;数据成员&lt;/li&gt;
&lt;li&gt;使用TSubOfClass定义的模板类&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-DefaultPawnClass.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、默认构造函数 AGameModeBase::AGameModeBase
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对关卡基础类型的设置可以参照这里&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-AGameModeBase.png&#34; width=&#34;550&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、PlayerController设置 AGameModeBase::PlayerControllerClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; alt=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; title=&#34;/pic/AGameModeBase类型/AGameModeBase-PlayerControllerClass.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 24.USceneComponent类型</title>
      <link>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/24.uscenecomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;场景中有变换属性的基础组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、挂载到根组件 USceneComponent::SetupAttachment
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment1.png&#34; width=&#34;1000&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetupAttachment2.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;根节点 InParent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置相对于根组件的变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 相对平移 USceneComponent::SetRelativeLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeLocation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. 相对选旋转 USceneComponent::SetRelativeRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeRotation.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
3. 相对缩放 USceneComponent::SetRelativeScale3D
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeScale3D.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
4. 相对变换 USceneComponent::SetRelativeTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; alt=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; title=&#34;/pic/USceneComponent类型/USceneComponent-SetRelativeTransform.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 25.UCameraComponent类型</title>
      <link>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/25.ucameracomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;摄像机类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、跟随Pawn绕Y轴旋转标志位 UCameraComponent::bUsePawnControlRotation
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;为true则跟随&lt;/li&gt;
&lt;li&gt;以Camera为中心&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UCameraComponent类型/UCameraComponent-bUsePawnControlRotation.png&#34; alt=&#34;/pic/UCameraComponent类型/UCameraComponent-bUsePawnControlRotation.png&#34; title=&#34;/pic/UCameraComponent类型/UCameraComponent-bUsePawnControlRotation.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 26.UGameplayStatics类型</title>
      <link>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/26.ugameplaystatics%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;虚幻引擎提供的辅助类&lt;/li&gt;
&lt;li&gt;提供多种静态函数，均可在蓝图中使用&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/GameplayStatics.cpp&lt;/li&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/Kismet/GameplayStatics.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得场景中的指定类型的所有Actor对象 UGameplayStatics::GetAllActorsOfClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;和类模板TSubclassOf搭配使用&lt;/li&gt;
&lt;li&gt;保存到传入的数组引用参数中&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-GetAllActorsOfClass.png&#34; width=&#34;1000&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指向游戏中任意Object WorldContextObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用GetWorld传入世界对象，或者使用指向PlayerController的指针(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAllActorsOfClass(GetWorld(), AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass(), Pawns);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
二、计算伤害
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
半径伤害 UGameplayStatics::ApplyRadialDamageWithFalloff
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;调用OverlapMultiByObjectType搜索和球体重叠的Actor，对这些Actor调用TakeDamage&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff-参数说明.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff-参数说明.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff-参数说明.png&#34;/&gt;  &lt;/p&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamageWithFalloff.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
三、计算伤害 包裹函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
半径伤害 UGameplayStatics::ApplyRadialDamage
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;包裹函数，封装UGameplayStatics::ApplyRadialDamageWithFalloff&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage-参数说明.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage-参数说明.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage-参数说明.png&#34;/&gt;  &lt;/p&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyRadialDamage.png&#34;/&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以传入指向UWorld对象的指针 WorldContextObject&lt;/li&gt;
&lt;li&gt;伤害的数量特征(quantitative characteristic) BaseDamage&lt;/li&gt;
&lt;li&gt;半径伤害的中心位置 Origin&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害类型 DamageTypeClass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDamageType及其派生类 类型变量&lt;/li&gt;
&lt;li&gt;处理函数根据伤害类型做出相应处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不受伤害的Actor数组 IgnoreActors&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害来源 DamageCauser&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是武器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害来源的上级Controller InstigatedByController&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当伤害来源是Pawn或Character时，传入上级Controller，用以判断阵营&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算半径伤害用标志 DoFullDamage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为true时，处于伤害半径球体内的Actor，受到相同伤害值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算半径伤害模型简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为false时，离球体中心越近，伤害值越大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要一定开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减免伤害用枚举变量 DamagePreventionChannel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;碰撞系数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Character和伤害中心有隔挡时，如何计算伤害&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在某些情形，允许Character不受伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ApplyRadialDamage(GetWorld(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      GetActorLocation(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      Radius,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      {},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      DoFullDamage);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
点伤害 UGameplayStatics::ApplyPointDamage
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;存在碰撞，需要知道指向目标Actor的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyPointDamage.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyPointDamage.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyPointDamage.png&#34; width=&#34;1400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
其他类型 UGameplayStatics::ApplyDamage
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;需要知道指向目标Actor的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UGameplayStatics类型/UGameplayStatics-ApplyDamage.png&#34; alt=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyDamage.png&#34; title=&#34;/pic/UGameplayStatics类型/UGameplayStatics-ApplyDamage.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 27.APlayerController类型</title>
      <link>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/27.aplayercontroller%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFrameWork/Controller.h&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/Controller.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PlayerController&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFrameWork/PlayerController.h  &lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/PlayerController.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 切换Pawn AController::Possess
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess1.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-Possess2.png&#34; alt=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; title=&#34;/pic/APlayerController类型/AController-Possess2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 处理输入 APlayerController::SetupInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-SetupInputComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 获取类型 APlayerController::StaticClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;li&gt;返回指向UClass的指针&lt;/li&gt;
&lt;li&gt;在GENERATED_BODY中定义  &lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-StaticClass.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-StaticClass.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 增减PlayerController旋转角度
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; XOZ平面
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-AddPitchInput-Definition.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-AddPitchInput-Definition.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-AddPitchInput-Definition.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&amp;gt;&amp;gt; XOY平面
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-AddYawInput-Definition.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-AddYawInput-Definition.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-AddYawInput-Definition.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; YOZ平面
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-AddRollInput-Definition.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-AddRollInput-Definition.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-AddRollInput-Definition.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
&amp;gt; 设置Controller状态 AController::ChangeState
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;修改StateName值并做相应修改&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/AController-GetStateName.png&#34; alt=&#34;/pic/APlayerController类型/AController-GetStateName.png&#34; title=&#34;/pic/APlayerController类型/AController-GetStateName.png&#34; width=&#34;300&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
&amp;gt; 使新Controller状态生效 APlayerController::ChangeState
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对先前状态进行收尾，为新状态做相应设置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NAME_Spectating对应观察Pawn，NAME_Playing对应常规Pawn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二者都是常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-GetStateName.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-GetStateName.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-GetStateName.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
&amp;gt; 使观察者状态生效 APlayerController::BeginSpectatingState
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Controller释放当前Pawn&lt;/li&gt;
&lt;li&gt;销毁当前SpectatorPawn&lt;/li&gt;
&lt;li&gt;生成新SpectatorPawn并由Controller控制&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/APlayerController类型/APlayerController-BeginSpectatingState.png&#34; alt=&#34;/pic/APlayerController类型/APlayerController-BeginSpectatingState.png&#34; title=&#34;/pic/APlayerController类型/APlayerController-BeginSpectatingState.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 28.ACharacter类型</title>
      <link>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/28.acharacter%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;派生自APawn，实现了角色的动作(motion)，动画(animation)和物理交互(physical interaction)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;源文件 &amp;gt; UE5/Engine/Source/Runtime/Engine/Private/Character.cpp&lt;/li&gt;
&lt;li&gt;头文件 &amp;gt; UE5/Engine/Source/Runtime/Engine/Classes/GameFrameWork/Character.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 跳跃回调函数 ACharacter::Jump
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-Jump.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-Jump.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-Jump.png&#34; width=&#34;500&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;将bPressedJump置为true，在下次调用Tick函数时，让Actor在Z轴跳跃&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-Jump-Definition.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-Jump-Definition.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-Jump-Definition.png&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 默认构造函数 ACharacter::ACharacter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-ACharacter.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-ACharacter.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-ACharacter.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 子组件类型名
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;保存在FName中&lt;/li&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-组件名初始化.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-组件名初始化.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-组件名初始化.png&#34;/&gt;  &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; CharacterMovementComponent类型名 ACharacter::CharacterMovementComponentName
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-CharacterMovementComponentName.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-CharacterMovementComponentName.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-CharacterMovementComponentName.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&amp;gt;&amp;gt; MeshComponent类型名 ACharacter::MeshComponentName
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-MeshComponentName.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-MeshComponentName.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-MeshComponentName.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; CapsuleComponent类型名 ACharacter::CapsuleComponentName
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;270&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-CapsuleComponentName.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-CapsuleComponentName.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-CapsuleComponentName.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
&amp;gt; 获取指向CharacterMovement组件的指针 ACharacter::GetCharacterMovement
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;CharacterMovementComponent或其派生类&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-GetCharacterMovement.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-GetCharacterMovement.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-GetCharacterMovement.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
&amp;gt; 播放动画剪辑 ACharacter::PlayAnimMontage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-PlayAnimMontage.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-PlayAnimMontage.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-PlayAnimMontage.png&#34; width=&#34;600&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;不需要在调用前检查动画剪辑指针的有效性，函数内检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-PlayAnimMontage-Definition.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-PlayAnimMontage-Definition.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-PlayAnimMontage-Definition.png&#34;/&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指向动画剪辑的指针 AnimMontage&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
&amp;gt; 落地事件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&amp;gt;&amp;gt; 落地委托类型 FLandedSignature
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;多播，支持蓝图&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/落地委托类型.png&#34; alt=&#34;/pic/ACharacter类型/落地委托类型.png&#34; title=&#34;/pic/ACharacter类型/落地委托类型.png&#34; width=&#34;600&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;处理函数格式&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnGroundLanded&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FHitResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Hit);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&amp;gt;&amp;gt; 落地委托类型数据成员 ACharacter::LandedDelegate
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p width=&#34;600&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-LandedDelegate.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-LandedDelegate.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-LandedDelegate.png&#34;/&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&amp;gt;&amp;gt; Character坠落接触地面时调用 ACharacter::Landed
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-Landed.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-Landed.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-Landed.png&#34; width=&#34;600&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;处理落地事件时，可订阅委托，也可覆写Landed&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/ACharacter类型/ACharacter-Landed-Definition.png&#34; alt=&#34;/pic/ACharacter类型/ACharacter-Landed-Definition.png&#34; title=&#34;/pic/ACharacter类型/ACharacter-Landed-Definition.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 29.USpringArmComponent类型</title>
      <link>https://toughcactus.github.io/post/29.uspringarmcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/29.uspringarmcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GameFrameWork/SpringArmComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、跟随Pawn绕Y轴旋转标志位 USpringArmComponent::bUsePawnControlRotation
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;为true则跟随&lt;/li&gt;
&lt;li&gt;以Pawn为中心&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/USpringArmComponent类型/USpringArmComponent-bUsePawnControlRotation.png&#34; alt=&#34;/pic/USpringArmComponent类型/USpringArmComponent-bUsePawnControlRotation.png&#34; title=&#34;/pic/USpringArmComponent类型/USpringArmComponent-bUsePawnControlRotation.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 3.UE_LOG宏</title>
      <link>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.ue_log%E5%AE%8F/</guid>
      <description>&lt;p width=&#34;1500&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UE_LOG宏/UE_LOG.png&#34; alt=&#34;/pic/UE_LOG宏/UE_LOG.png&#34; title=&#34;/pic/UE_LOG宏/UE_LOG.png&#34;/&gt;
输出日志时，给出所属的日志类别和该条日志的级别。&lt;/p&gt;
&lt;p&gt;
当日志的级别小于日志类别的打印级别时，忽略；小于日志类别的编译级别时，不编译该条语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出格式
CategoryName: Verbosity: TEXT    &lt;/li&gt;
&lt;li&gt;当日志级别大于Log时，输出日志级别&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志类别 CategoryName&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志级别 Verbosity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎定义了日志级别的枚举类&lt;/li&gt;
&lt;li&gt;常用的有Log，Display，Warning和Error&lt;/li&gt;
&lt;li&gt;在编辑器的输出日志窗口，不同级别的日志以不同颜色显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本格式 Format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不接受cstring，要求TCHAR *  &lt;/li&gt;
&lt;li&gt;使用TEXT宏包裹&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format中的%s匹配TCHAR *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果匹配cstring，编译不会报错，输出可能是乱码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 30.UCharacterMovementComponent类型</title>
      <link>https://toughcactus.github.io/post/30.ucharactermovementcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/30.ucharactermovementcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;
UPawnMovementComponent&lt;/p&gt;
&lt;p&gt;
         ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UCharacterMovementComponent&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFrameWork/CharacterMovementComponent.h&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/Components/CharacterMovementComponent.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 步行允许的最大速度 UCharacterMovementComponent::MaxWalkSpeed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;蓝图可用&lt;/li&gt;
&lt;li&gt;Character速度从0增加到MaxWalkSpeed，当MaxWalkSpeed数值越大，Character就能达到更大的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;1000&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-MaxWalkSpeed.png&#34; alt=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-MaxWalkSpeed.png&#34; title=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-MaxWalkSpeed.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 获取最大速度 UCharacterMovementComponent::GetMaxSpeed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;公有成员&lt;/li&gt;
&lt;li&gt;如果当前是步行，返回MaxWalkSpeed&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-GetMaxSpeed-Definition.png&#34; alt=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-GetMaxSpeed-Definition.png&#34; title=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-GetMaxSpeed-Definition.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 获取指向Pawn的指针 UPawnMovementComponent::GetPawnOwner
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UCharacterMovementComponent类型/UPawnMovementComponent-GetPawnOwner.png&#34; alt=&#34;/pic/UCharacterMovementComponent类型/UPawnMovementComponent-GetPawnOwner.png&#34; title=&#34;/pic/UCharacterMovementComponent类型/UPawnMovementComponent-GetPawnOwner.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
&amp;gt; 禁止操作CharacterMovement组件 UCharacterMovementComponent::DisableMovement
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-DisableMovement.png&#34; alt=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-DisableMovement.png&#34; title=&#34;/pic/UCharacterMovementComponent类型/UCharacterMovementComponent-DisableMovement.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 31.FObjectInitializer结构体</title>
      <link>https://toughcactus.github.io/post/31.fobjectinitializer%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/31.fobjectinitializer%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;UE5/Engine/Source/Runtime/CoreUObject/Public/UObject/UObjectGlobals.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置基类中子组件的类型 FObjectInitializer::SetDefaultSubobjectClass
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;如果基类中有该组件，更新子组件类型&lt;/li&gt;
&lt;li&gt;如果基类中无该组件，添加该组件并设置对应类型&lt;/li&gt;
&lt;li&gt;返回本对象&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass.png&#34; alt=&#34;/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass.png&#34; title=&#34;/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass.png&#34; width=&#34;1000&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、设置基类中子组件的类型 FObjectInitializer::SetDefaultSubobjectClass&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;基类 ACharacter&lt;/li&gt;
&lt;li&gt;子组件原类型 ACharacter::CharacterMovementComponent&lt;/li&gt;
&lt;li&gt;子组件新类型 T::StaticClass&lt;/li&gt;
&lt;li&gt;要求子组件新类型是原类型的派生类&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass-Template.png&#34; alt=&#34;/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass-Template.png&#34; title=&#34;/pic/FObjectInitializer结构体/FObjectInitializer-SetDefaultSubobjectClass-Template.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ObjInit.SetDefaultSubobjectClass&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTCharacterMovementComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(ACharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CharacterMovementComponentName);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;子组件类型名 SubobjectName&lt;/li&gt;
&lt;li&gt;子组件新类型 T&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 32.UTextRenderComponent类型</title>
      <link>https://toughcactus.github.io/post/32.utextrendercomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/32.utextrendercomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/Components/TextRenderComponent.h&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/Components/TextRenderComponent.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/TextRenderComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置显示文本
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UTextRenderComponent类型/UTextRenderComponent-SetText.png&#34; alt=&#34;/pic/UTextRenderComponent类型/UTextRenderComponent-SetText.png&#34; title=&#34;/pic/UTextRenderComponent类型/UTextRenderComponent-SetText.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 33.宏</title>
      <link>https://toughcactus.github.io/post/33.%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/33.%E5%AE%8F/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; check宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Core/Public/Misc/AssertionMacros.h&lt;/li&gt;
&lt;li&gt;用于开发(development)和调试(debug environment)&lt;/li&gt;
&lt;li&gt;发行(shipping)会忽略该宏，从而不影响程序运行速度&lt;/li&gt;
&lt;li&gt;理解为调用assert&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/宏/check宏.png&#34; alt=&#34;/pic/宏/check宏.png&#34; title=&#34;/pic/宏/check宏.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 34.FDamageEvent结构体</title>
      <link>https://toughcactus.github.io/post/34.fdamageevent%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/34.fdamageevent%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;伤害事件，包含伤害相关信息&lt;/li&gt;
&lt;li&gt;我们可以创建FDamageEvent的派生类，定义自己的伤害事件&lt;/li&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/Engine/DamageEvents.h  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害计算模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点伤害 FPointDamageEvent&lt;/li&gt;
&lt;li&gt;半径伤害 FRadialDamageEvent&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数值伤害&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;量化结果&lt;/li&gt;
&lt;li&gt;较简单，生命值直接减去数值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; UDamageType类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFramework/DamageType.h&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害会有声效，动画和对Character造成的伤害数值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爆炸(explosion)&lt;/li&gt;
&lt;li&gt;火(fire)&lt;/li&gt;
&lt;li&gt;岩浆(lava)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/UDamageType.png&#34; alt=&#34;/pic/FDamageEvent结构体/UDamageType.png&#34; title=&#34;/pic/FDamageEvent结构体/UDamageType.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; FDamageEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;包含伤害信息&lt;/li&gt;
&lt;li&gt;FPointDamageEvent和FRadialDamageEvent派生自FDamageEvent&lt;/li&gt;
&lt;li&gt;处理函数中，根据UDamageType值做出相应处理    &lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/FDamageEvent.png&#34; alt=&#34;/pic/FDamageEvent结构体/FDamageEvent.png&#34; title=&#34;/pic/FDamageEvent结构体/FDamageEvent.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 碰撞信息 FHitResult
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/Engine/HitResult.h&lt;/li&gt;
&lt;li&gt;包含两物体接触信息，如接触点，法向量等&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/FHItResult.png&#34; alt=&#34;/pic/FDamageEvent结构体/FHItResult.png&#34; title=&#34;/pic/FDamageEvent结构体/FHItResult.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 点伤害事件 FPointDamageEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;子弹和砍式武器造成&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息包含伤害方向，身体的受伤部位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用以播放Character对应的骨骼动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理函数中，根据HitInfo处理事件&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/FPointDamageEvent.png&#34; alt=&#34;/pic/FDamageEvent结构体/FPointDamageEvent.png&#34; title=&#34;/pic/FDamageEvent结构体/FPointDamageEvent.png&#34; width=&#34;500&#34;/&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; 伤害轨迹或伤害部位 FPointDamageEvent::HitInfo
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;FHitResult类型&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/FPointDamageEvent-HitInfo.png&#34; alt=&#34;/pic/FDamageEvent结构体/FPointDamageEvent-HitInfo.png&#34; title=&#34;/pic/FDamageEvent结构体/FPointDamageEvent-HitInfo.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
&amp;gt; 半径伤害事件 FRadialDamageEvent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;如榴弹爆炸(grenade expolosion)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息包含球(sphere)的参数，空间位置(position)，半径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用以计算伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/FDamageEvent结构体/FRadialDamageEvent.png&#34; alt=&#34;/pic/FDamageEvent结构体/FRadialDamageEvent.png&#34; title=&#34;/pic/FDamageEvent结构体/FRadialDamageEvent.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 35.UActorComponent类型</title>
      <link>https://toughcactus.github.io/post/35.uactorcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/35.uactorcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;自定义ActorComponent类型&lt;/li&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/Components/ActorComponent.h&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 获取指向Actor的指针 UActorComponent::GetOwner
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UActorComponent类型/UActorComponent-GetOwner.png&#34; alt=&#34;/pic/UActorComponent类型/UActorComponent-GetOwner.png&#34; title=&#34;/pic/UActorComponent类型/UActorComponent-GetOwner.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 获取指向世界对象的指针 UActorComponent::GetWorld
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p width=&#34;600&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/UActorComponent类型/UActorComponent-GetWorld.png&#34; alt=&#34;/pic/UActorComponent类型/UActorComponent-GetWorld.png&#34; title=&#34;/pic/UActorComponent类型/UActorComponent-GetWorld.png&#34;/&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 36.DrawDebugHelpers库</title>
      <link>https://toughcactus.github.io/post/36.drawdebughelpers%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/36.drawdebughelpers%E5%BA%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Public/DrawDebugHelpers.h&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/DrawDebugHelpers.cpp&lt;/li&gt;
&lt;li&gt;绘制图形基元(graphic primitives)库&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;DrawDebugHelpers.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、绘制球体 DrawDebugSphere
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/DrawDebugHelpers库/DrawDebugSphere.png&#34; alt=&#34;/pic/DrawDebugHelpers库/DrawDebugSphere.png&#34; title=&#34;/pic/DrawDebugHelpers库/DrawDebugSphere.png&#34; width=&#34;700&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;指向UWorld对象的指针 InWorld&lt;/li&gt;
&lt;li&gt;球体中心坐标 Center&lt;/li&gt;
&lt;li&gt;球体半径 Radius&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;细分参数(tessellation parameter) Segments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随着Segments的增大，球体棱角越少，绘制开销愈大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;颜色 Color&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FColor类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DrawDebugSphere(GetWorld(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  GetActorLocation(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  Radius,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Red);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 4.AActor类型</title>
      <link>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.aactor%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;
UObjectBaseUtility&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UObject&lt;/p&gt;
&lt;p&gt;
  ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
AActor  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AActor类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/Engine/Classes/GameFramework/Actor.h&lt;/li&gt;
&lt;li&gt;源文件 UE5/Engine/Source/Runtime/Engine/Private/Actor.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UObjectBaseUtility类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 UE5/Engine/Source/Runtime/CoreUObject/Public/UObject/UObjectBaseUtility.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; AActor类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++基础类型&lt;/li&gt;
&lt;li&gt;能放置到世界场景中的物体，具有相同的基类，AActor&lt;/li&gt;
&lt;li&gt;初始状态不具有Gizmo(不可移动)，也无法绑定模型&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actor对象代指所有能添加到世界场景中的物体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几何体，特效，声音，都派生自AActor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在虚幻编辑器中添加AActor对象，也可以在代码中动态生成Actor对象&lt;/li&gt;
&lt;li&gt;Actor对象有无实体均可&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由Component组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的组件可以根据需求进行组装，方便重用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; UObject类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虚幻引擎中最基础的类型，AActor类型的父类&lt;/li&gt;
&lt;li&gt;不能在场景中添加UObject对象&lt;/li&gt;
&lt;li&gt;可以在代码中创建UObject对象并对逻辑进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; 获得Actor对象描述 UObjectBaseUtility::GetName
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存在FString对象中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName.png&#34; width=&#34;300&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogSimpleGeometry, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-GetName-Output.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 组件 Component
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&amp;gt;&amp;gt; 创建组件 UObject::CreateDefaultSubobject&amp;lt;T&amp;gt;
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回指向给定类型对象的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; alt=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; title=&#34;/pic/AActor类型/UObject-CreateDefaultSubobject.png&#34; width=&#34;1100&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshInEditor&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SubobjectName&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FName类型&lt;/li&gt;
&lt;li&gt;虚幻编辑器中对应的属性名&lt;/li&gt;
&lt;li&gt;在C++中对变量StaticMesh做设置，在虚幻编辑器中对名为&amp;#34;StaticMeshInEditor&amp;#34;的属性做设置&lt;/li&gt;
&lt;li&gt;二者相对应&lt;/li&gt;
&lt;li&gt;可以在C++中修改变量名&lt;/li&gt;
&lt;li&gt;如果修改属性名，虚幻编辑器中该属性的已有设置会因找不到目标载体而无法生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTransient&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&amp;gt;&amp;gt; 注册为根组件 AActor::SetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;根组件的设置会影响到变换矩阵求值&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-SetRootComponent.png&#34; width=&#34;600&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetRootComponent(StaticMesh);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NewRootComponent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向组件的指针      &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USceneComponent *类型，可以接受UStaticMeshCompoent *(动态绑定)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UStaticMeshComponent派生自UMeshComponent&lt;/li&gt;
&lt;li&gt;UMeshComponent派生自UPrimitiveComponent&lt;/li&gt;
&lt;li&gt;UPrimitiveComponent派生自USceneComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&amp;gt;&amp;gt; 获取指向根组件的指针 AActor::GetRootComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetRootComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; title=&#34;/pic/AActor类型/AActor-GetRootComponent.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetRootComponent();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&amp;gt;&amp;gt; 输入组件 AActor::InputComponent
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据成员&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-InputComponent.png&#34; alt=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; title=&#34;/pic/AActor类型/AActor-InputComponent.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
&amp;gt; Actor变换信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
&amp;gt;&amp;gt; 获得Actor对象的变换信息 AActor::GetActorTransform
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorTransform.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorTransform.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MoveSetting.InitialTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorTransform();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&amp;gt;&amp;gt; 获得Actor对象位置信息 AActor::GetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorLocation.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorLocation.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector CurrentLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&amp;gt;&amp;gt; 获得Actor对象旋转信息 AActor::GetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator CurrentRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorRotation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&amp;gt;&amp;gt; 设置Actor对象位置信息 AActor::SetActorLocation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation1.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation1.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetActorLocation2.png&#34; alt=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; title=&#34;/pic/AActor类型/AActor-SetActorLocation2.png&#34; width=&#34;1200&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorLocation(CurrentLocation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
&amp;gt;&amp;gt; 设置Actor对象旋转信息 AActor::SetActorRotation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorRotation(CurrentRotation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
&amp;gt; 获取指向世界对象的指针 AActor::GetWorld
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorld.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorld.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-16&#34;&gt;
&amp;gt; 获取定时器管理对象的引用 AActor::GetWorldTimerManager
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; alt=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; title=&#34;/pic/AActor类型/AActor-GetWorldTimerManager.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-17&#34;&gt;
&amp;gt; 对Actor对象调用BeginPlay AActor::FinishSpawning
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;和UWorld::SpawnActorDeferred配合使用&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-FinishSpawning.png&#34; alt=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; title=&#34;/pic/AActor类型/AActor-FinishSpawning.png&#34; width=&#34;1200&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-18&#34;&gt;
&amp;gt; 销毁Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
&amp;gt;&amp;gt; 销毁Actor对象 AActor::Destroy
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;不支持重载&lt;/li&gt;
&lt;li&gt;对对象调用Destroy时，会将其PendingKill标志置1，等到Garbage Collector被触发时，再回收内存&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy1.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy1.png&#34; width=&#34;800&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-Destroy2.png&#34; alt=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; title=&#34;/pic/AActor类型/AActor-Destroy2.png&#34; width=&#34;800&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
&amp;gt;&amp;gt; 等待若干秒后销毁Actor对象 AActor::SetLifeSpan
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;单位为秒&lt;/li&gt;
&lt;li&gt;通过定时器实现&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-SetLifeSpan.png&#34; alt=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; title=&#34;/pic/AActor类型/AActor-SetLifeSpan.png&#34; width=&#34;900&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-21&#34;&gt;
&amp;gt; 从场景中移除Actor对象之前进行收尾工作 AActor::EndPlay
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;将Actor对象从场景中移除之前，会对其调用EndPlay函数&lt;/li&gt;
&lt;li&gt;对Actor对象调用Destroy函数，包含EndPlay函数的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-EndPlay.png&#34; alt=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; title=&#34;/pic/AActor类型/AActor-EndPlay.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-22&#34;&gt;
&amp;gt; Actor对象是否有效 IsValid
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回true则未被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p width=&#34;800&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/IsValid.png&#34; alt=&#34;/pic/AActor类型/IsValid.png&#34; title=&#34;/pic/AActor类型/IsValid.png&#34;/&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;除了判断指针是否为空，还会检查对象的Flag；对对象调用Destroy时，会将其PendingKill标志置1，此时即认为Actor对象不再有效&lt;/p&gt;
&lt;p width=&#34;1400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/PendingKillFlag.png&#34; alt=&#34;/pic/AActor类型/PendingKillFlag.png&#34; title=&#34;/pic/AActor类型/PendingKillFlag.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-23&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-23&#34;&gt;
&amp;gt; 获取Actor方向向量在各轴的分量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-23&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-24&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
&amp;gt;&amp;gt; 向前 Actor::GetActorForwardVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-24&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorForwardVector.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorForwardVector.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorForwardVector.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-25&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-25&#34;&gt;
&amp;gt;&amp;gt; 向右 Actor::GetActorRightVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-25&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorRightVector.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorRightVector.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorRightVector.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-26&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-26&#34;&gt;
&amp;gt;&amp;gt; 向上 Actor::GetActorUpVector
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-26&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-GetActorUpVector.png&#34; alt=&#34;/pic/AActor类型/AActor-GetActorUpVector.png&#34; title=&#34;/pic/AActor类型/AActor-GetActorUpVector.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-27&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-27&#34;&gt;
&amp;gt; 伤害
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-27&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-28&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-28&#34;&gt;
&amp;gt;&amp;gt; 伤害委托类型
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-28&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;FTakeAnyDamageSignature&lt;/li&gt;
&lt;li&gt;FTakePointDamageSignature&lt;/li&gt;
&lt;li&gt;FTakeRadialDamageSignature&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理函数格式&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnTakeAnyDamage&lt;/span&gt;(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnTakePointDamage&lt;/span&gt;(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         FVector HitLocation,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UPrimitiveComponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; FHitComponent,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         FName BoneName,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         FVector ShotFromDirection,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnTakeRadialDamage&lt;/span&gt;(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          FVector Origin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          FHitResult HitInfo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/伤害委托类型.png&#34; alt=&#34;/pic/AActor类型/伤害委托类型.png&#34; title=&#34;/pic/AActor类型/伤害委托类型.png&#34; width=&#34;1700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-29&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-29&#34;&gt;
&amp;gt;&amp;gt; 伤害委托成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-29&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;伤害事件通过委托实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为Actor设置伤害委托的处理函数，在伤害发生时，调用处理函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在蓝图中设置&lt;/li&gt;
&lt;li&gt;AActor::OnTakeAnyDamage&lt;/li&gt;
&lt;li&gt;AActor::OnTakePointDamage&lt;/li&gt;
&lt;li&gt;AActor::OnTakeRadialDamage&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/伤害委托成员.png&#34; alt=&#34;/pic/AActor类型/伤害委托成员.png&#34; title=&#34;/pic/AActor类型/伤害委托成员.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-30&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-30&#34;&gt;
&amp;gt;&amp;gt; 计算伤害 AActor::TakeDamage
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-30&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据伤害事件类型做相应处理，并调用委托处理函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点伤害 FPointDamageEvent&lt;/li&gt;
&lt;li&gt;半径伤害 FRadialDamageEvent&lt;/li&gt;
&lt;li&gt;其他类型伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/AActor-TakeDamage.png&#34; alt=&#34;/pic/AActor类型/AActor-TakeDamage.png&#34; title=&#34;/pic/AActor类型/AActor-TakeDamage.png&#34; width=&#34;800&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;伤害值 DamageAmout&lt;/li&gt;
&lt;li&gt;伤害事件 DamageEvent&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害来源所属Controller EventInstigator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伤害来源，Character或Pawn的上级Controller&lt;/li&gt;
&lt;li&gt;如果划分队伍，判断伤害来自敌人还是友方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伤害源 DamageCauser&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敌人&lt;/li&gt;
&lt;li&gt;榴弹，子弹或是刀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-31&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-31&#34;&gt;
&amp;gt; 判断指针基础类型 UObjectBaseUtility::IsA&amp;lt;T&amp;gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-31&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;指针的基础类型是否为给定的模版类型&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/AActor类型/UObjectBaseUtility-IsA-T.png&#34; alt=&#34;/pic/AActor类型/UObjectBaseUtility-IsA-T.png&#34; title=&#34;/pic/AActor类型/UObjectBaseUtility-IsA-T.png&#34; width=&#34;500&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (DamageType&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;IsA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTFireDamageType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 5.颜色结构体</title>
      <link>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/5.%E9%A2%9C%E8%89%B2%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、FColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;32位整型，存放RGBA&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供预定义颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FColor-Pre-Inited.png&#34; alt=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; title=&#34;/pic/颜色结构体/FColor-Pre-Inited.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、FLinearColor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;具有RGBA4个通道，每个通道使用32位表示&lt;/li&gt;
&lt;li&gt;分量类型float&lt;/li&gt;
&lt;li&gt;可以更细致地描述颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
提供预定义颜色
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Black;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
获得随机颜色 FLinearColor::MakeRandomColor
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-MakeRandomColor.png&#34; width=&#34;400&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
输出颜色描述 FLinearColor::ToString
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/颜色结构体/FLinearColor-ToString.png&#34; alt=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; title=&#34;/pic/颜色结构体/FLinearColor-ToString.png&#34; width=&#34;350&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Color.ToString());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 6.UEngine类型</title>
      <link>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/6.uengine%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/Engine.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、GEngine
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;使用前需检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在屏幕输出信息 UEngine::AddOnScreenDebugMessage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; alt=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; title=&#34;/pic/UEngine类型/UEngine-AddOnScreenDebugMessage.png&#34; width=&#34;1500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;消息标识 Key&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key相同的消息只显示第一个&lt;/li&gt;
&lt;li&gt;使用-1则一定会显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本显示时长 TimeToDisplay&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本颜色 DisplayColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用FColor预定义颜色，也可以使用自定义的FColor对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本内容 DebugMessage&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在世界场景中的位置 bNewerOnTop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认在顶部输出信息，为false则在屏幕底部输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置文字大小 TextScale&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GEngine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Orange, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Green, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 7.UPROPERTY宏</title>
      <link>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/7.uproperty%E5%AE%8F/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;如果只在源码中使用数据成员，无需该配置&lt;/li&gt;
&lt;li&gt;如果想在虚幻编辑器中读写该数据成员，声明数据成员时，需使用UPROPERTY宏对其进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
&amp;gt; 原型 Default
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚幻C++类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于C++类的蓝图类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BP_SimpleGeometry_Cone&lt;/li&gt;
&lt;li&gt;BP_SimpleGeometry_Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
&amp;gt; 实例 Instance
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;当把蓝图类或者C++类拖动到关卡中时，会创建该类的对象，称作实例&lt;/li&gt;
&lt;li&gt;在世界大纲中可以看到关卡中的实例，选中，可以在细节面板查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
&amp;gt; UPROPERTY宏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UPROPERTY宏/UPROPERTY宏.png&#34; alt=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; title=&#34;/pic/UPROPERTY宏/UPROPERTY宏.png&#34; width=&#34;500&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;声明数据成员时，在上一行使用UPROPERTY宏标记&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型和实例的细节面板中，数据成员的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问说明符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;li&gt;设置原型的数据成员，是设置数据成员的初始值&lt;/li&gt;
&lt;li&gt;设置实例的数据成员，是设置对象的数据成员的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持给数据成员分组       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供元信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在蓝图编辑器中的读写权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝图属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不支持批量设置，可以分得更细&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
&amp;gt; 访问说明符
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;指示数据成员在细节面板中是否可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;EditAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，开放读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，开放写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EditInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，开放写权限     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleAnywhere&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型和实例均可见，权限一致，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleDefaultsOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只原型中可见，只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VisibleInstanceOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只实例中可见，只读     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
&amp;gt; 元信息 分组
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给数据成员分组 Category&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleDefaultsOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleInstanceOnly, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
&amp;gt; 蓝图属性
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在蓝图编辑器中的读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadWrite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BlueprintReadOnly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BluepringAssignable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许赋值     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
&amp;gt; 元信息 值范围
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ClampMin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.5&amp;#34;&lt;/span&gt;, ClampMax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; SpeedAcceleration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
&amp;gt; 元信息 编辑条件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; AutoHeal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EditCondition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoHeal&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; HealRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 8.UStaticMeshComponent类型</title>
      <link>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/8.ustaticmeshcomponent%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;初始化后，具有Gizmo&lt;/li&gt;
&lt;li&gt;可在虚幻编辑器中绑定模型&lt;/li&gt;
&lt;li&gt;获取材质对象后，可设置其参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
USceneComponent&lt;/p&gt;
&lt;p&gt;
      ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UPrimitiveComponent&lt;/p&gt;
&lt;p&gt;
        ^&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
UStaticMeshComponent&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获得指向给定索引的材质对象指针 UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;材质对象存在则返回指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全，可多次调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若网格组件未应用材质，告警&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; alt=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; title=&#34;/pic/UStaticMeshComponent类型/UStaticMeshComponent-CreateAndSetMaterialInstanceDynamic.png&#34; width=&#34;1000&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UMaterialInstanceDynamic &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;材质对象索引 ElementIndex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从0开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; API &gt; 虚幻C&#43;&#43; &gt; 9.UMaterialInstanceDynamic类型</title>
      <link>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.umaterialinstancedynamic%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;材质实例类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置给定参数 UMaterialInstanceDynamic::SetVectorParameterValue
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; alt=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; title=&#34;/pic/UMaterialInstanceDynamic类型/UMaterialInstanceDynamic-SetVectorParameterValue.png&#34; width=&#34;700&#34;/&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, Color);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;参数名 ParameterName&lt;/li&gt;
&lt;li&gt;值 Value&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 1.3项目结构</title>
      <link>https://toughcactus.github.io/post/1.3%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.3%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;以XCode项目为例&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、项目结构
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;工程中包含两个子项目&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Engine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引擎代码&lt;/li&gt;
&lt;li&gt;EpicGames/UE_5.1/Engine/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目代码&lt;/li&gt;
&lt;li&gt;Projects/5.1.1/TheBasics/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/项目结构/XCode-Project.png&#34; alt=&#34;/pic/项目结构/XCode-Project.png&#34; title=&#34;/pic/项目结构/XCode-Project.png&#34; width=&#34;250&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、源码文件夹
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;包含所有代码文件&lt;/li&gt;
&lt;li&gt;TheBasics/Source&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、C++类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Games/Source/TheBasics目录下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SimpleGeometry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件 &amp;gt; Source/TheBasics/Public/SimpleGeometry.h&lt;/li&gt;
&lt;li&gt;源文件 &amp;gt; Source/TheBasics/Private/SimpleGeometry.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 1.4C&#43;&#43;类源码阅读</title>
      <link>https://toughcactus.github.io/post/1.4c&#43;&#43;%E7%B1%BB%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4c&#43;&#43;%E7%B1%BB%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件框架 SimpleGeometry.h
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Head.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Head.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Head.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Head-ClassDeclaration.png&#34; width=&#34;400&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;版权说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保留所有权利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预处理指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保在编译过程中，源文件只会被引入一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含头文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CoreMinimal.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了基本类型，常量和日志工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actor.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BaseGeometryActor.generated.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须位于最后&lt;/li&gt;
&lt;li&gt;引擎自动生成的头文件&lt;/li&gt;
&lt;li&gt;每个Actor均有，包含类的元信息(meta information)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类定义中使用的宏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UCLASS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义类使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;THEBASICS_API&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GENERATED_BODY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;填充类定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编译项目文件之前，UnrealBuildTool会展开这些宏生成实际代码。&lt;/p&gt;
&lt;p&gt;
借助这些宏，我们可以在编辑器中使用C++类，创建派生自C++类的蓝图类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、SimpleGeometry类
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;派生自Actor。&lt;/p&gt;
&lt;p&gt;
  源码默认包含默认构造函数和两个虚函数，这也是最常用到的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以设置是否每帧都要调用Tick函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeginPlay函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常在成功创建对象后，对其调用BeginPlay函数，只调用一次&lt;/li&gt;
&lt;li&gt;若在关卡中添加对象时，运行游戏是自动对其调用&lt;/li&gt;
&lt;li&gt;在代码中可以不直接创建对象，使用SpawnActor或SpawnActorDeferred，BeginPlay的调用可能紧接构造函数，也可能在完成某些操作之后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tick函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每秒会刷新若干次帧，默认每次刷新帧时调用&lt;/li&gt;
&lt;li&gt;可以设置帧刷新间隔，即参数DeltaTime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、源文件框架 SimpleGeometry.cpp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-Constructor.png&#34; width=&#34;600&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-BeginPlay.png&#34; width=&#34;450&#34;/&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; alt=&#34;/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; title=&#34;/pic/C++类源码阅读/C++Class-Source-Tick.png&#34; width=&#34;350&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;版权注释&lt;/li&gt;
&lt;li&gt;包含头文件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若bCanEverTick为true，每一帧都会调用Tick函数&lt;/li&gt;
&lt;li&gt;设置该变量可起到优化效果，不一定需要每一帧都调用Tick函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Super关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeginPLay和Tick是虚函数&lt;/li&gt;
&lt;li&gt;虚幻C++将Super设定为基类的别名&lt;/li&gt;
&lt;li&gt;虚幻C++的元代码(meta code)允许我们通过Super关键字统一使用基类函数和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 10.1添加获取和设置GeometrySetting的接口</title>
      <link>https://toughcactus.github.io/post/10.1%E6%B7%BB%E5%8A%A0%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEgeometrysetting%E7%9A%84%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/10.1%E6%B7%BB%E5%8A%A0%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEgeometrysetting%E7%9A%84%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、AGeometryObject类添加接口，获取和设置GeometrySetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 GetGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;inline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 SetGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;inline   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 11.销毁Actor对象</title>
      <link>https://toughcactus.github.io/post/11.%E9%94%80%E6%AF%81actor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/11.%E9%94%80%E6%AF%81actor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用委托完成&lt;/li&gt;
&lt;li&gt;C++侧订阅&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在服务器端，定义委托类型 AGeometryObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅C++侧，多客户端，传入Actor对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_MULTICAST_DELEGATE_OneParam&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_MULTICAST_DELEGATE_OneParam(FOnActorDestroy, AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在服务器端，添加委托类型变量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;客户端订阅该服务时需要访问&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AGeometryObject添加数据成员 OnActorDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   FOnActorDestroy OnActorDestroy;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、给AGeometryObject添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FTimerHandle DestroyTimer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DestroyTimerRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定时器 DestroyTimer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时器间隔 DestroyTimerRate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、给AGeometryObject添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DestroyTimer回调函数 OnTimerDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭定时器&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerDestroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GetWorldTimerManager().ClearTimer(DestroyTimer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化DestroyTimer InitTimerDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitTimerDestroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GetWorldTimerManager().SetTimer(DestroyTimer, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerDestroy,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      DestroyTimerRate, true);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、在OnTimerDestroy中通知客户端
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;至此，委托服务器端的部署全部完成&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OnActorDestroy.Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;委托客户端的处理函数 OnActorDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;销毁Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnActorDestroy(AActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Actor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Actor) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Destroy Timer of Actor %s is UP&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Actor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Actor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Geometry) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next to DESTROY Actor %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//    Geometry-&amp;gt;SetLifeSpan(2.0f);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、给AGeometryHub添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象类型 GeometryClassForDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForDestroy;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，为其订阅委托并注册处理函数 SpawnGeometryForDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForDestroy()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForDestroy, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnActorDestroy.AddUObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnActorDestroy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
九、重载EndPlay函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;给出EndPlay的声明&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现EndPlay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用基类的EndPlay&lt;/li&gt;
&lt;li&gt;输出日志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EndPlay(EEndPlayReason&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Type EndPlayReason) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EndPlay(EndPlayReason);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometry, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EndPlay Called&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
十、日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/销毁Actor对象/AGeometryHub-日志.png&#34; alt=&#34;/pic/销毁Actor对象/AGeometryHub-日志.png&#34; title=&#34;/pic/销毁Actor对象/AGeometryHub-日志.png&#34; width=&#34;500&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 12.1材质颜色改变时通知</title>
      <link>https://toughcactus.github.io/post/12.1%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E6%97%B6%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.1%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E6%94%B9%E5%8F%98%E6%97%B6%E9%80%9A%E7%9F%A5/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在服务器端，定义委托类型 AGeometryObject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++侧和蓝图，多客户端，传入颜色和Actor对象描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给出的变量名不是字符串，但在蓝图编辑器中确实作为参数名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnColorChange, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;, Color, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FString&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;, Name);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在服务器端，添加委托类型变量
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;客户端订阅该服务时需要访问&lt;/li&gt;
&lt;li&gt;需要在蓝图中为该数据成员赋值&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AGeometryObject添加数据成员 OnColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(BlueprintAssignable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FOnColorChange OnColorChange;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、在OnTimerRandomColor中通知客户端
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;至此，委托服务器端的部署全部完成&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OnColorChange.Broadcast(Color, GetName());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 12.3在C&#43;&#43;侧订阅委托并注册处理函数</title>
      <link>https://toughcactus.github.io/post/12.3%E5%9C%A8c&#43;&#43;%E4%BE%A7%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E6%B3%A8%E5%86%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/12.3%E5%9C%A8c&#43;&#43;%E4%BE%A7%E8%AE%A2%E9%98%85%E5%A7%94%E6%89%98%E5%B9%B6%E6%B3%A8%E5%86%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;该委托同时支持蓝图和C++&lt;/li&gt;
&lt;li&gt;只用于C++的委托，使用AddUObject函数进行订阅&lt;/li&gt;
&lt;li&gt;对于可用于蓝图的委托，使用AddDynamic函数进行订阅&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;委托客户端的处理函数 OnColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;打印Actor描述和颜色描述&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为该委托可用于蓝图，虽然不会在蓝图中使用OnColorChange，仍需使用UFUNCTION宏标记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需使用声明符&lt;/li&gt;
&lt;li&gt;与引擎内存模型有关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、给AGeometryHub添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象类型 GeometryClassForColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForColorChange;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、给AGeometryHub添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，为其订阅委托并注册处理函数 SpawnGeometryForColorChange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForColorChange() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForColorChange, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnColorChange.AddDynamic(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnColorChange);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FGeometrySetting GeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetGeometrySetting();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GeometrySetting.FlagRandomColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GeometrySetting.MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RandBool() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; EGeometryMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Rotate : EGeometryMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Sin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetGeometrySetting(GeometrySetting);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; alt=&#34;/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; title=&#34;/pic/在C++侧订阅委托并注册处理函数/LevelEditor-Output.png&#34; width=&#34;700&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 14.3实现GeometryPawn</title>
      <link>https://toughcactus.github.io/post/14.3%E5%AE%9E%E7%8E%B0geometrypawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.3%E5%AE%9E%E7%8E%B0geometrypawn/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加静态日志类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogGeometryPawn, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Velocity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector VelocityVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroVector;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;速度 Velocity&lt;/li&gt;
&lt;li&gt;方向 VelocityVector&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员 MoveForward
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FString Direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backward&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPawn, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Move %s: %f&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Direction, Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector.X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、添加函数成员 MoveRight
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FString Direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPawn, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Move %s: %f&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Direction, Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector.Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、添加函数成员 VelocityInForce
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在Tick中更新Pawn位置&lt;/li&gt;
&lt;li&gt;当按下上下左右键位时，虽然在X轴和Y轴有步进，但直观上来看，并不是前后左右移动，和摄像机的方向有关&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;VelocityInForce(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DeltaTime)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;VelocityVector.IsZero())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FVector NewLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Velocity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DeltaTime &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; VelocityVector;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          SetActorLocation(NewLocation);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、添加函数成员 BindAxis
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在SetupPlayerInputComponent中调用&lt;/li&gt;
&lt;li&gt;将回调函数绑定到函数描述&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用委托机制实现绑定&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindAxis(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、创建组件并注册为根组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;虽然没有使用SceneComponent，如果省略这一步，摄像机无法移动  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USceneComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; SceneComponent;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitComponent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在构造函数中调用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建组件并注册为根组件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SceneComponent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USceneComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SceneComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SetRootComponent(SceneComponent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 14.4使用GeometryPawn</title>
      <link>https://toughcactus.github.io/post/14.4%E4%BD%BF%E7%94%A8geometrypawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/14.4%E4%BD%BF%E7%94%A8geometrypawn/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GameModeBase中完成设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPawn.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员 InitPawn
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPawn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DefaultPawnClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员 默认构造函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;AGeometryGameModeBase()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitPawn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、在虚幻编辑器中查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; alt=&#34;/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; title=&#34;/pic/使用GeometryPawn/UnrealEditor-WorldSettings.png&#34; width=&#34;400&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 15.1添加CameraComponent</title>
      <link>https://toughcactus.github.io/post/15.1%E6%B7%BB%E5%8A%A0cameracomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.1%E6%B7%BB%E5%8A%A0cameracomponent/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;为Pawn添加StaticMesh组件和Camera组件，了解一下Camera组件&lt;/li&gt;
&lt;li&gt;之前绑定StaticMesh时，将其作为根组件&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在使用Camera组件，一种做法时，将Scene组件作为根组件，将StaticMesh和Camera组件作为根组件附件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用到Scene组件的变换，也会应用到StaticMesh和Camera上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还有一种做法，将StaticMesh作为根组件，而Camera作为StaticMesh附件，此时，移动StaticMesh，Camera会一起移动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反过来亦可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根组件和附件的选择，会影响组件的最终变换矩阵，其为父组件变换矩阵和附件变换矩阵的乘积&lt;/li&gt;
&lt;li&gt;选择第一种做法&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中添加前向声明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UCameraComponent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UStaticMeshComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在源文件中添加头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UStaticMeshComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;StaticMesh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UCameraComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Camera;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化组件，并挂在根组件下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitStaticMeshAndCameraComponent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UCameraComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CameraComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(SceneComponent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现虚函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;调用时输出日志&lt;/li&gt;
&lt;li&gt;用来了解切换Pawn时，对Pawn对象的操作  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用Pawn时，调用PossessedBy&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PossessedBy(AController &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NewController) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PossessedBy(NewController);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;NewController) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPawn, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s possessed by %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NewController&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换Pawn时，调用UnPossessed&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UnPossessed() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UnPossessed();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPawn, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s is unpossessed&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 15.4切换Pawn</title>
      <link>https://toughcactus.github.io/post/15.4%E5%88%87%E6%8D%A2pawn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.4%E5%88%87%E6%8D%A2pawn/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在PlayerController的派生类中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPawn.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加静态日志类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogGeometryPlayerController, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TArray&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;Pawns;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int32 CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;获取场景中派生自AGeometryPawn的Pawn对象&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPawns() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAllActorsOfClass(GetWorld(), AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass(), Pawns);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现BeginPlay
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BeginPlay() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BeginPlay();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitPawns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;Pawn个数为1时，切换无效&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挨个轮转Pawn对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Pawns.Num() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          UE_LOG(LogGeometryPlayerController, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pawn Num %d&amp;#34;&lt;/span&gt;), Pawns.Num());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryPawn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;CurrentPawn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Pawns[CurrentPawnIndex]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (CurrentPawnIndex &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; Pawns.Num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryPawn &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NextPawn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(Pawns[CurrentPawnIndex]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;CurrentPawn &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;NextPawn) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryPlayerController, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s switch pawn from %s to %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;CurrentPawn&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName(), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NextPawn&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Possess(NextPawn);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;为函数描述绑定回调函数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupInputComponent中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindChangePawn() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (InputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          InputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChangePawn&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ChangePawn);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、实现SetupInputComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetupInputComponent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetupInputComponent();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BindChangePawn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 15.5使用GeometryPlayerController</title>
      <link>https://toughcactus.github.io/post/15.5%E4%BD%BF%E7%94%A8geometryplayercontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.5%E4%BD%BF%E7%94%A8geometryplayercontroller/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GameModeBase中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GeometryPlayerController.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员 InitPlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitPlayerController() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerControllerClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AGeometryPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 15.6比较APawn和APlayerController的输入处理</title>
      <link>https://toughcactus.github.io/post/15.6%E6%AF%94%E8%BE%83apawn%E5%92%8Caplayercontroller%E7%9A%84%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.6%E6%AF%94%E8%BE%83apawn%E5%92%8Caplayercontroller%E7%9A%84%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、APawn中
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;成员函数SetupPlayerInputComponent中完成，其参数为UInputComponent指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、APlayerController中
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;继承自AController的成员函数SetupInputComponent&lt;/li&gt;
&lt;li&gt;继承自AActor的数据成员InputComponent，其类型为UInputComponent指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、说明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;APawn和APlayerController都会处理输入&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二者均继承自AActor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APlayerController的输入处理来自AActor，而APawn对输入处理进行了封装&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; alt=&#34;/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; title=&#34;/pic/比较APawn和APlayerController的输入处理/DeriveRelation.png&#34; width=&#34;500&#34;/&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 15.8修复键位滞粘</title>
      <link>https://toughcactus.github.io/post/15.8%E4%BF%AE%E5%A4%8D%E9%94%AE%E4%BD%8D%E6%BB%9E%E7%B2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/15.8%E4%BF%AE%E5%A4%8D%E9%94%AE%E4%BD%8D%E6%BB%9E%E7%B2%98/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在GeometryPawn中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Tick函数的最后调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ClearVelocityVector() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      VelocityVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroVector;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在调用VelocityInForce之前，判断Pawn是否被接管
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Called every frame
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryPawn&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Tick(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DeltaTime)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Tick(DeltaTime);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsPawnControlled())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          VelocityInForce(DeltaTime);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ClearVelocityVector();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 17.1使用GeometryHub动态创建Actor对象</title>
      <link>https://toughcactus.github.io/post/17.1%E4%BD%BF%E7%94%A8geometryhub%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/17.1%E4%BD%BF%E7%94%A8geometryhub%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;创建两个Actor对象，并用两个指针指向&lt;/li&gt;
&lt;li&gt;一个指针只在C++中使用，一个使能虚幻编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GeometryClassForGarbageCollector;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NonePropertyGeometry;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  AGeometryObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PropertyGeometry;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SpawnGeometryForGarbageCollector() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UWorld &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;600.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          NonePropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForGarbageCollector, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;600.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          PropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClassForGarbageCollector, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出指针情况&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AGeometryHub&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PrintPointerStatus() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;property pointer %i, is valid %i&amp;#34;&lt;/span&gt;), PropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;, IsValid(PropertyGeometry));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogGeometryHub, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nonproperty pointer %i, is valid %i&amp;#34;&lt;/span&gt;), NonePropertyGeometry &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;, IsValid(NonePropertyGeometry));    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 2.输出日志</title>
      <link>https://toughcactus.github.io/post/2.%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、使用全局日志类别LogTemp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;运行时输出日志&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UseLogTemp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Warning, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogTemp, Error, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Unreal!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/输出日志/UE_LOG-Output.png&#34; alt=&#34;/pic/输出日志/UE_LOG-Output.png&#34; title=&#34;/pic/输出日志/UE_LOG-Output.png&#34; width=&#34;1100&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、自定义日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogSimpleGeometry, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用自定义日志类别
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;UseStaticLogCategory()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogSimpleGeometry, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GetName());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、日志存放路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TheBasics/Saved/Logs/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MacOS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Users/XX/Library/Logs/Unreal Engine/ShootTrainingEditor&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、在输出日志窗口查看日志
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可通过日志类别和日志级别筛选日志&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; alt=&#34;/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; title=&#34;/pic/输出日志/LevelEditor-OutputLog-Filter.png&#34; width=&#34;1000&#34;/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 3.在屏幕输出日志</title>
      <link>https://toughcactus.github.io/post/3.%E5%9C%A8%E5%B1%8F%E5%B9%95%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/3.%E5%9C%A8%E5%B1%8F%E5%B9%95%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/Engine.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在屏幕输出信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;通过指向UEngine对象的全局指针输出信息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GEngine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Orange, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GEngine&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;AddOnScreenDebugMessage(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;, FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Green, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在屏幕输出日志/DebugOnScreen.png&#34; alt=&#34;/pic/在屏幕输出日志/DebugOnScreen.png&#34; title=&#34;/pic/在屏幕输出日志/DebugOnScreen.png&#34; width=&#34;130&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 4.1添加静态网格组件</title>
      <link>https://toughcactus.github.io/post/4.1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/4.1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虚幻引擎中的组件可以分为两大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不具备可视化功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视化组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如静态网格组件，粒子系统控制组件等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加静态网格组件可以达到以下效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actor对象具有Gizmo，拥有变换属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仍不可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续可在虚幻编辑器中绑定模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;骨骼 或 体积&lt;/li&gt;
&lt;li&gt;可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续可对Actor对象应用材质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图案 或 纹理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;给Actor派生类添加组件，扩展类的功能，通过Composite模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;添加静态网格组件属于ASimpleGeometry对象构造过程中的一个环节，一应操作在构造函数中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中进行前向声明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UStaticMeshComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在源文件中包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、为类添加数据成员 StaticMesh
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;公有成员&lt;/li&gt;
&lt;li&gt;只在代码中使用，在虚幻编辑器的原型和实例中均可见&lt;/li&gt;
&lt;li&gt;针对静态网格组件，虚幻编辑器会添加Static Mesh属性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; StaticMesh;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建组件 UObject::CreateDefaultSubobject
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回指针指向给定类型对象&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#34;StaticMeshInEditor&amp;#34;为虚幻编辑器中的组件对应的属性名，一经设置，不得修改&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StaticMesh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UStaticMeshComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StaticMeshInEditor&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、注册为根组件 AActor::SetRootComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetRootComponent(StaticMesh);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、在虚幻编辑器查看
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;在关卡中添加对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仍旧没有外形&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有Gizmo表示之余，细节面板可看到变换参数，以及静态网格体(Static Mesh)属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过静态网格体属性绑定模型  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;细节面板可看到根组件StaticMesh，及在虚幻编辑器中的属性名StaticMeshInEditor&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/添加静态网格组件/StaticMeshInEditor.png&#34; alt=&#34;/pic/添加静态网格组件/StaticMeshInEditor.png&#34; title=&#34;/pic/添加静态网格组件/StaticMeshInEditor.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 6.设置材质参数</title>
      <link>https://toughcactus.github.io/post/6.%E8%AE%BE%E7%BD%AE%E6%9D%90%E8%B4%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/6.%E8%AE%BE%E7%BD%AE%E6%9D%90%E8%B4%A8%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、获取指向材质对象的指针 UStaticMeshComponent::CreateAndSetMaterialInstanceDynamic
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;已为正方体绑定材质M_Color，获取指向对应材质对象的指针&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一个材质，索引为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UMaterialInstanceDynamic &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、设置材质对象参数 UMaterialInstanceDynamic::SetVectorParameterValue
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(Material)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 7.让Actor对象运动</title>
      <link>https://toughcactus.github.io/post/7.%E8%AE%A9actor%E5%AF%B9%E8%B1%A1%E8%BF%90%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/7.%E8%AE%A9actor%E5%AF%B9%E8%B1%A1%E8%BF%90%E5%8A%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三种运动类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静止 Static&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Z方向上余弦运动 Sin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改Z坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绕Z轴旋转 Rotate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 Yaw&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建枚举类 EMoveType
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UENUM(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMoveType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Static,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Sin,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Rotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在蓝图编辑器中可使用该类型&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-EMoveType.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建结构体 FMoveSetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTRUCT(BlueprintType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FMoveSetting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GENERATED_USTRUCT_BODY()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleDefaultOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Frequency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UPROPERTY(VisibleInstanceOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveSetting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      EMoveType MoveType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EMoveType&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Static;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FTransform InitialTransform;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在蓝图编辑器中可使用该类型&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-FMoveSetting.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FMoveSetting MoveSetting;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在实例的细节面板中&lt;/p&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/LevelEditor-Details-MoveSetting.png&#34; width=&#34;400&#34;/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在原型的细节面板中&lt;/p&gt;
&lt;p width=&#34;400&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34; alt=&#34;/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34; title=&#34;/pic/让Actor对象运动/BlueprintEditor-Details-MoveSetting.png&#34;/&gt;     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;结构体成员的访问说明符受到数据成员的访问说明符的限制，数据成员的访问说明符宜大不宜小&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitMoveSetting&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveInForce&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、保存初始状态，用来计算相对变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorTransform&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MoveSetting.InitialTransform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorTransform();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、获得程序运行时长，用来计算相对变换
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorld&lt;/li&gt;
&lt;li&gt;UWorld::GetTimeSeconds&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimeSeconds();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、Z方向上余弦运动
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从初始变换提取位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTransForm::GetLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector InitialLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MoveSetting.InitialTransform.GetLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取Actor对象当前位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector CurrentLocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorLocation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据程序运行时长计算相对旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长 Amplitude&lt;/li&gt;
&lt;li&gt;振幅 Frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CurrentLocation.Z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InitialLocation.Z &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MoveSetting.Amplitude &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Sin(MoveSetting.Frequency &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Time);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置新位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::SetActorLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorLocation(CurrentLocation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
八、绕Z轴旋转
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从初始变换提取旋转分量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTransForm::Rotator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator InitRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MoveSetting.InitialTransform.Rotator();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取Actor对象当前旋转信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetActorRotation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FRotator CurrentRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorRotation();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据程序运行时长计算相对旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长使用Amplitude&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CurrentRotation.Yaw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (InitRotation.Yaw &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Time &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MoveSetting.Amplitude);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置新旋转信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::SetActorRotation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SetActorRotation(CurrentRotation);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 8.让材质颜色周期性随机</title>
      <link>https://toughcactus.github.io/post/8.%E8%AE%A9%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E5%91%A8%E6%9C%9F%E6%80%A7%E9%9A%8F%E6%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/8.%E8%AE%A9%E6%9D%90%E8%B4%A8%E9%A2%9C%E8%89%B2%E5%91%A8%E6%9C%9F%E6%80%A7%E9%9A%8F%E6%9C%BA/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用定时器，到时间则修改材质颜色参数&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;TimerManager.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、定时器描述符 FTimerHandle
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;通过描述符初始化或停止定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FTimerHandle RandomColorTimer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; TimerRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitTimerRandomColor&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnTimerRandomColor&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、实现回调函数，随机材质颜色 OnTimerFired
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;返回类型void，参数列表为空&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerRandomColor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FLinearColor Color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLinearColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MakeRandomColor();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;StaticMesh) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UMaterialInstanceDynamic&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Material &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticMesh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateAndSetMaterialInstanceDynamic(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Material)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Material&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetVectorParameterValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color&amp;#34;&lt;/span&gt;, Color);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、初始化定时器
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取定时器管理对象的引用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorldTimerManager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化定时器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FTimerManager::SetTimer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GetWorldTimerManager().SetTimer(RandomColorTimer, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASimpleGeometry&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTimerRandomColor,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  TimerRate, true);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 9.1创建GeometryObject类</title>
      <link>https://toughcactus.github.io/post/9.1%E5%88%9B%E5%BB%BAgeometryobject%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.1%E5%88%9B%E5%BB%BAgeometryobject%E7%B1%BB/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/StaticMeshComponent.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Materials/MaterialInstanceDynamic.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;TimerManager.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、创建枚举类 EGeometryMoveType
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;运动类型&lt;/li&gt;
&lt;li&gt;已创建EMoveType，同一工程内不能创建同名枚举类&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、创建结构体 FGeometrySetting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;运动类型  MoveType&lt;/li&gt;
&lt;li&gt;初始变换信息 InitialTransform&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机变换颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使能标志 RandomColorFlag&lt;/li&gt;
&lt;li&gt;定时器 RandomColorTimer&lt;/li&gt;
&lt;li&gt;定时器间隔 TimerRate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余弦运动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;振幅 Amplitude&lt;/li&gt;
&lt;li&gt;频率 Frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步长，复用余弦运动的振幅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、创建静态日志类型 LogGeometryObject
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、Actor对象的配置信息
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitGeometrySetting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化GeometrySetting，在构造函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、静态网格组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 StaticMesh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;静态网格组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitStaticMesh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化静态网格组件，传入StaticMesh的引用，在构造函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
七、响应设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保存Actor对象初始变换信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitInitialTransform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;传入初始变换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;材质颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 SetMaterialParameter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;设置材质对象颜色参数，传入静态网格组件和颜色参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机变换颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 OnimerRandomColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;定时器回调函数，生成随机颜色，调用SetMaterialParameter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 InitTimerRandomColor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;初始化定时器，传入定时器描述符 和 定时器间隔&lt;/li&gt;
&lt;li&gt;若FlagRandomColor为真，在BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员 MoveInForce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;传入 运动类型，初始变换信息，振幅，频率&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 基础课程 &gt; 虚幻C&#43;&#43; &gt; 9.2创建Actor对象</title>
      <link>https://toughcactus.github.io/post/9.2%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/9.2%E5%88%9B%E5%BB%BAactor%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用SpawnActor系列创建Actor对象时需要使用类模板，并设定具体类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、创建静态日志类型 LogGeometryHub
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;AActor::GetWorld&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用 UWorld::SpawnActor 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象，坐标(0, 0, 0)&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor(GeometryClass1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、使用 UWorld::SpawnActor&amp;lt;T&amp;gt; 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass2, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、使用 UWorld::SpawnActorDeferred&amp;lt;T&amp;gt; 创建Actor对象
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryClass3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员 GeometryPayloads&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;需在虚幻编辑器设置元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Actor对象&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UWorld&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; World &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetWorld();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (World)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FGeometrySetting &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Payload : GeometryPayloads)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FTransform Transform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              FTransform(FRotator&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZeroRotator, FVector(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;800.0f&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Geometry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; World&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SpawnActorDeferred&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AGeometryObject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GeometryClass3, Transform);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置GeometrySetting&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetGeometrySetting(Payload);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收尾工作&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Geometry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;FinishSpawning(Transform);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.10.2在C&#43;&#43;中计算ForwardVector和VelocityVector的夹角</title>
      <link>https://toughcactus.github.io/post/1.10.2%E5%9C%A8c&#43;&#43;%E4%B8%AD%E8%AE%A1%E7%AE%97forwardvector%E5%92%8Cvelocityvector%E7%9A%84%E5%A4%B9%E8%A7%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.10.2%E5%9C%A8c&#43;&#43;%E4%B8%AD%E8%AE%A1%E7%AE%97forwardvector%E5%92%8Cvelocityvector%E7%9A%84%E5%A4%B9%E8%A7%92/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蓝图可调用，const函数&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; GetAngleBetweenForwardAndVelocity() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;速度为0时，夹角为0&lt;/li&gt;
&lt;li&gt;夹角为PI或-PI时，叉乘结果为0，返回反余弦结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAngleBetweenForwardAndVelocity() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GetVelocity().IsZero())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FVector ForwardVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetActorForwardVector();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FVector VelocityNormalizedVector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetVelocity().GetSafeNormal();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; DotProductResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;DotProduct(ForwardVector, VelocityNormalizedVector);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Theta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RadiansToDegrees(FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Acos(DotProductResult));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FVector CrossProductResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FVector&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CrossProduct(ForwardVector, VelocityNormalizedVector);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (CrossProductResult.IsZero() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Theta : FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Sign(CrossProductResult.Z) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Theta);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、代码优化
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;可选&lt;/li&gt;
&lt;li&gt;实现前后左右移动回调函数MoveForward和MoveRight时，如果Amount为0，直接返回即可，不用设置方向向量的方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.1在本地运行ShooterGame示例项目</title>
      <link>https://toughcactus.github.io/post/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cshootergame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.1%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cshootergame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、下载ShooterGame
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Epic Games Launcher &amp;gt; Samples &amp;gt; Shooter Game&lt;/li&gt;
&lt;li&gt;支持引擎版本4.0 - 4.27，当前使用引擎版本5.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、需要修改的问题
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;UMatineeCameraShake已被ULegacyCameraShake替代&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PLATFORM_PS4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个不合适的改法是在引擎代码中，紧接着SWITCH定义该宏&lt;/li&gt;
&lt;li&gt;另一个麻烦但更合理的改法是，屏蔽该宏的出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source/ShooterGame/Private/Player/ShhoterCharacter.cpp:322&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件运算符的第二个和第三个操作数如果类型不一致，存在转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/cpp/cpp/conditional-operator-q?view=msvc-170&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AController*和AActor*可以相互转换，此处有歧义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、运行效果
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;img src=&#34;https://toughcactus.github.io/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; alt=&#34;/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; title=&#34;/pic/在本地运行ShooterGame示例项目/运行效果.png&#34; width=&#34;600&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.4.2设置STGameModeBase</title>
      <link>https://toughcactus.github.io/post/1.4.2%E8%AE%BE%E7%BD%AEstgamemodebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.4.2%E8%AE%BE%E7%BD%AEstgamemodebase/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、头文件包含
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看源文件，指明上级文件夹Player&lt;/p&gt;
&lt;p width=&#34;600&#34;&gt;&lt;img src=&#34;https://toughcactus.github.io/pic/设置STGameModeBase/头文件路径.png&#34; alt=&#34;/pic/设置STGameModeBase/头文件路径.png&#34; title=&#34;/pic/设置STGameModeBase/头文件路径.png&#34;/&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置头文件搜索路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ShootTraining.Build.cs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PublicIncludePaths.AddRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Player&amp;#34;&lt;/span&gt; });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在STGameModeBase中使用STBaseCharacter和STPlayerController
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在源文件包含头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;STBaseCharacter.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;STPlayerController.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在默认构造函数中调用  &lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCharacterAndPlayerController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DefaultPawnClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerControllerClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ASTPlayerController&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticClass();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASTGameModeBase&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ASTGameModeBase()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      InitCharacterAndPlayerController();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、为STBaseCharacter添加Camera组件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;头文件中添加前向声明&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UCameraComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源文件中添加头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Camera/CameraComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Components&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UCameraComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Camera;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCameraComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UCameraComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CameraComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.5.2为Character实现前后左右移动</title>
      <link>https://toughcactus.github.io/post/1.5.2%E4%B8%BAcharacter%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E5%B7%A6%E5%8F%B3%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.5.2%E4%B8%BAcharacter%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E5%B7%A6%E5%8F%B3%E7%A7%BB%E5%8A%A8/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/InputComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddMovementInput(GetActorForwardVector(), Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddMovementInput(GetActorRightVector(), Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;绑定函数描述和回调函数&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupPlayerInputComponent中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindMoveHandler(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveForward&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveForward);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MoveRight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MoveRight);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.6.2为Camera实现旋转</title>
      <link>https://toughcactus.github.io/post/1.6.2%E4%B8%BAcamera%E5%AE%9E%E7%8E%B0%E6%97%8B%E8%BD%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.6.2%E4%B8%BAcamera%E5%AE%9E%E7%8E%B0%E6%97%8B%E8%BD%AC/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、搭建框架
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;添加空函数并绑定函数描述和回调函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员但不实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LookUp&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TurnAround&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupPlayerInputComponent中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCameraRotate(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LookUp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;LookUp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TurnAround&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TurnAround);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加静态日志类型
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogBaseCharacter, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、实现Lookup和TurnAround
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;LookUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddControllerPitchInput(Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogBaseCharacter, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LookUp Amount: %f&amp;#34;&lt;/span&gt;), Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TurnAround(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddControllerYawInput(Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.6.4为Character添加SpringArm组件</title>
      <link>https://toughcactus.github.io/post/1.6.4%E4%B8%BAcharacter%E6%B7%BB%E5%8A%A0springarm%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.6.4%E4%B8%BAcharacter%E6%B7%BB%E5%8A%A0springarm%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件进行前向声明
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;USpringArmComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在源文件包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GameFrameWork/SpringArmComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Components&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USpringArmComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SpringArm;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置的是原型的默认值&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitSpringArmAndCamera()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SpringArm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USpringArmComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SpringArmComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SpringArm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SpringArm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bUsePawnControlRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UCameraComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CameraComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(SpringArm);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Camera&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bUsePawnControlRotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;在默认构造函数中调用&lt;/li&gt;
&lt;li&gt;不再在默认构造函数中调用InitCameraComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.6.7优化LookUp和TurnAround绑定</title>
      <link>https://toughcactus.github.io/post/1.6.7%E4%BC%98%E5%8C%96lookup%E5%92%8Cturnaround%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.6.7%E4%BC%98%E5%8C%96lookup%E5%92%8Cturnaround%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、比对InitCameraRotate，LookUp，TurnAround三个函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;LookUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddControllerPitchInput(Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//	UE_LOG(LogBaseCharacter, Log, TEXT(&amp;#34;LookUp Amount: %f&amp;#34;), Amount);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TurnAround(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AddControllerYawInput(Amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCameraRotate(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lookup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;LookUp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TurnAround&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TurnAround);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;LookUp，TurnAround，AddControllerPitchInput，AddControllerYawInput的函数签名是一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupPlayerInputComponent中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitCameraRotateFinal(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lookup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;AddControllerPitchInput);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TurnAround&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;AddControllerYawInput);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;不再在SetupPlayerInputComponent中调用InitCameraRotate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.8.2为Character实现跳跃</title>
      <link>https://toughcactus.github.io/post/1.8.2%E4%B8%BAcharacter%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%B7%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.8.2%E4%B8%BAcharacter%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%B7%83/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用虚幻引擎提供的跳跃回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在SetupPlayerInputComponent中调用    &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitJump(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jump&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Jump);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.9.2实现键位逻辑</title>
      <link>https://toughcactus.github.io/post/1.9.2%E5%AE%9E%E7%8E%B0%E9%94%AE%E4%BD%8D%E9%80%BB%E8%BE%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.9.2%E5%AE%9E%E7%8E%B0%E9%94%AE%E4%BD%8D%E9%80%BB%E8%BE%91/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;虽然是跑步键位，但是限制方向为向前 &amp;gt; 同时按下W或Up&lt;/li&gt;
&lt;li&gt;要求速度不为0 &amp;gt; 前方有障碍物时，不应该由走路转换成跑步动画&lt;/li&gt;
&lt;li&gt;动作映射的回调函数参数列表为空&lt;/li&gt;
&lt;li&gt;判断是否为前进方向时，还可根据速度矢量和朝向的夹角  &lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsForward &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; AbleRun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在SetupPlayerInputComponent中调用InitRun&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RunEnable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AbleRun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RunDisable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AbleRun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitRun(UInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PlayerInputComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run&amp;#34;&lt;/span&gt;, IE_Pressed, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RunEnable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PlayerInputComponent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;BindAction(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run&amp;#34;&lt;/span&gt;, IE_Released, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RunDisable);	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在MoveForward中调用  &lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetIsForward(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IsForward &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;可在蓝图中调用&lt;/li&gt;
&lt;li&gt;const函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsRunning() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;IsRunning() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; AbleRun &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; IsForward &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GetVelocity().IsZero();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 1.9.5设置MaxSpeed</title>
      <link>https://toughcactus.github.io/post/1.9.5%E8%AE%BE%E7%BD%AEmaxspeed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/1.9.5%E8%AE%BE%E7%BD%AEmaxspeed/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加头文件路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ShootTraining.Build.cs&lt;/p&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PublicIncludePaths.AddRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Player&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Components&amp;#34;&lt;/span&gt; });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;加速参数&lt;/li&gt;
&lt;li&gt;原型(STBaseCharacter)中可修改&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围 1.5 - 10&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ClampMin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.5&amp;#34;&lt;/span&gt;, ClampMax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; SpeedAcceleration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、包含头文件 STCharacterMovementComponent.cpp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Player/STBaseCharacter.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、覆写UCharacterMovementComponent::GetMaxSpeed
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;并不直接修改MaxWalkSpeed&lt;/li&gt;
&lt;li&gt;某个地方会调用GetMaxSpeed来确定Character运动速度的上限，当获取的MaxSpeed增加，速度增加的幅度也变大，用来实现加速&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; USTCharacterMovementComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetMaxSpeed() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; MaxSpeed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Super&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetMaxSpeed();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ASTBaseCharacter &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Player &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GetPawnOwner());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Player &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Player&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;IsRunning() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; SpeedAcceleration &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MaxSpeed : MaxSpeed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、包含头文件 STBaseCharacter.cpp
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/STCharacterMovementComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
六、让STBaseCharacter使用STCharacterMovementComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;屏蔽默认构造函数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新实现构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区别在于设置了基类子组件类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ASTBaseCharacter(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FObjectInitializer &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ObjInit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Super(ObjInit.SetDefaultSubobjectClass&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTCharacterMovementComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(ACharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CharacterMovementComponentName))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don&amp;#39;t need it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      PrimaryActorTick.bCanEverTick &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// InitCameraComponent();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      InitSpringArmAndCamera();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.1.2搭建STHealthComponent框架</title>
      <link>https://toughcactus.github.io/post/2.1.2%E6%90%AD%E5%BB%BAsthealthcomponent%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.1.2%E6%90%AD%E5%BB%BAsthealthcomponent%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;USTHealthComponent&lt;/li&gt;
&lt;li&gt;纯逻辑 组件类&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、调整框架
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三个基础函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每帧调用TickComponent函数标志 置为false&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PrimaryComponentTick.bCanEverTick &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BeginPlay&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TickComponent函数 &amp;gt; 屏蔽&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用基类实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 生命值
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. 最大生命值
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型可设置，分组Health，范围 ( 0, 1000 )&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Health&amp;#34;&lt;/span&gt;, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ClampMin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0&amp;#34;&lt;/span&gt;, ClampMax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000.0&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; MaxHealth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
1. 获取Health值
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;蓝图可调用，const函数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式inline&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; GetHealth() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Health; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
2. 初始化Health
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在BeginPlay中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitHealth()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MaxHealth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.1.3为Character添加HealthComponent</title>
      <link>https://toughcactus.github.io/post/2.1.3%E4%B8%BAcharacter%E6%B7%BB%E5%8A%A0healthcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.1.3%E4%B8%BAcharacter%E6%B7%BB%E5%8A%A0healthcomponent/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中前向声明，在源文件中包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;USTHealthComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/STHealthComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Health&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USTHealthComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Health;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在构造函数中调用&lt;/li&gt;
&lt;li&gt;无表示，不用设置上级组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitHealthComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HealthComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.1.4在Character上方显示生命值</title>
      <link>https://toughcactus.github.io/post/2.1.4%E5%9C%A8character%E4%B8%8A%E6%96%B9%E6%98%BE%E7%A4%BA%E7%94%9F%E5%91%BD%E5%80%BC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.1.4%E5%9C%A8character%E4%B8%8A%E6%96%B9%E6%98%BE%E7%A4%BA%E7%94%9F%E5%91%BD%E5%80%BC/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用UTextRenderComponent组件&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、在头文件中前向声明，在源文件中包含头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UTextRenderComponent&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Components/TextRenderComponent.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Health&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UTextRenderComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;HealthText;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在构造函数中调用&lt;/li&gt;
&lt;li&gt;有视觉表示，挂到根组件下面&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitHealthTextComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      HealthText &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UTextRenderComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HealthTextComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      HealthText&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetupAttachment(GetRootComponent());	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、每帧更新显示文本
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;添加函数成员&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;DisplayHealthText()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      HealthText&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SetText(FText&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FromString(FString&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Printf(TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%.0f&amp;#34;&lt;/span&gt;), Health&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetHealth())));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
五、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在BeginPlay中调用&lt;/li&gt;
&lt;li&gt;使用IDE编译，运行游戏崩溃，可在IDE中查看断点&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CheckHealth()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      check(Health);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      check(HealthText);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.2计算伤害</title>
      <link>https://toughcactus.github.io/post/2.2%E8%AE%A1%E7%AE%97%E4%BC%A4%E5%AE%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.2%E8%AE%A1%E7%AE%97%E4%BC%A4%E5%AE%B3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;虚幻引擎提供一组函数，用来对Actor造成伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、每帧对Character造成伤害
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;li&gt;伤害来源 自己&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CharacterTakeDamage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      TakeDamage(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1f&lt;/span&gt;, FDamageEvent{}, GetController(), &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、定义空的伤害委托处理函数，并注册
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在HealthComponent中完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
1. 包含头文件
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GameFramework/Actor.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
2. 定义日志类型
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DEFINE_LOG_CATEGORY_STATIC(LogHealthComponent, All, All)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
3. 添加函数成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;委托类型FTakeAnyDamageSignature&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从委托类型的定义获取处理函数签名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;委托属性多播，支持蓝图，需要UFUNCTION宏&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnTakeAnyDamage(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor, &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy, AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
4. 添加函数成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;RegisterDamageHandler()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AActor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ThisActor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetOwner();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ThisActor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ThisActor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnTakeAnyDamage.AddDynamic(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTakeAnyDamage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
三、实现伤害委托处理函数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;Health减为0，作为负数仍在减&lt;/li&gt;
&lt;li&gt;差不多一秒10帧&lt;/li&gt;
&lt;li&gt;触发处理函数时，不会传入整个FDamageEvent变量，而是传入UDamageType&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTakeAnyDamage(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor, &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy, AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; Damage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.3.2绘制半径伤害球体</title>
      <link>https://toughcactus.github.io/post/2.3.2%E7%BB%98%E5%88%B6%E5%8D%8A%E5%BE%84%E4%BC%A4%E5%AE%B3%E7%90%83%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.3.2%E7%BB%98%E5%88%B6%E5%8D%8A%E5%BE%84%E4%BC%A4%E5%AE%B3%E7%90%83%E4%BD%93/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;STDevDamageActor模拟榴弹在Character附近爆炸&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、屏蔽ASTBaseCharacter::Tick中调用CharacterTakeDamage
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加头文件路径
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;ShootTraining/Source/ShootTraining/ShootTraining.Build.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c#&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PublicIncludePaths.AddRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Player&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Components&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShootTraining/Public/Dev&amp;#34;&lt;/span&gt; });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使STDevDamageActor具有变换属性
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
1. 添加数据成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;蓝图可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  USceneComponent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;SceneComponent;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
2. 添加函数成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在构造函数中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTDevDamageActor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitSceneComponent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SceneComponent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CreateDefaultSubobject&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USceneComponent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SceneComponent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SetRootComponent(SceneComponent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
四、绘制球体，模拟爆炸
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
1. 添加头文件
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;DrawDebugHelpers.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
2. 添加数据成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;蓝图可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Radius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FColor SphereColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FColor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Red;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
3. 添加函数成员
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用，每帧都绘制球体&lt;/li&gt;
&lt;li&gt;DrawDebugSphere的第一个参数类型为UWorld，所以不用包含UWorld的头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTDevDamageActor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;DrawSphere()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DrawDebugSphere(GetWorld(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      GetActorLocation(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      Radius,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      SphereColor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.3.4对半径伤害球体内Actor造成伤害</title>
      <link>https://toughcactus.github.io/post/2.3.4%E5%AF%B9%E5%8D%8A%E5%BE%84%E4%BC%A4%E5%AE%B3%E7%90%83%E4%BD%93%E5%86%85actor%E9%80%A0%E6%88%90%E4%BC%A4%E5%AE%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.3.4%E5%AF%B9%E5%8D%8A%E5%BE%84%E4%BC%A4%E5%AE%B3%E7%90%83%E4%BD%93%E5%86%85actor%E9%80%A0%E6%88%90%E4%BC%A4%E5%AE%B3/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Kismet/GameplayStatics.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;蓝图可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DoFullDamage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;li&gt;ApplyRadialDamage的第一个参数类型为UObject，此时传入UWorld，需包含UWorld头文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTDevDamageActor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;DevTakeDamage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ApplyRadialDamage(GetWorld(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          GetActorLocation(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Radius,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          {},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          DoFullDamage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、在伤害处理函数USTHealthComponent::OnTakeAnyDamage中输出伤害值
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;验证DoFullDamage机制&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UE_LOG(LogHealthComponent, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Damage: %.0f&amp;#34;&lt;/span&gt;), Damage);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.4.2使用UDamageType</title>
      <link>https://toughcactus.github.io/post/2.4.2%E4%BD%BF%E7%94%A8udamagetype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.4.2%E4%BD%BF%E7%94%A8udamagetype/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、设置STDevDamageActor
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
1. 添加DaamgeType属性
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;蓝图可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditAnywhere)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TSubclassOf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UDamageType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DamageType;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
2. 造成伤害时，传入DamageType函数
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;取消在Tick中调用DevTakeDamage&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Tick中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTDevDamageActor&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;DevTakeDamageWithDamageType()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UGameplayStatics&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ApplyRadialDamage(GetWorld(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Damage,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          GetActorLocation(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          Radius,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          DamageType,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          {},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          DoFullDamage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
二、设置STHealthComponent
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;在处理函数中，根据DamageType的具体类型，做出相应处理&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;包含头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Dev/STFireDamageType.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Dev/STIceDamageType.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在OnTakeAnyDamage中调用&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HandleDamage(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; UDamageType &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DamageType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (DamageType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (DamageType&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;IsA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTFireDamageType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              UE_LOG(LogHealthComponent, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;So Hooooooot !!!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (DamageType&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;IsA&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USTIceDamageType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              UE_LOG(LogHealthComponent, Display, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;So Cooooooooold !!!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.5.1使用委托修改HealthText</title>
      <link>https://toughcactus.github.io/post/2.5.1%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E4%BF%AE%E6%94%B9healthtext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.5.1%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E4%BF%AE%E6%94%B9healthtext/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;当生命值发生改变时，设置HealthText文本&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、屏蔽当前HealthText的同步
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;ASTBaseCharacter::Tick中，屏蔽DisplayHealthText&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在ASTBaseCharacter::BeginPlay中，调用DisplayHealthText初始化设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先调用Component的BeginPlay，而后调用Character的BeginPlay&lt;/li&gt;
&lt;li&gt;如果在HealthComponent的BeginPlay中广播，在Character的BeginPlay中注册服务，广播在前，注册在后，无法初始化HealthText文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、使用委托修改HealthText，服务端修改
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;USTHealthComponent::OnTakeAnyDamage中，屏蔽HandleDamage&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STHealthComponent.h中，定义委托类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多播，仅C++&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_MULTICAST_DELEGATE(FOnHealthChanged)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USTHealthComponent添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FOnHealthChanged OnHealthChanged;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在USTHealthComponent::OnTakeAnyDamage通知客户端&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OnHealthChanged.Broadcast();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、使用委托修改HealthText，客户端修改
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnHealthChanged()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      DisplayHealthText();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在ASTBaseCharacter::BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindOnHealthChanged()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnHealthChanged.AddUObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnHealthChanged);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.5.2限制生命值范围</title>
      <link>https://toughcactus.github.io/post/2.5.2%E9%99%90%E5%88%B6%E7%94%9F%E5%91%BD%E5%80%BC%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.5.2%E9%99%90%E5%88%B6%E7%94%9F%E5%91%BD%E5%80%BC%E8%8C%83%E5%9B%B4/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;生命值不会小于0&lt;/li&gt;
&lt;li&gt;USTHealthComponent::OnTakeAnyDamage中，若伤害的数量特征不大于0，或者当前生命值不大于0，无法继续对Character造成伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加函数成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蓝图可调用，const函数&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION(BlueprintCallable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsDead() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Health &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、重新实现的OnTakeAnyDamage
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnTakeAnyDamage(AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamagedActor, &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Damage, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UDamageType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageType, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InstigatedBy, AActor&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DamageCauser)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Damage &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; IsDead()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// UE_LOG(LogHealthComponent, Display, TEXT(&amp;#34;Damage: %.0f&amp;#34;), Damage);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Health -= Damage;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      Health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Clamp(Health &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Damage, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, MaxHealth);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// HandleDamage(DamageType);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      OnHealthChanged.Broadcast();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.5.3生命值为0时销毁Character</title>
      <link>https://toughcactus.github.io/post/2.5.3%E7%94%9F%E5%91%BD%E5%80%BC%E4%B8%BA0%E6%97%B6%E9%94%80%E6%AF%81character/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.5.3%E7%94%9F%E5%91%BD%E5%80%BC%E4%B8%BA0%E6%97%B6%E9%94%80%E6%AF%81character/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;使用委托完成&lt;/li&gt;
&lt;li&gt;当生命值发生改变时修改HealthText文本，当生命值变为0时销毁Character，一码归一码&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、服务端设置
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;STHealthComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义委托类型&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DECLARE_MULTICAST_DELEGATE(FOnDeath)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FOnDeath OnDeath;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在OnTakeAnyDamage中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InformClientOnDeath()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsDead())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          OnDeath.Broadcast();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、设置客户端
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;STBaseCharacter&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CheckCharacterMovement()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      check(GetCharacterMovement());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnDeath()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      GetCharacterMovement()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DisableMovement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SetLifeSpan(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在BeginPlay中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindOnDeath()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;OnDeath.AddUObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnDeath);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.5.5在C&#43;&#43;中播放动画剪辑</title>
      <link>https://toughcactus.github.io/post/2.5.5%E5%9C%A8c&#43;&#43;%E4%B8%AD%E6%92%AD%E6%94%BE%E5%8A%A8%E7%94%BB%E5%89%AA%E8%BE%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.5.5%E5%9C%A8c&#43;&#43;%E4%B8%AD%E6%92%AD%E6%94%BE%E5%8A%A8%E7%94%BB%E5%89%AA%E8%BE%91/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;动画剪辑(AnimMontage)在C++中的类型为UAnimMontage&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加数据成员
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;原型可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UAnimMontage &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DeathAnimMontage;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、在Character死亡时，播放动画剪辑
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ASTBaseCharacter::OnDeath中开始处添加如下语句&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayAnimMontage(DeathAnimMontage);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.6.1Character死亡后使用观察视角</title>
      <link>https://toughcactus.github.io/post/2.6.1character%E6%AD%BB%E4%BA%A1%E5%90%8E%E4%BD%BF%E7%94%A8%E8%A7%82%E5%AF%9F%E8%A7%86%E8%A7%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.6.1character%E6%AD%BB%E4%BA%A1%E5%90%8E%E4%BD%BF%E7%94%A8%E8%A7%82%E5%AF%9F%E8%A7%86%E8%A7%92/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;当Character死亡并销毁，Controller无其他Pawn可控制&lt;/li&gt;
&lt;li&gt;观察视角的实现，对应一个APawn派生类，ASpectatorPawn&lt;/li&gt;
&lt;li&gt;关卡的默认类型里，观察者类即使用ASpectatorPawn&lt;/li&gt;
&lt;li&gt;场景中的SpectatorPawn，即漂浮的摄像机，可以前后左右上下移动，键位控制，可以旋转，由鼠标控制&lt;/li&gt;
&lt;li&gt;观察视角的存在，使得玩家死亡后，仍能继续观看游戏&lt;/li&gt;
&lt;li&gt;当Character死亡后，使Controller切换到ASpectatorPawn对象&lt;/li&gt;
&lt;li&gt;本小节使用默认的观察者类，所做的修改在STBaseCharacter中&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加头文件
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;先前我们已设置STBaseCharacter使用STPlayerController类&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;APawn::Controller成员和具体的Controller对象动态绑定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于其声明里使用AController，所以我们包含AController的头文件而非STPlayerController的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;GameFramework/Controller.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、Character死亡时，使用观察视角
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在Character死亡处理函数中调用 ASTBaseCharacter::OnDeath&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SwitchToSpectatorPawn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Controller)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Controller&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ChangeState(NAME_Spectating);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.7自动治疗</title>
      <link>https://toughcactus.github.io/post/2.7%E8%87%AA%E5%8A%A8%E6%B2%BB%E7%96%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.7%E8%87%AA%E5%8A%A8%E6%B2%BB%E7%96%97/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;治疗机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受到伤害则延缓治疗&lt;/li&gt;
&lt;li&gt;不再受到伤害才会自动治疗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用定时器实现&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取定时器管理对象有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UActorComponent::GetOwner &amp;gt; AActor::GetWorldTimerManager&lt;/li&gt;
&lt;li&gt;UActorComponent::GetWorld &amp;gt; UWorld::GetTimerManager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HealthComponent逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、改进更新生命值
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;受到伤害和自动治疗均会修改生命值，随之修改HealthText&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在USTHealthComponent::OnTakeAnyDamage计算伤害时，改为调用SetHealth&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetHealth(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; NewHealth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Clamp(NewHealth, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, MaxHealth);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      OnHealthChanged.Broadcast();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、添加治疗参数
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;使能自动治疗 AutoHeal&lt;/li&gt;
&lt;li&gt;首次治疗延后 HealDelay&lt;/li&gt;
&lt;li&gt;周期恢复生命值 HealRate&lt;/li&gt;
&lt;li&gt;恢复量 HealModifier&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; AutoHeal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EditCondition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoHeal&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; HealRate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EditCondition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoHeal&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; HealDelay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly, Category &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Auto Heal&amp;#34;&lt;/span&gt;, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EditCondition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoHeal&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; HealModifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
三、添加定时器
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加数据成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FTimerHandle HealTimer;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在源文件包含头文件&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Engine/World.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;TimerManager.h&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;进入USTHealthComponent::OnTakeAnyDamage中调用&lt;/li&gt;
&lt;li&gt;恢复到满生命值时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StopHealTimer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (AutoHeal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimerManager().ClearTimer(HealTimer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时器回调函数&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HealUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      SetHealth(Health &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; HealModifier);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;IsNearlyEqual(Health, MaxHealth))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          StopHealTimer();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化定时器&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;USTHealthComponent::OnTakeAnyDamage最后调用，受到伤害后，延后开始自动治疗&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitHealTimer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;IsDead() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; AutoHeal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; GetWorld())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          GetWorld()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;GetTimerManager().SetTimer(HealTimer, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;USTHealthComponent&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HealUpdate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  HealRate, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  true, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  HealDelay);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
四、重写IsDead
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsDead&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;IsNearlyZero(Health); }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.8高处坠落伤害</title>
      <link>https://toughcactus.github.io/post/2.8%E9%AB%98%E5%A4%84%E5%9D%A0%E8%90%BD%E4%BC%A4%E5%AE%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.8%E9%AB%98%E5%A4%84%E5%9D%A0%E8%90%BD%E4%BC%A4%E5%AE%B3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;在STBaseCharacter中实现&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;落地时获取Z方向的速度，其和坠落高度相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;t = sqrt(2*h/g) = v/g&lt;/li&gt;
&lt;li&gt;速度越大，坠落高度越大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跳跃时落地，也符合坠落定义&lt;/li&gt;
&lt;li&gt;在一定范围内，坠落无伤害&lt;/li&gt;
&lt;li&gt;坠落伤害范围 [c, d] LandedDamageRange&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;落地时速度范围 [a, b] LandedDamageVelocityRange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;速度小于a无伤&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在[a, b]范围内，对应伤害[c, d]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c + (Velocity - a) (d - c) / (b - a)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;速度大于b，伤害为d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、添加属性
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;原型可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector2D LandedDamageVelocityRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;900.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1200.0f&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UPROPERTY(EditDefaultsOnly)	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FVector2D LandedDamageRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;10.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0f&lt;/span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、订阅委托
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;委托支持蓝图&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UFUNCTION()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnGroundLanded(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FHitResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Hit);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;委托处理函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OnLanded已被使用&lt;/li&gt;
&lt;li&gt;坠落伤害属于环境伤害，无伤害源(Actor)和阵营(Controller)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnGroundLanded(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FHitResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Hit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Velocity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;GetVelocity().Z;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogBaseCharacter, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Velocity: %0.f&amp;#34;&lt;/span&gt;), Velocity);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Velocity &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; LandedDamageVelocityRange.X) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; LandedDamage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FMath&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetMappedRangeValueClamped(LandedDamageVelocityRange, LandedDamageRange, Velocity);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      UE_LOG(LogBaseCharacter, Log, TEXT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Damage: %0.f&amp;#34;&lt;/span&gt;), LandedDamage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      TakeDamage(LandedDamage, FDamageEvent{}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;在BeginPlay中调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BindOnLanded()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      LandedDelegate.AddDynamic(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ASTBaseCharacter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnGroundLanded);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>虚幻引擎 &gt; 进阶课程 &gt; 虚幻C&#43;&#43; &gt; 2.9打包游戏和收尾</title>
      <link>https://toughcactus.github.io/post/2.9%E6%89%93%E5%8C%85%E6%B8%B8%E6%88%8F%E5%92%8C%E6%94%B6%E5%B0%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://toughcactus.github.io/post/2.9%E6%89%93%E5%8C%85%E6%B8%B8%E6%88%8F%E5%92%8C%E6%94%B6%E5%B0%BE/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
一、打包游戏
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Shipping看不到Debug球&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
二、优化
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ol&gt;
&lt;li&gt;定义委托类型之后，使用分号&lt;/li&gt;
&lt;li&gt;定义委托类型时，类型名以F打头，以Signature结尾&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议 &amp;gt; 类定义顺序 &amp;gt; public&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;委托类型变量&lt;/li&gt;
&lt;li&gt;UFUNCTION&lt;/li&gt;
&lt;li&gt;其他函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加LifeSpanOnDeath属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝图可设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在SetupPlayerInputComponent中检查PlayInputComponent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
